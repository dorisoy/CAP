{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CAP \u00b6 CAP is a library based on .net standard, which is a solution to deal with distributed transactions, also has the function of EventBus, it is lightweight, easy to use, and efficient. Introduction \u00b6 In the process of building an SOA or MicroService system, we usually need to use the event to integrate each service. In the process, simple use of message queue does not guarantee reliability. CAP adopts local message table program integrated with the current database to solve exceptions that may occur in the process of the distributed system calling each other. It can ensure that the event messages are not lost in any case. You can also use CAP as an EventBus. CAP provides a simpler way to implement event publishing and subscriptions. You do not need to inherit or implement any interface during subscription and sending process. CAP implements the Outbox Pattern described in the eShop ebook Atomicity when publishing events to the event bus with a worker microservice For detailed instructions see the Getting Started Guide . Contributing \u00b6 One of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes. If you have any question or problems, please report them on the CAP repository: Report Issue Active Issues License \u00b6 CAP is licensed under the MIT license .","title":"Home"},{"location":"#cap","text":"CAP is a library based on .net standard, which is a solution to deal with distributed transactions, also has the function of EventBus, it is lightweight, easy to use, and efficient.","title":"CAP"},{"location":"#introduction","text":"In the process of building an SOA or MicroService system, we usually need to use the event to integrate each service. In the process, simple use of message queue does not guarantee reliability. CAP adopts local message table program integrated with the current database to solve exceptions that may occur in the process of the distributed system calling each other. It can ensure that the event messages are not lost in any case. You can also use CAP as an EventBus. CAP provides a simpler way to implement event publishing and subscriptions. You do not need to inherit or implement any interface during subscription and sending process. CAP implements the Outbox Pattern described in the eShop ebook Atomicity when publishing events to the event bus with a worker microservice For detailed instructions see the Getting Started Guide .","title":"Introduction"},{"location":"#contributing","text":"One of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes. If you have any question or problems, please report them on the CAP repository: Report Issue Active Issues","title":"Contributing"},{"location":"#license","text":"CAP is licensed under the MIT license .","title":"License"},{"location":"about/contact-us/","text":"Contact Us \u00b6 Authors \u00b6 Author: @yang-xiaodong Email: yangxiaodong1214@126.com Blogs: https://savorboard.cnblogs.com NCC Organization \u00b6 Email: dotnetcn@outlook.com Twitter: https://twitter.com/ncc_community Weibo: https://weibo.com/dotnetcore","title":"Contact Us"},{"location":"about/contact-us/#contact-us","text":"","title":"Contact Us"},{"location":"about/contact-us/#authors","text":"Author: @yang-xiaodong Email: yangxiaodong1214@126.com Blogs: https://savorboard.cnblogs.com","title":"Authors"},{"location":"about/contact-us/#ncc-organization","text":"Email: dotnetcn@outlook.com Twitter: https://twitter.com/ncc_community Weibo: https://weibo.com/dotnetcore","title":"NCC Organization"},{"location":"about/license/","text":"License \u00b6 MIT License Copyright \u00a9 2016 - 2022 Savorboard Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"MIT License Copyright \u00a9 2016 - 2022 Savorboard Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/release-notes/","text":"Release Notes \u00b6 Version 6.0.0 (2022-01-06) \u00b6 Features: Fully support .NET 6. Add support for OpenTelemetry. ( #885 ) Improve support for NATS JetStream wildcard topic. ( #1047 ) Add support customer header options for Azure Service Bus. ( #1063 ) Thanks @Mateus Viegas Version 5.2.0 (2021-11-12) \u00b6 Features: Add support for NATS JetStream. ( #983 ) Add support for Apache Pulsar. ( #610 ) Add possibility to process messages for each consumer group indepedently. ( #1027 ) Bug Fixed: Fixed message content of bigint type cannot be displayed correctly in dashboard. ( #1028 ) Fixed unobserved tasks of async method calls in Amazon SQS. ( #1033 ) Fixed RabbitMQ federation plugin message header object values cause exceptions. ( #1036 ) Version 5.1.2 (2021-07-26) \u00b6 Bug Fixed: Fixed consumer register cancellation token source null referencee bug. ( #952 ) Fixed redis streams transport cluster keys cross-hashslot bug. ( #944 ) Version 5.1.1 (2021-07-09) \u00b6 Features: Improve flow control for message cache of in memory. ( #935 ) Add cancellation token support to subscribers. ( #912 ) Add pathbase options for dashbaord. ( #901 ) Add custom authorization scheme support for dashbaord. ( #906 ) Bug Fixed: Fixed mysql connect timeout expired bug. ( #931 ) Fixed consul health check path invalid bug. ( #921 ) Fixed mongo dashbaord query bug. ( #909 ) Version 5.1.0 (2021-06-07) \u00b6 Features: Add configure options for json serialization. ( #879 ) Add Redis Streams transport support. ( #817 ) New dashboard build with vue. ( #880 ) Add subscribe filter support. ( #894 ) Bug Fixed: Fixed use CapEFDbTransaction to get dbtransaction extension method bug. ( #868 ) Fixed pending message has not been deleted from buffer list in SQL Server. ( #889 ) Fixed dispatcher processing when storage message exception bug. ( #900 ) Version 5.0.3 (2021-05-14) \u00b6 Bug Fixed: Fix the bug of getting db transaction through the IDbContextTransaction for SQLServer. ( #867 ) Fix RabbitMQ Connection close forced. ( #861 ) Version 5.0.2 (2021-04-28) \u00b6 Features: Add support for Azure Service Bus sessions. ( #829 ) Add custom message headers support for RabbitMQ consumer. ( #818 ) Bug Fixed: Downgrading Microsoft.Data.SqlClient to 2.0.1. ( #839 ) DiagnosticObserver does not use null connection. ( #845 ) Fix null reference in AmazonSQSTransport. ( #846 ) Version 5.0.1 (2021-04-07) \u00b6 Features: Add KafkaOptions.MainConfig to AutoCreateTopic. ( #810 ) Add support rewriting the default configuration of Kafka consumer. ( #822 ) Add DefaultChallengeScheme dashboard options to specify dashboard auth challenge scheme. ( #815 ) Bug Fixed: Fixed topic selector in IConsumerServiceSelector. ( #806 ) Update AWS topic subscription and SQS access policy generation. ( #808 ) Fixed memory leak when using transction to publish message. ( #816 ) Fixed SQL content filter on IMonitoringApi.PostgreSql.cs. ( #814 ) Fixed the expiration time display problem in the dashboard due to time zone issues ( #820 ) Fixed the creation timing of Kafka automatically creating Topic. ( #823 ) Fixed Dashboard metric not update. ( #819 ) Version 5.0.0 (2021-03-23) \u00b6 Features: Upgrade to .NET Standard 2.1 and support .NET 5. ( #727 ) Replace Newtonsoft.Json to System.Text.Json. ( #740 ) Support NATS Transport. ( #595 , #743 ) Enabling publiser confirms for RabbitMQ. ( #730 ) Support query subscription from DI implementation factory. ( #756 ) Add options to create lazy queue for RabbitMQ. ( #772 ) Support to add custom tags for Consul. ( #786 ) Support custom group and topic prefiex. ( #780 ) Renemae DefaultGroup option to DefaultGroupName. Add auto create topic at startup for Kafka. ( #795 , #744 ) Bug Fixed: Fixed retrying process earlier than consumer registration to DI. ( #760 ) Fixed Amazon SQS missing pagination topics. ( #765 ) Fixed RabbitMQ MessageTTL option to int type. ( #787 ) Fixed Dashboard auth. ( #793 ) Fixed ClientProvidedName could not be renamed for RabbitMQ. ( #791 ) Fixed EntityFramework transaction will not rollback when exception occurred. ( #798 ) Version 3.1.2 (2020-12-03) \u00b6 Features: * Support record the exception message in the headers. ( #679 ) * Support consul service check for https. ( #722 ) * Support custom producer threads count options for sending. ( #731 ) * Upgrade dependent nuget packages to latest. Bug Fixed: Fixed InmemoryQueue expired messages are not removed bug. ( #691 ) Fixed Executor key change lead to possible null reference exception. ( #698 ) Fixed Postgresql delete expires data logic error. ( #714 ) Version 3.1.1 (2020-09-23) \u00b6 Features: Add consumer parameter with interface suppport. ( #669 ) Add custom correlation id and message id support. ( #668 ) Enhanced custom serialization support. ( #641 ) Bug Fixed: Solve the issue of being duplicated executors from different assemblies. ( #666 ) Added comparer to remove duplicate ConsumerExecutors. ( #653 ) Add re-enable the auto create topics configuration item for Kafka, it's false by default. now is true. ( #635 ) Fixed postgresql transaction rollback invoke bug. ( #640 ) Fixed SQLServer table name customize bug. ( #632 ) Version 3.1.0 (2020-08-15) \u00b6 Features: Add Amazon SQS support. ( #597 ) Remove Dapper and replace with ADO.NET in storage project. ( #583 ) Add debug symbols package to nuget. Upgrade dependent nuget package version to latest. English docs grammar correction. Thanks @mzorec Bug Fixed: Fix mysql transaction rollback bug. ( #598 ) Fix dashboard query bug. ( #600 ) Fix mongo db query bug. ( #611 ) Fix dashboard browser language detection bug. ( #631 ) Version 3.0.4 (2020-05-27) \u00b6 Bug Fixed: Fix kafka consumer group does not works bug. ( #541 ) Fix cast object to primitive types failed bug. ( #547 ) Fix subscriber primitive types convert exception. ( #568 ) Add conosole app sample. Upgrade Confluent.Kafka to 1.4.3 Version 3.0.3 (2020-04-01) \u00b6 Bug Fixed: Change ISubscribeInvoker interface access modifier to public. ( #537 ) Fix rabbitmq connection may be reused when close forced. ( #533 ) Fix dahsboard message reexecute button throws exception bug. ( #525 ) Version 3.0.2 (2020-02-05) \u00b6 Bug Fixed: Fixed diagnostics event data object error. ( #504 ) Fixed RabbitMQ transport check not working. ( #503 ) Fixed Azure Service Bus subscriber error. ( #502 ) Version 3.0.1 (2020-01-19) \u00b6 Bug Fixed: Fixed Dashboard requeue and reconsume failed bug. ( #482 ) Fixed Azure service bus null reference exception. ( #483 ) Fixed type cast exception from storage. ( #473 ) Fixed SqlServer connection undisponse bug. ( #477 ) Version 3.0.0 (2019-12-30) \u00b6 Breaking Changes: In this version, we have made major improvements to the code structure, which have introduced some destructive changes. Publisher and Consumer are not compatible with older versions This version is not compatible with older versions of the message protocol because we have improved the format in which messages are published and stored. Interface changes We have done a lot of refactoring of the code, and some of the interfaces may be incompatible with older versions Detach the dashboard project Features: Supports .NET Core 3.1. Upgrade dependent packages. New serialization interface ISerializer to support serialization of message body sent to MQ. Add new api for ICapPublisher to publish message with headers. Diagnostics event structure and names improved. #378 Support consumer method to read the message headers. #472 Support rename message storage tables. #435 Support for Kafka to write such as Offset and Partition to the header. #374 Improved the processor retry interval time. #444 Bug Fixed: Fixed SqlServer dashboard sql query bug. #470 Fixed Kafka health check bug. #436 Fixed dashboard bugs. #412 #404 Fixed transaction bug for sql server when using EF. #402 Version 2.6.0 (2019-08-29) \u00b6 Features: Improvement Diagnostic support. Thanks @gfx687 Improvement documention. https://cap.dotnetcore.xyz Improvement ConsumerInvoker implementation. Thanks @hetaoos Support multiple consumer threads. ( #295 ) Change DashboardMiddleware to async. ( #390 ) Thanks @liuzhenyulive Bug Fixed: SQL Server Options Bug. Fix transaction scope disposed bug. ( #365 ) Fix thread safe issue of ICapPublisher bug. ( #371 ) Improved Ctrl+C action raised exception issue. Fixed asynchronous exception catching bug of sending. Fix MatchPoundUsingRegex \".\" not escaped bug ( #373 ) Version 2.5.1 (2019-06-21) \u00b6 Features: Improved logs record. Upgrade dependent nuget packages version. (MySqlConnector, confluent-kafka-dotnet-1.0 ) NodeId type change to string of DiscoveryOptions for Consul. ( #314 ) Change the IConsumerServiceSelector interface access modifier to public. ( #333 ) Improved RabbitMQOptions to provide extensions option to configure the client original configuration. ( #350 ) Add index for MongoDB CAP collections. ( #353 ) Bugs Fixed: Fixed consumer re-register transport bug. ( #329 ) Handle messages retrieval failure. ( #324 ) Fixed DiagnosticListener null reference exception bug. ( #335 ) Add subscription name validation for the AzureServerBus. ( #344 ) Fixed thread safety issues of publisher. ( #331 ) Version 2.5.0 (2019-03-30) \u00b6 Features: Support Azure Service Bus. ( #307 ) Support In-Memory Storage. ( #296 ) Upgrade Dapper to version 1.60.1 Support read environment variables CAP_WORKERID and CAP_DATACENTERID as the snowflake algorithm workerid and datacenterid. Bug Fixed: Modify MySQL cap table encoding to utf8mb4. ( #305 ) Move CapSubscribeAttribute class to DotNetCore.CAP project. Fixed multiple instance snowflake algorithm generating primary key conflicts. ( #294 ) Version 2.4.2 (2019-01-08) \u00b6 Features: Startup the CAP with the .NET Core 2.1 BackgroundService. ( #265 ) Improved message delivery performance. #261 Bug Fixed: Fixed PostgreSql version isolation feature bug. ( #256 ) Fixed SQL Server sql bug for dashboard search. ( #266 ) Version 2.4.1 (2018-12-19) \u00b6 Bug Fixed: Fixed MongoDB version isolation feature bug. ( #253 ) Version 2.4.0 (2018-12-08) \u00b6 Features: Supported version options. ( #220 ) Upgrade nuget package to .net core 2.2. Breaking Changes: In order to support the \"version isolation\" feature, we introduced a new version field in version 2.4.0 to isolate different versions of the message, so this requires some adjustments to the database table structure. You can use the following SQL to add a version field to your database CAP related table. MySQL ALTER TABLE ` cap . published ` ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE ` cap . received ` ADD Version VARCHAR ( 20 ) NULL ; SQL Server ALTER TABLE Cap .[ Published ] ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE Cap .[ Received ] ADD Version VARCHAR ( 20 ) NULL ; PostgreSQL ALTER TABLE cap . published ADD \"Version\" VARCHAR ( 20 ) NULL ; ALTER TABLE cap . received ADD \"Version\" VARCHAR ( 20 ) NULL ; MongoDb db.CapPublishedMessage.update({},{\"$set\" : {\"Version\" : \"1\"}}); db.CapReceivedMessage.update({},{\"$set\" : {\"Version\" : \"1\"}}); Bug Fixed: Fixed different groups of the same topic name in one instance will cause routing bug. ( #235 ) Fixed message presistence bug. ( #240 ) Fixed RabbitMQ topic name contains numbers will cause exception bug. ( #181 ) Version 2.3.1 (2018-10-29) \u00b6 Features: Add Source Link Support Upgrade dependent NuGet packages. Bug Fixed: Fixed dashboard messages requeue error. ( #205 ) Adjustment snowflake workerId to random id. Fixed flush unclaer data bug. Version 2.3.0 (2018-08-30) \u00b6 In this version, we made some breaking changes for the publisher API, you can see this blog to understand the story behind. If you have any migration question, please comment in issue ( #190 ). Breaking Changes: Removed app.UseCap() from Startup.cs Message table primary key data type has been modified to Bigint and non auto-Increment. ( #180 ) New publisher Api. ( #188 ) Features: MongoDb supported. ( #143 ) Automatic commit transaction. ( #191 ) Bug Fixed: Fix message still sent if transaction faild bug. ( #118 ) Multiple events in one transaction. ( #171 ) Version 2.2.5 (2018-07-19) \u00b6 Features: - Performance improvement Bug Fixed: Fixed message enqueue exception. Fixed Retry processor bugs. Fixed Kafka producer exception log without logging when publish message. Fixed Incorrect local IP address judgment of IPv6. ( #140 ) Fixed DateTime localization format conversion error to sql. ( #139 ) Fixed dashboard message page re-requeue and re-executed operate bug. ( #158 ) Fixed SendAsync or ExecuteAsync recursion retries bug. ( #160 ) Fixed configuration options of FailedThresholdCallback could not be invoke when the value less then three. ( #161 ) Version 2.2.4 (2018-06-05) \u00b6 Because version 2.2.3 was not released to nuget, so released 2.2.4. Version 2.2.3 (2018-06-05) \u00b6 Features: Improved log output. Upgrade nuget packages. Support pattern matching for consumer. ( #132 ) Bug Fixed: Fixed exception thrown when terminate the program with Ctrl+C. ( #130 ) Version 2.2.2 (2018-04-28) \u00b6 Features: Improved log output. #114 Add default timeout configuration for kafka client. Rename configuration options FailedCallback to FailedThresholdCallback. Bug Fixed: Fixed message enqueue exception. Fixed retry processor bugs. Fixed kafka producer exception log without logging when publish message. Version 2.2.1 (2018-04-18) \u00b6 Bug Fixed: Fixed message enqueue bug in v2.2 Version 2.2.0 (2018-04-17) \u00b6 Features: Remove database queue mode. ( #102 ) Support for Diagnostics. ( #112 ) Upgrade dependent nuget packages. Bug Fixed: Fixed bug of the FailedRetryCount does not increase when raised SubscribeNotFoundException. ( #90 ) Version 2.1.4 (2018-03-16) \u00b6 Features: Remove TableNamePrefix option from MySqlOptions to EFOptions. Upgrade nuget package Bug Fixed: Fixed the connection bug of getting message from table. ( #83 ) Fixed entityframework rename table name prefix bug. ( #84 ) Fixed sql server scripts bug of create table scheme. ( #85 ) Fixed thread safety issue about KafkaOptions.( #89 ) Version 2.1.3 (2018-01-24) \u00b6 Features: Upgrade dependent nuget packages version. NuGet package include xml doc now. NuGet now contains the CAP symbol files. Bug Fixed: Fixed thread conflict issue when sending messages with PublishAsync. ( #80 ) Fixed kafka received message sava failed may caused the mssage loss bug. ( #78 ) Fixed dashboard js syntax issue. ( #77 ) Version 2.1.2 (2017-12-18) \u00b6 Bug Fixed: Fixed and improve the performance of mysql processing messages. ( #68 ) ( #36 ) Fixed dashboard manually trigger reconsumption bug. ( #67 ) Fixed mysql 5.5 table initialization bug. ( #65 ) Fixed mysql message queue executor bug. ( #66 ) Version 2.1.1 (2017-11-28) \u00b6 Bug Fixed: Fixed 'dotnet.exe' process incomplete quit when shutdown application (Ctrl+C). ( #64 ) Fixed failure to issue as expected of RabbitMQ SubscriberNotFoundException. ( #63 ) Fixed Sent async message in the loop causes an exception. ( #62 ) Version 2.1.0 (2017-11-17) \u00b6 Features: Interface display optimization of dashboard. Adds a more friendly display when looks at the message content. Now you can see the exception infomation in the message conent filed when message send or executed failed. Optimize LAN to see Dashboard without authentication. Add IContentSerializer interface, you can customize the serialized message content. Add IMessagePacker interface, you can customize wapper of the message. Upgrade the dependent package. Bug Fixed: Fixed dashboard query bugs. Fixed dashboard multilanguage display bugs. Fixed RabbitMQ connection pool bug. Fixed dashboard display bugs on mobile. Version 2.0.2 (2017-09-29) \u00b6 Bug Fixed: Fixed asp.net core 2.0 startup error of MySql and PostgreSql. ( #44 Version 2.0.1 (2017-09-16) \u00b6 Bug Fixed: DbContext services bug. ( #44 ) Dependency injection bug. ( #45 ) Version 2.0.0 (2017-09-01) \u00b6 Features: Supported .net standard 2.0. Supported PostgreSQL 9.5+. Supported asynchronous function subscriptions. ICapPublisher api supported callback subsrciber. Bug Fixed: Fixed multiple subscriber subscribe bug. ( #38 ) Fixed model binde bug. ( #17 ) ( #18 ) Fixed database connection disposed bug. ( #25 ) Fixed consumer method injection context bug. ( #34 ) Version 1.1.0 (2017-08-04) \u00b6 Features: Support MySQL database persistent message. Add message failed call-back in CapOptions. Remove publish messages API of string name at ICapPublisher . Bug Fixed: Fixed can not send message for string type. ( #17 ) Fixed model bind for type like datetime guid always failed. ( #18 ) Version 1.0.1 (2017-07-25) \u00b6 Features: ICapPublisher interface added synchronous publish API. Add infinity retry failed processor. Version 1.0.0 (2017-07-19) \u00b6 Project published","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"about/release-notes/#version-600-2022-01-06","text":"Features: Fully support .NET 6. Add support for OpenTelemetry. ( #885 ) Improve support for NATS JetStream wildcard topic. ( #1047 ) Add support customer header options for Azure Service Bus. ( #1063 ) Thanks @Mateus Viegas","title":"Version 6.0.0 (2022-01-06)"},{"location":"about/release-notes/#version-520-2021-11-12","text":"Features: Add support for NATS JetStream. ( #983 ) Add support for Apache Pulsar. ( #610 ) Add possibility to process messages for each consumer group indepedently. ( #1027 ) Bug Fixed: Fixed message content of bigint type cannot be displayed correctly in dashboard. ( #1028 ) Fixed unobserved tasks of async method calls in Amazon SQS. ( #1033 ) Fixed RabbitMQ federation plugin message header object values cause exceptions. ( #1036 )","title":"Version 5.2.0 (2021-11-12)"},{"location":"about/release-notes/#version-512-2021-07-26","text":"Bug Fixed: Fixed consumer register cancellation token source null referencee bug. ( #952 ) Fixed redis streams transport cluster keys cross-hashslot bug. ( #944 )","title":"Version 5.1.2 (2021-07-26)"},{"location":"about/release-notes/#version-511-2021-07-09","text":"Features: Improve flow control for message cache of in memory. ( #935 ) Add cancellation token support to subscribers. ( #912 ) Add pathbase options for dashbaord. ( #901 ) Add custom authorization scheme support for dashbaord. ( #906 ) Bug Fixed: Fixed mysql connect timeout expired bug. ( #931 ) Fixed consul health check path invalid bug. ( #921 ) Fixed mongo dashbaord query bug. ( #909 )","title":"Version 5.1.1 (2021-07-09)"},{"location":"about/release-notes/#version-510-2021-06-07","text":"Features: Add configure options for json serialization. ( #879 ) Add Redis Streams transport support. ( #817 ) New dashboard build with vue. ( #880 ) Add subscribe filter support. ( #894 ) Bug Fixed: Fixed use CapEFDbTransaction to get dbtransaction extension method bug. ( #868 ) Fixed pending message has not been deleted from buffer list in SQL Server. ( #889 ) Fixed dispatcher processing when storage message exception bug. ( #900 )","title":"Version 5.1.0 (2021-06-07)"},{"location":"about/release-notes/#version-503-2021-05-14","text":"Bug Fixed: Fix the bug of getting db transaction through the IDbContextTransaction for SQLServer. ( #867 ) Fix RabbitMQ Connection close forced. ( #861 )","title":"Version 5.0.3 (2021-05-14)"},{"location":"about/release-notes/#version-502-2021-04-28","text":"Features: Add support for Azure Service Bus sessions. ( #829 ) Add custom message headers support for RabbitMQ consumer. ( #818 ) Bug Fixed: Downgrading Microsoft.Data.SqlClient to 2.0.1. ( #839 ) DiagnosticObserver does not use null connection. ( #845 ) Fix null reference in AmazonSQSTransport. ( #846 )","title":"Version 5.0.2 (2021-04-28)"},{"location":"about/release-notes/#version-501-2021-04-07","text":"Features: Add KafkaOptions.MainConfig to AutoCreateTopic. ( #810 ) Add support rewriting the default configuration of Kafka consumer. ( #822 ) Add DefaultChallengeScheme dashboard options to specify dashboard auth challenge scheme. ( #815 ) Bug Fixed: Fixed topic selector in IConsumerServiceSelector. ( #806 ) Update AWS topic subscription and SQS access policy generation. ( #808 ) Fixed memory leak when using transction to publish message. ( #816 ) Fixed SQL content filter on IMonitoringApi.PostgreSql.cs. ( #814 ) Fixed the expiration time display problem in the dashboard due to time zone issues ( #820 ) Fixed the creation timing of Kafka automatically creating Topic. ( #823 ) Fixed Dashboard metric not update. ( #819 )","title":"Version 5.0.1 (2021-04-07)"},{"location":"about/release-notes/#version-500-2021-03-23","text":"Features: Upgrade to .NET Standard 2.1 and support .NET 5. ( #727 ) Replace Newtonsoft.Json to System.Text.Json. ( #740 ) Support NATS Transport. ( #595 , #743 ) Enabling publiser confirms for RabbitMQ. ( #730 ) Support query subscription from DI implementation factory. ( #756 ) Add options to create lazy queue for RabbitMQ. ( #772 ) Support to add custom tags for Consul. ( #786 ) Support custom group and topic prefiex. ( #780 ) Renemae DefaultGroup option to DefaultGroupName. Add auto create topic at startup for Kafka. ( #795 , #744 ) Bug Fixed: Fixed retrying process earlier than consumer registration to DI. ( #760 ) Fixed Amazon SQS missing pagination topics. ( #765 ) Fixed RabbitMQ MessageTTL option to int type. ( #787 ) Fixed Dashboard auth. ( #793 ) Fixed ClientProvidedName could not be renamed for RabbitMQ. ( #791 ) Fixed EntityFramework transaction will not rollback when exception occurred. ( #798 )","title":"Version 5.0.0 (2021-03-23)"},{"location":"about/release-notes/#version-312-2020-12-03","text":"Features: * Support record the exception message in the headers. ( #679 ) * Support consul service check for https. ( #722 ) * Support custom producer threads count options for sending. ( #731 ) * Upgrade dependent nuget packages to latest. Bug Fixed: Fixed InmemoryQueue expired messages are not removed bug. ( #691 ) Fixed Executor key change lead to possible null reference exception. ( #698 ) Fixed Postgresql delete expires data logic error. ( #714 )","title":"Version 3.1.2 (2020-12-03)"},{"location":"about/release-notes/#version-311-2020-09-23","text":"Features: Add consumer parameter with interface suppport. ( #669 ) Add custom correlation id and message id support. ( #668 ) Enhanced custom serialization support. ( #641 ) Bug Fixed: Solve the issue of being duplicated executors from different assemblies. ( #666 ) Added comparer to remove duplicate ConsumerExecutors. ( #653 ) Add re-enable the auto create topics configuration item for Kafka, it's false by default. now is true. ( #635 ) Fixed postgresql transaction rollback invoke bug. ( #640 ) Fixed SQLServer table name customize bug. ( #632 )","title":"Version 3.1.1 (2020-09-23)"},{"location":"about/release-notes/#version-310-2020-08-15","text":"Features: Add Amazon SQS support. ( #597 ) Remove Dapper and replace with ADO.NET in storage project. ( #583 ) Add debug symbols package to nuget. Upgrade dependent nuget package version to latest. English docs grammar correction. Thanks @mzorec Bug Fixed: Fix mysql transaction rollback bug. ( #598 ) Fix dashboard query bug. ( #600 ) Fix mongo db query bug. ( #611 ) Fix dashboard browser language detection bug. ( #631 )","title":"Version 3.1.0 (2020-08-15)"},{"location":"about/release-notes/#version-304-2020-05-27","text":"Bug Fixed: Fix kafka consumer group does not works bug. ( #541 ) Fix cast object to primitive types failed bug. ( #547 ) Fix subscriber primitive types convert exception. ( #568 ) Add conosole app sample. Upgrade Confluent.Kafka to 1.4.3","title":"Version 3.0.4 (2020-05-27)"},{"location":"about/release-notes/#version-303-2020-04-01","text":"Bug Fixed: Change ISubscribeInvoker interface access modifier to public. ( #537 ) Fix rabbitmq connection may be reused when close forced. ( #533 ) Fix dahsboard message reexecute button throws exception bug. ( #525 )","title":"Version 3.0.3 (2020-04-01)"},{"location":"about/release-notes/#version-302-2020-02-05","text":"Bug Fixed: Fixed diagnostics event data object error. ( #504 ) Fixed RabbitMQ transport check not working. ( #503 ) Fixed Azure Service Bus subscriber error. ( #502 )","title":"Version 3.0.2 (2020-02-05)"},{"location":"about/release-notes/#version-301-2020-01-19","text":"Bug Fixed: Fixed Dashboard requeue and reconsume failed bug. ( #482 ) Fixed Azure service bus null reference exception. ( #483 ) Fixed type cast exception from storage. ( #473 ) Fixed SqlServer connection undisponse bug. ( #477 )","title":"Version 3.0.1 (2020-01-19)"},{"location":"about/release-notes/#version-300-2019-12-30","text":"Breaking Changes: In this version, we have made major improvements to the code structure, which have introduced some destructive changes. Publisher and Consumer are not compatible with older versions This version is not compatible with older versions of the message protocol because we have improved the format in which messages are published and stored. Interface changes We have done a lot of refactoring of the code, and some of the interfaces may be incompatible with older versions Detach the dashboard project Features: Supports .NET Core 3.1. Upgrade dependent packages. New serialization interface ISerializer to support serialization of message body sent to MQ. Add new api for ICapPublisher to publish message with headers. Diagnostics event structure and names improved. #378 Support consumer method to read the message headers. #472 Support rename message storage tables. #435 Support for Kafka to write such as Offset and Partition to the header. #374 Improved the processor retry interval time. #444 Bug Fixed: Fixed SqlServer dashboard sql query bug. #470 Fixed Kafka health check bug. #436 Fixed dashboard bugs. #412 #404 Fixed transaction bug for sql server when using EF. #402","title":"Version 3.0.0 (2019-12-30)"},{"location":"about/release-notes/#version-260-2019-08-29","text":"Features: Improvement Diagnostic support. Thanks @gfx687 Improvement documention. https://cap.dotnetcore.xyz Improvement ConsumerInvoker implementation. Thanks @hetaoos Support multiple consumer threads. ( #295 ) Change DashboardMiddleware to async. ( #390 ) Thanks @liuzhenyulive Bug Fixed: SQL Server Options Bug. Fix transaction scope disposed bug. ( #365 ) Fix thread safe issue of ICapPublisher bug. ( #371 ) Improved Ctrl+C action raised exception issue. Fixed asynchronous exception catching bug of sending. Fix MatchPoundUsingRegex \".\" not escaped bug ( #373 )","title":"Version 2.6.0 (2019-08-29)"},{"location":"about/release-notes/#version-251-2019-06-21","text":"Features: Improved logs record. Upgrade dependent nuget packages version. (MySqlConnector, confluent-kafka-dotnet-1.0 ) NodeId type change to string of DiscoveryOptions for Consul. ( #314 ) Change the IConsumerServiceSelector interface access modifier to public. ( #333 ) Improved RabbitMQOptions to provide extensions option to configure the client original configuration. ( #350 ) Add index for MongoDB CAP collections. ( #353 ) Bugs Fixed: Fixed consumer re-register transport bug. ( #329 ) Handle messages retrieval failure. ( #324 ) Fixed DiagnosticListener null reference exception bug. ( #335 ) Add subscription name validation for the AzureServerBus. ( #344 ) Fixed thread safety issues of publisher. ( #331 )","title":"Version 2.5.1 (2019-06-21)"},{"location":"about/release-notes/#version-250-2019-03-30","text":"Features: Support Azure Service Bus. ( #307 ) Support In-Memory Storage. ( #296 ) Upgrade Dapper to version 1.60.1 Support read environment variables CAP_WORKERID and CAP_DATACENTERID as the snowflake algorithm workerid and datacenterid. Bug Fixed: Modify MySQL cap table encoding to utf8mb4. ( #305 ) Move CapSubscribeAttribute class to DotNetCore.CAP project. Fixed multiple instance snowflake algorithm generating primary key conflicts. ( #294 )","title":"Version 2.5.0 (2019-03-30)"},{"location":"about/release-notes/#version-242-2019-01-08","text":"Features: Startup the CAP with the .NET Core 2.1 BackgroundService. ( #265 ) Improved message delivery performance. #261 Bug Fixed: Fixed PostgreSql version isolation feature bug. ( #256 ) Fixed SQL Server sql bug for dashboard search. ( #266 )","title":"Version 2.4.2 (2019-01-08)"},{"location":"about/release-notes/#version-241-2018-12-19","text":"Bug Fixed: Fixed MongoDB version isolation feature bug. ( #253 )","title":"Version 2.4.1 (2018-12-19)"},{"location":"about/release-notes/#version-240-2018-12-08","text":"Features: Supported version options. ( #220 ) Upgrade nuget package to .net core 2.2. Breaking Changes: In order to support the \"version isolation\" feature, we introduced a new version field in version 2.4.0 to isolate different versions of the message, so this requires some adjustments to the database table structure. You can use the following SQL to add a version field to your database CAP related table. MySQL ALTER TABLE ` cap . published ` ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE ` cap . received ` ADD Version VARCHAR ( 20 ) NULL ; SQL Server ALTER TABLE Cap .[ Published ] ADD Version VARCHAR ( 20 ) NULL ; ALTER TABLE Cap .[ Received ] ADD Version VARCHAR ( 20 ) NULL ; PostgreSQL ALTER TABLE cap . published ADD \"Version\" VARCHAR ( 20 ) NULL ; ALTER TABLE cap . received ADD \"Version\" VARCHAR ( 20 ) NULL ; MongoDb db.CapPublishedMessage.update({},{\"$set\" : {\"Version\" : \"1\"}}); db.CapReceivedMessage.update({},{\"$set\" : {\"Version\" : \"1\"}}); Bug Fixed: Fixed different groups of the same topic name in one instance will cause routing bug. ( #235 ) Fixed message presistence bug. ( #240 ) Fixed RabbitMQ topic name contains numbers will cause exception bug. ( #181 )","title":"Version 2.4.0 (2018-12-08)"},{"location":"about/release-notes/#version-231-2018-10-29","text":"Features: Add Source Link Support Upgrade dependent NuGet packages. Bug Fixed: Fixed dashboard messages requeue error. ( #205 ) Adjustment snowflake workerId to random id. Fixed flush unclaer data bug.","title":"Version 2.3.1 (2018-10-29)"},{"location":"about/release-notes/#version-230-2018-08-30","text":"In this version, we made some breaking changes for the publisher API, you can see this blog to understand the story behind. If you have any migration question, please comment in issue ( #190 ). Breaking Changes: Removed app.UseCap() from Startup.cs Message table primary key data type has been modified to Bigint and non auto-Increment. ( #180 ) New publisher Api. ( #188 ) Features: MongoDb supported. ( #143 ) Automatic commit transaction. ( #191 ) Bug Fixed: Fix message still sent if transaction faild bug. ( #118 ) Multiple events in one transaction. ( #171 )","title":"Version 2.3.0 (2018-08-30)"},{"location":"about/release-notes/#version-225-2018-07-19","text":"Features: - Performance improvement Bug Fixed: Fixed message enqueue exception. Fixed Retry processor bugs. Fixed Kafka producer exception log without logging when publish message. Fixed Incorrect local IP address judgment of IPv6. ( #140 ) Fixed DateTime localization format conversion error to sql. ( #139 ) Fixed dashboard message page re-requeue and re-executed operate bug. ( #158 ) Fixed SendAsync or ExecuteAsync recursion retries bug. ( #160 ) Fixed configuration options of FailedThresholdCallback could not be invoke when the value less then three. ( #161 )","title":"Version 2.2.5 (2018-07-19)"},{"location":"about/release-notes/#version-224-2018-06-05","text":"Because version 2.2.3 was not released to nuget, so released 2.2.4.","title":"Version 2.2.4 (2018-06-05)"},{"location":"about/release-notes/#version-223-2018-06-05","text":"Features: Improved log output. Upgrade nuget packages. Support pattern matching for consumer. ( #132 ) Bug Fixed: Fixed exception thrown when terminate the program with Ctrl+C. ( #130 )","title":"Version 2.2.3 (2018-06-05)"},{"location":"about/release-notes/#version-222-2018-04-28","text":"Features: Improved log output. #114 Add default timeout configuration for kafka client. Rename configuration options FailedCallback to FailedThresholdCallback. Bug Fixed: Fixed message enqueue exception. Fixed retry processor bugs. Fixed kafka producer exception log without logging when publish message.","title":"Version 2.2.2 (2018-04-28)"},{"location":"about/release-notes/#version-221-2018-04-18","text":"Bug Fixed: Fixed message enqueue bug in v2.2","title":"Version 2.2.1 (2018-04-18)"},{"location":"about/release-notes/#version-220-2018-04-17","text":"Features: Remove database queue mode. ( #102 ) Support for Diagnostics. ( #112 ) Upgrade dependent nuget packages. Bug Fixed: Fixed bug of the FailedRetryCount does not increase when raised SubscribeNotFoundException. ( #90 )","title":"Version 2.2.0 (2018-04-17)"},{"location":"about/release-notes/#version-214-2018-03-16","text":"Features: Remove TableNamePrefix option from MySqlOptions to EFOptions. Upgrade nuget package Bug Fixed: Fixed the connection bug of getting message from table. ( #83 ) Fixed entityframework rename table name prefix bug. ( #84 ) Fixed sql server scripts bug of create table scheme. ( #85 ) Fixed thread safety issue about KafkaOptions.( #89 )","title":"Version 2.1.4 (2018-03-16)"},{"location":"about/release-notes/#version-213-2018-01-24","text":"Features: Upgrade dependent nuget packages version. NuGet package include xml doc now. NuGet now contains the CAP symbol files. Bug Fixed: Fixed thread conflict issue when sending messages with PublishAsync. ( #80 ) Fixed kafka received message sava failed may caused the mssage loss bug. ( #78 ) Fixed dashboard js syntax issue. ( #77 )","title":"Version 2.1.3 (2018-01-24)"},{"location":"about/release-notes/#version-212-2017-12-18","text":"Bug Fixed: Fixed and improve the performance of mysql processing messages. ( #68 ) ( #36 ) Fixed dashboard manually trigger reconsumption bug. ( #67 ) Fixed mysql 5.5 table initialization bug. ( #65 ) Fixed mysql message queue executor bug. ( #66 )","title":"Version 2.1.2 (2017-12-18)"},{"location":"about/release-notes/#version-211-2017-11-28","text":"Bug Fixed: Fixed 'dotnet.exe' process incomplete quit when shutdown application (Ctrl+C). ( #64 ) Fixed failure to issue as expected of RabbitMQ SubscriberNotFoundException. ( #63 ) Fixed Sent async message in the loop causes an exception. ( #62 )","title":"Version 2.1.1 (2017-11-28)"},{"location":"about/release-notes/#version-210-2017-11-17","text":"Features: Interface display optimization of dashboard. Adds a more friendly display when looks at the message content. Now you can see the exception infomation in the message conent filed when message send or executed failed. Optimize LAN to see Dashboard without authentication. Add IContentSerializer interface, you can customize the serialized message content. Add IMessagePacker interface, you can customize wapper of the message. Upgrade the dependent package. Bug Fixed: Fixed dashboard query bugs. Fixed dashboard multilanguage display bugs. Fixed RabbitMQ connection pool bug. Fixed dashboard display bugs on mobile.","title":"Version 2.1.0 (2017-11-17)"},{"location":"about/release-notes/#version-202-2017-09-29","text":"Bug Fixed: Fixed asp.net core 2.0 startup error of MySql and PostgreSql. ( #44","title":"Version 2.0.2 (2017-09-29)"},{"location":"about/release-notes/#version-201-2017-09-16","text":"Bug Fixed: DbContext services bug. ( #44 ) Dependency injection bug. ( #45 )","title":"Version 2.0.1 (2017-09-16)"},{"location":"about/release-notes/#version-200-2017-09-01","text":"Features: Supported .net standard 2.0. Supported PostgreSQL 9.5+. Supported asynchronous function subscriptions. ICapPublisher api supported callback subsrciber. Bug Fixed: Fixed multiple subscriber subscribe bug. ( #38 ) Fixed model binde bug. ( #17 ) ( #18 ) Fixed database connection disposed bug. ( #25 ) Fixed consumer method injection context bug. ( #34 )","title":"Version 2.0.0 (2017-09-01)"},{"location":"about/release-notes/#version-110-2017-08-04","text":"Features: Support MySQL database persistent message. Add message failed call-back in CapOptions. Remove publish messages API of string name at ICapPublisher . Bug Fixed: Fixed can not send message for string type. ( #17 ) Fixed model bind for type like datetime guid always failed. ( #18 )","title":"Version 1.1.0 (2017-08-04)"},{"location":"about/release-notes/#version-101-2017-07-25","text":"Features: ICapPublisher interface added synchronous publish API. Add infinity retry failed processor.","title":"Version 1.0.1 (2017-07-25)"},{"location":"about/release-notes/#version-100-2017-07-19","text":"Project published","title":"Version 1.0.0 (2017-07-19)"},{"location":"user-guide/en/cap/configuration/","text":"Configuration \u00b6 By default, you can specify configuration when you register CAP services into the IoC container for ASP.NET Core project. services . AddCap ( config => { // config.XXX }); services is IServiceCollection interface, which can be found in the Microsoft.Extensions.DependencyInjection package. If you don't want to use Microsoft's IoC container, you can take a look at ASP.NET Core documentation here to learn how to replace the default container implementation. What is minimum configuration required for CAP \u00b6 you have to configure at least a transport and a storage. If you want to get started quickly you can use the following configuration: services . AddCap ( capOptions => { capOptions . UseInMemoryQueue (); capOptions . UseInmemoryStorage (); }); For specific transport and storage configuration, you can take a look at the configuration options provided by the specific components in the Transports section and the Persistent section. Custom configuration \u00b6 The CapOptions is used to store configuration information. By default they have default values, sometimes you may need to customize them. DefaultGroupName \u00b6 Default: cap.queue.{assembly name} The default consumer group name, corresponds to different names in different Transports, you can customize this value to customize the names in Transports for easy viewing. Mapping Map to Queue Names in RabbitMQ. Map to Consumer Group Id in Apache Kafka. Map to Subscription Name in Azure Service Bus. Map to Queue Group Name in NATS. Map to Consumer Group in Redis Streams. GroupNamePrefix \u00b6 Default: Null Add unified prefixes for consumer group. https://github.com/dotnetcore/CAP/pull/780 TopicNamePrefix \u00b6 Default: Null Add unified prefixes for topic/queue name. https://github.com/dotnetcore/CAP/pull/780 Versioning \u00b6 Default: v1 This is a new configuration option introduced in the CAP v2.4 version. It is used to specify a version of a message to isolate messages of different versions of the service. It is often used in A/B testing or multi-service version scenarios. Following are application scenarios that needs versioning: Business Iterative and compatible Due to the rapid iteration of services, the data structure of the message is not fixed during each service integration process. Sometimes we add or modify certain data structures to accommodate the newly introduced requirements. If you have a brand new system, there's no problem, but if your system is already deployed to a production environment and serves customers, this will cause new features to be incompatible with the old data structure when they go online, and then these changes can cause serious problems. To work around this issue, you can only clean up message queues and persistent messages before starting the application, which is obviously not acceptable for production environments. Multiple versions of the server Sometimes, the server's server needs to provide multiple sets of interfaces to support different versions of the app. Data structures of the same interface and server interaction of these different versions of the app may be different, so usually server does not provide the same routing addresses to adapt to different versions of App calls. Using the same persistent table/collection in different instance If you want multiple different instance services to use the same database, in versions prior to 2.4, we could isolate database tables for different instances by specifying different table names. After version 2.4 this can be achived through CAP configuration, by configuring different table name prefixes. Check out the blog to learn more about the Versioning feature: https://www.cnblogs.com/savorboard/p/cap-2-4.html FailedRetryInterval \u00b6 Default: 60 sec During the message sending process if message transport fails, CAP will try to send the message again. This configuration option is used to configure the interval between each retry. During the message sending process if consumption method fails, CAP will try to execute the method again. This configuration option is used to configure the interval between each retry. Retry & Interval By default if failure occurs on send or consume, retry will start after 4 minutes in order to avoid possible problems caused by setting message state delays. Failures in the process of sending and consuming messages will be retried 3 times immediately, and will be retried polling after 3 times, at which point the FailedRetryInterval configuration will take effect. CollectorCleaningInterval \u00b6 Default: 300 sec The interval of the collector processor deletes expired messages. ConsumerThreadCount \u00b6 Default: 1 Number of consumer threads, when this value is greater than 1, the order of message execution cannot be guaranteed. FailedRetryCount \u00b6 Default: 50 Maximum number of retries. When this value is reached, retry will stop and the maximum number of retries will be modified by setting this parameter. FailedThresholdCallback \u00b6 Default: NULL Type: Action<FailedInfo> Failure threshold callback. This action is called when the retry reaches the value set by FailedRetryCount , you can receive notification by specifying this parameter to make a manual intervention. For example, send an email or notification. SucceedMessageExpiredAfter \u00b6 Default: 24*3600 sec (1 days) The expiration time (in seconds) of the success message. When the message is sent or consumed successfully, it will be removed from database storage when the time reaches SucceedMessageExpiredAfter seconds. You can set the expiration time by specifying this value. FailedMessageExpiredAfter \u00b6 Default: 15*24*3600 sec(15 days) The expiration time (in seconds) of the failed message. When the message is sent or consumed failed, it will be removed from database storage when the time reaches FailedMessageExpiredAfter seconds. You can set the expiration time by specifying this value. UseDispatchingPerGroup \u00b6 Default: false If true then all consumers within the same group pushes received messages to own dispatching pipeline channel. Each channel has set thread count to ConsumerThreadCount value. If option set true, the EnableConsumerPrefetch option is disabled EnableConsumerPrefetch \u00b6 Default: false\uff0c Before version 7.0 the default behavior is true By default, CAP will only read one message from the message queue, then execute the subscription method. After the execution is done, it will read the next message for execution. If set to true, the consumer will prefetch some messages to the memory queue, and then distribute them to the scheduler for execution. Precautions Setting it to true may cause some problems. When the subscription method executes too slowly and takes too long, it will cause the retry thread to pick up messages that have not yet been executed. The retry thread picks up messages from 4 minutes ago by default, that is to say, if the message backlog of more than 4 minutes on the consumer side will be picked up again and executed again","title":"Configuration"},{"location":"user-guide/en/cap/configuration/#configuration","text":"By default, you can specify configuration when you register CAP services into the IoC container for ASP.NET Core project. services . AddCap ( config => { // config.XXX }); services is IServiceCollection interface, which can be found in the Microsoft.Extensions.DependencyInjection package. If you don't want to use Microsoft's IoC container, you can take a look at ASP.NET Core documentation here to learn how to replace the default container implementation.","title":"Configuration"},{"location":"user-guide/en/cap/configuration/#what-is-minimum-configuration-required-for-cap","text":"you have to configure at least a transport and a storage. If you want to get started quickly you can use the following configuration: services . AddCap ( capOptions => { capOptions . UseInMemoryQueue (); capOptions . UseInmemoryStorage (); }); For specific transport and storage configuration, you can take a look at the configuration options provided by the specific components in the Transports section and the Persistent section.","title":"What is minimum configuration required for CAP"},{"location":"user-guide/en/cap/configuration/#custom-configuration","text":"The CapOptions is used to store configuration information. By default they have default values, sometimes you may need to customize them.","title":"Custom configuration"},{"location":"user-guide/en/cap/configuration/#defaultgroupname","text":"Default: cap.queue.{assembly name} The default consumer group name, corresponds to different names in different Transports, you can customize this value to customize the names in Transports for easy viewing. Mapping Map to Queue Names in RabbitMQ. Map to Consumer Group Id in Apache Kafka. Map to Subscription Name in Azure Service Bus. Map to Queue Group Name in NATS. Map to Consumer Group in Redis Streams.","title":"DefaultGroupName"},{"location":"user-guide/en/cap/configuration/#groupnameprefix","text":"Default: Null Add unified prefixes for consumer group. https://github.com/dotnetcore/CAP/pull/780","title":"GroupNamePrefix"},{"location":"user-guide/en/cap/configuration/#topicnameprefix","text":"Default: Null Add unified prefixes for topic/queue name. https://github.com/dotnetcore/CAP/pull/780","title":"TopicNamePrefix"},{"location":"user-guide/en/cap/configuration/#versioning","text":"Default: v1 This is a new configuration option introduced in the CAP v2.4 version. It is used to specify a version of a message to isolate messages of different versions of the service. It is often used in A/B testing or multi-service version scenarios. Following are application scenarios that needs versioning: Business Iterative and compatible Due to the rapid iteration of services, the data structure of the message is not fixed during each service integration process. Sometimes we add or modify certain data structures to accommodate the newly introduced requirements. If you have a brand new system, there's no problem, but if your system is already deployed to a production environment and serves customers, this will cause new features to be incompatible with the old data structure when they go online, and then these changes can cause serious problems. To work around this issue, you can only clean up message queues and persistent messages before starting the application, which is obviously not acceptable for production environments. Multiple versions of the server Sometimes, the server's server needs to provide multiple sets of interfaces to support different versions of the app. Data structures of the same interface and server interaction of these different versions of the app may be different, so usually server does not provide the same routing addresses to adapt to different versions of App calls. Using the same persistent table/collection in different instance If you want multiple different instance services to use the same database, in versions prior to 2.4, we could isolate database tables for different instances by specifying different table names. After version 2.4 this can be achived through CAP configuration, by configuring different table name prefixes. Check out the blog to learn more about the Versioning feature: https://www.cnblogs.com/savorboard/p/cap-2-4.html","title":"Versioning"},{"location":"user-guide/en/cap/configuration/#failedretryinterval","text":"Default: 60 sec During the message sending process if message transport fails, CAP will try to send the message again. This configuration option is used to configure the interval between each retry. During the message sending process if consumption method fails, CAP will try to execute the method again. This configuration option is used to configure the interval between each retry. Retry & Interval By default if failure occurs on send or consume, retry will start after 4 minutes in order to avoid possible problems caused by setting message state delays. Failures in the process of sending and consuming messages will be retried 3 times immediately, and will be retried polling after 3 times, at which point the FailedRetryInterval configuration will take effect.","title":"FailedRetryInterval"},{"location":"user-guide/en/cap/configuration/#collectorcleaninginterval","text":"Default: 300 sec The interval of the collector processor deletes expired messages.","title":"CollectorCleaningInterval"},{"location":"user-guide/en/cap/configuration/#consumerthreadcount","text":"Default: 1 Number of consumer threads, when this value is greater than 1, the order of message execution cannot be guaranteed.","title":"ConsumerThreadCount"},{"location":"user-guide/en/cap/configuration/#failedretrycount","text":"Default: 50 Maximum number of retries. When this value is reached, retry will stop and the maximum number of retries will be modified by setting this parameter.","title":"FailedRetryCount"},{"location":"user-guide/en/cap/configuration/#failedthresholdcallback","text":"Default: NULL Type: Action<FailedInfo> Failure threshold callback. This action is called when the retry reaches the value set by FailedRetryCount , you can receive notification by specifying this parameter to make a manual intervention. For example, send an email or notification.","title":"FailedThresholdCallback"},{"location":"user-guide/en/cap/configuration/#succeedmessageexpiredafter","text":"Default: 24*3600 sec (1 days) The expiration time (in seconds) of the success message. When the message is sent or consumed successfully, it will be removed from database storage when the time reaches SucceedMessageExpiredAfter seconds. You can set the expiration time by specifying this value.","title":"SucceedMessageExpiredAfter"},{"location":"user-guide/en/cap/configuration/#failedmessageexpiredafter","text":"Default: 15*24*3600 sec(15 days) The expiration time (in seconds) of the failed message. When the message is sent or consumed failed, it will be removed from database storage when the time reaches FailedMessageExpiredAfter seconds. You can set the expiration time by specifying this value.","title":"FailedMessageExpiredAfter"},{"location":"user-guide/en/cap/configuration/#usedispatchingpergroup","text":"Default: false If true then all consumers within the same group pushes received messages to own dispatching pipeline channel. Each channel has set thread count to ConsumerThreadCount value. If option set true, the EnableConsumerPrefetch option is disabled","title":"UseDispatchingPerGroup"},{"location":"user-guide/en/cap/configuration/#enableconsumerprefetch","text":"Default: false\uff0c Before version 7.0 the default behavior is true By default, CAP will only read one message from the message queue, then execute the subscription method. After the execution is done, it will read the next message for execution. If set to true, the consumer will prefetch some messages to the memory queue, and then distribute them to the scheduler for execution. Precautions Setting it to true may cause some problems. When the subscription method executes too slowly and takes too long, it will cause the retry thread to pick up messages that have not yet been executed. The retry thread picks up messages from 4 minutes ago by default, that is to say, if the message backlog of more than 4 minutes on the consumer side will be picked up again and executed again","title":"EnableConsumerPrefetch"},{"location":"user-guide/en/cap/filter/","text":"Filter \u00b6 Subscriber filters are similar to ASP.NET MVC filters and are mainly used to process additional work before and after the subscriber method is executed. Such as transaction management or logging, etc. Create subscribe filter \u00b6 Create Filter \u00b6 Create a new filter class and inherit the SubscribeFilter abstract class. public class MyCapFilter : SubscribeFilter { public override Task OnSubscribeExecutingAsync ( ExecutingContext context ) { // before subscribe method exectuing } public override Task OnSubscribeExecutedAsync ( ExecutedContext context ) { // after subscribe method executed } public override Task OnSubscribeExceptionAsync ( ExceptionContext context ) { // subscribe method execution exception } } In some scenarios, if you want to terminate the subscriber method execution, you can throw an exception in OnSubscribeExecutingAsync , and choose to ignore the exception in OnSubscribeExceptionAsync . To ignore exceptions, you can setting context.ExceptionHandled = true in ExceptionContext public override Task OnSubscribeExceptionAsync ( ExceptionContext context ) { context . ExceptionHandled = true ; } Configuration Filter \u00b6 Use AddSubscribeFilter<> to add a filter. services . AddCap ( opt => { // *** }. AddSubscribeFilter < MyCapFilter >(); Currently, we do not support adding multiple filters.","title":"Filter"},{"location":"user-guide/en/cap/filter/#filter","text":"Subscriber filters are similar to ASP.NET MVC filters and are mainly used to process additional work before and after the subscriber method is executed. Such as transaction management or logging, etc.","title":"Filter"},{"location":"user-guide/en/cap/filter/#create-subscribe-filter","text":"","title":"Create subscribe filter"},{"location":"user-guide/en/cap/filter/#create-filter","text":"Create a new filter class and inherit the SubscribeFilter abstract class. public class MyCapFilter : SubscribeFilter { public override Task OnSubscribeExecutingAsync ( ExecutingContext context ) { // before subscribe method exectuing } public override Task OnSubscribeExecutedAsync ( ExecutedContext context ) { // after subscribe method executed } public override Task OnSubscribeExceptionAsync ( ExceptionContext context ) { // subscribe method execution exception } } In some scenarios, if you want to terminate the subscriber method execution, you can throw an exception in OnSubscribeExecutingAsync , and choose to ignore the exception in OnSubscribeExceptionAsync . To ignore exceptions, you can setting context.ExceptionHandled = true in ExceptionContext public override Task OnSubscribeExceptionAsync ( ExceptionContext context ) { context . ExceptionHandled = true ; }","title":"Create Filter"},{"location":"user-guide/en/cap/filter/#configuration-filter","text":"Use AddSubscribeFilter<> to add a filter. services . AddCap ( opt => { // *** }. AddSubscribeFilter < MyCapFilter >(); Currently, we do not support adding multiple filters.","title":"Configuration Filter"},{"location":"user-guide/en/cap/idempotence/","text":"Idempotence \u00b6 Imdempotence (which you may read a formal definition of on Wikipedia , when we are talking about messaging, is when a message redelivery can be handled without ending up in an unintended state. Delivery guarantees 1 \u00b6 Before we talk about idempotency, let's talk about the delivery of messages on the consumer side. Since CAP doesn't uses MS DTC or other type of 2PC distributed transaction mechanism, there is a problem that the message is strictly delivered at least once. Specifically, in a message-based system, there are three possibilities: Exactly Once(*) At Most Once At Least Once Exactly once has a (*) next to it, because in the general case, it is simply not possible. At Most Once \u00b6 The At Most Once delivery guarantee covers the case when you are guaranteed to receive all messages either once, or maybe not at all. This type of delivery guarantee can arise from your messaging system and your code performing its actions in the following order: 1. Remove message from queue 2. Start work transaction 3. Handle message (your code) 4. Success? Yes: 1. Commit work transaction No: 1. Roll back work transaction 2. Put message back into the queue In the best case scenario, this is all well and good \u2013 your messages will be received, and work transactions will be committed, and you will be happy. However, the sun does not always shine, and stuff tends to fail \u2013 especially if you do alot of stuff. Consider e.g. what would happen if anything fails after having performed step (1), and then \u2013 when you try to execute step (4)/(2) (i.e. put the message back into the queue) \u2013 the network was temporarily unavailable, or the message broker restarted, or the host machine decided to reboot because it had installed an update. This can be OK if it's what you want, but most things in CAP revolve around the concept of DURABLE messages, i.e. messages whose contents is just as important as the data in your database. At Least Once \u00b6 This delivery guarantee covers the case when you are guaranteed to receive all messages either once, or maybe more times if something has failed. It requires a slight change to the order we are executing our steps in, and it requires that the message queue system supports transactions, either in the form of the traditional begin-commit-rollback protocol (MSMQ does this), or in the form of a receive-ack-nack protocol (RabbitMQ, Azure Service Bus, etc. do this). Check this out \u2013 if we do this: 1. Grab lease on message in queue 2. Start work transaction 3. Handle message (your code) 4. Success? Yes: 1. Commit work transaction 2. Delete message from queue No: 1. Roll back work transaction 2. Release lease on message and the \"lease\" we grabbed on the message in step (1) is associated with an appropriate timeout, then we are guaranteed that no matter how wrong things go, we will only actually remove the message from the queue (i.e. execute step (4)/(2)) if we have successfully committed our \"work transaction\". What is a \"work transaction\"? \u00b6 It depends on what you're doing \ud83d\ude04 maybe it's a transaction in a relational database (which traditionally have pretty good support in this regard), maybe it's a transaction in a document database that happens to support transaction (like RavenDB or Postgres), or maybe it's a conceptual transaction in the form of whichever work you happen to carry out as a consequence of handling a message, e.g. update a bunch of documents in MongoDB, move some files around in the file system, or mutate some obscure in-mem data structure. The fact that the \"work transaction\" is just a conceptual thing is what makes it impossible to support the aforementioned Exactly Once delivery guarantee \u2013 it's just not generally possible to commit or roll back a \"work transaction\" and a \"queue transaction\" (which is what we could call the protocol carried out with the message queue systems) atomically and consistently. Idempotence at CAP \u00b6 In CAP, At Least Once delivery guarantee is used. Since we have a temporary storage medium (database table), we may be able to do At Most Once, but in order to strictly guarantee that the message will not be lost, we do not provide related functions or configurations. Why are we not providing(achieving) idempotency ? \u00b6 The message was successfully written, but the execution of the Consumer method failed. There are a lot of reasons why the Consumer method fails. I don't know if the specific scene is blindly retrying or not retrying is an incorrect choice. For example, if the consumer is debiting service, if the execution of the debit is successful, but fails to write the debit log, the CAP will judge that the consumer failed to execute and try again. If the client does not guarantee idempotency, the framework will retry it, which will inevitably lead to serious consequences for multiple debits. The execution of the Consumer method succeeded, but received the same message. This scenario is also possible. If the Consumer has been successfully executed at the beginning, but for some reason, such as the Broker recovery, same message has been received, CAP will consider this as a new message after receiving the Broker message. Message will be executed again by the Consumer. Because it is a new message, CAP cannot be idempotent at this time. The current data storage mode can not be idempotent. Since the table of the CAP message is deleted after 1 hour for the successfully consumed message, if the historical message cannot be idempotent. Historically, if the broker has maintained or manually processed some messages for some reason. Industry practices. Many event-driven frameworks require users to ensure idempotent operations, such as ENode, RocketMQ, etc... From an implementation point of view, CAP can do some less stringent idempotence, but strict idempotent can not be guaranteed. Naturally idempotent message processing \u00b6 Generally, the best way to deal with message redeliveries is to make the processing of each message naturally idempotent. Natural idempotence arises when the processing of a message consists of calling an idempotent method on a domain object, like obj.MarkAsDeleted(); or obj.UpdatePeriod(message.NewPeriod); You can use the INSERT ON DUPLICATE KEY UPDATE provided by the database to easily done. Explicitly handling redeliveries \u00b6 Another way of making message processing idempotent, is to simply track IDs of processed messages explicitly, and then make your code handle a redelivery. Assuming that you are keeping track of message IDs by using an IMessageTracker that uses the same transactional data store as the rest of your work, your code might look somewhat like this: readonly IMessageTracker _messageTracker ; public SomeMessageHandler ( IMessageTracker messageTracker ) { _messageTracker = messageTracker ; } [CapSubscribe] public async Task Handle ( SomeMessage message ) { if ( await _messageTracker . HasProcessed ( message . Id )) { return ; } // do the work here // ... // remember that this message has been processed await _messageTracker . MarkAsProcessed ( messageId ); } As for the implementation of IMessageTracker , you can use a storage message Id such as Redis or a database and the corresponding processing state. The chapter refers to the Delivery guarantees of rebus, which I think is described very good. \u21a9","title":"Idempotence"},{"location":"user-guide/en/cap/idempotence/#idempotence","text":"Imdempotence (which you may read a formal definition of on Wikipedia , when we are talking about messaging, is when a message redelivery can be handled without ending up in an unintended state.","title":"Idempotence"},{"location":"user-guide/en/cap/idempotence/#delivery-guarantees1","text":"Before we talk about idempotency, let's talk about the delivery of messages on the consumer side. Since CAP doesn't uses MS DTC or other type of 2PC distributed transaction mechanism, there is a problem that the message is strictly delivered at least once. Specifically, in a message-based system, there are three possibilities: Exactly Once(*) At Most Once At Least Once Exactly once has a (*) next to it, because in the general case, it is simply not possible.","title":"Delivery guarantees1"},{"location":"user-guide/en/cap/idempotence/#at-most-once","text":"The At Most Once delivery guarantee covers the case when you are guaranteed to receive all messages either once, or maybe not at all. This type of delivery guarantee can arise from your messaging system and your code performing its actions in the following order: 1. Remove message from queue 2. Start work transaction 3. Handle message (your code) 4. Success? Yes: 1. Commit work transaction No: 1. Roll back work transaction 2. Put message back into the queue In the best case scenario, this is all well and good \u2013 your messages will be received, and work transactions will be committed, and you will be happy. However, the sun does not always shine, and stuff tends to fail \u2013 especially if you do alot of stuff. Consider e.g. what would happen if anything fails after having performed step (1), and then \u2013 when you try to execute step (4)/(2) (i.e. put the message back into the queue) \u2013 the network was temporarily unavailable, or the message broker restarted, or the host machine decided to reboot because it had installed an update. This can be OK if it's what you want, but most things in CAP revolve around the concept of DURABLE messages, i.e. messages whose contents is just as important as the data in your database.","title":"At Most Once"},{"location":"user-guide/en/cap/idempotence/#at-least-once","text":"This delivery guarantee covers the case when you are guaranteed to receive all messages either once, or maybe more times if something has failed. It requires a slight change to the order we are executing our steps in, and it requires that the message queue system supports transactions, either in the form of the traditional begin-commit-rollback protocol (MSMQ does this), or in the form of a receive-ack-nack protocol (RabbitMQ, Azure Service Bus, etc. do this). Check this out \u2013 if we do this: 1. Grab lease on message in queue 2. Start work transaction 3. Handle message (your code) 4. Success? Yes: 1. Commit work transaction 2. Delete message from queue No: 1. Roll back work transaction 2. Release lease on message and the \"lease\" we grabbed on the message in step (1) is associated with an appropriate timeout, then we are guaranteed that no matter how wrong things go, we will only actually remove the message from the queue (i.e. execute step (4)/(2)) if we have successfully committed our \"work transaction\".","title":"At Least Once"},{"location":"user-guide/en/cap/idempotence/#what-is-a-work-transaction","text":"It depends on what you're doing \ud83d\ude04 maybe it's a transaction in a relational database (which traditionally have pretty good support in this regard), maybe it's a transaction in a document database that happens to support transaction (like RavenDB or Postgres), or maybe it's a conceptual transaction in the form of whichever work you happen to carry out as a consequence of handling a message, e.g. update a bunch of documents in MongoDB, move some files around in the file system, or mutate some obscure in-mem data structure. The fact that the \"work transaction\" is just a conceptual thing is what makes it impossible to support the aforementioned Exactly Once delivery guarantee \u2013 it's just not generally possible to commit or roll back a \"work transaction\" and a \"queue transaction\" (which is what we could call the protocol carried out with the message queue systems) atomically and consistently.","title":"What is a \"work transaction\"?"},{"location":"user-guide/en/cap/idempotence/#idempotence-at-cap","text":"In CAP, At Least Once delivery guarantee is used. Since we have a temporary storage medium (database table), we may be able to do At Most Once, but in order to strictly guarantee that the message will not be lost, we do not provide related functions or configurations.","title":"Idempotence at CAP"},{"location":"user-guide/en/cap/idempotence/#why-are-we-not-providingachieving-idempotency","text":"The message was successfully written, but the execution of the Consumer method failed. There are a lot of reasons why the Consumer method fails. I don't know if the specific scene is blindly retrying or not retrying is an incorrect choice. For example, if the consumer is debiting service, if the execution of the debit is successful, but fails to write the debit log, the CAP will judge that the consumer failed to execute and try again. If the client does not guarantee idempotency, the framework will retry it, which will inevitably lead to serious consequences for multiple debits. The execution of the Consumer method succeeded, but received the same message. This scenario is also possible. If the Consumer has been successfully executed at the beginning, but for some reason, such as the Broker recovery, same message has been received, CAP will consider this as a new message after receiving the Broker message. Message will be executed again by the Consumer. Because it is a new message, CAP cannot be idempotent at this time. The current data storage mode can not be idempotent. Since the table of the CAP message is deleted after 1 hour for the successfully consumed message, if the historical message cannot be idempotent. Historically, if the broker has maintained or manually processed some messages for some reason. Industry practices. Many event-driven frameworks require users to ensure idempotent operations, such as ENode, RocketMQ, etc... From an implementation point of view, CAP can do some less stringent idempotence, but strict idempotent can not be guaranteed.","title":"Why are we not providing(achieving) idempotency ?"},{"location":"user-guide/en/cap/idempotence/#naturally-idempotent-message-processing","text":"Generally, the best way to deal with message redeliveries is to make the processing of each message naturally idempotent. Natural idempotence arises when the processing of a message consists of calling an idempotent method on a domain object, like obj.MarkAsDeleted(); or obj.UpdatePeriod(message.NewPeriod); You can use the INSERT ON DUPLICATE KEY UPDATE provided by the database to easily done.","title":"Naturally idempotent message processing"},{"location":"user-guide/en/cap/idempotence/#explicitly-handling-redeliveries","text":"Another way of making message processing idempotent, is to simply track IDs of processed messages explicitly, and then make your code handle a redelivery. Assuming that you are keeping track of message IDs by using an IMessageTracker that uses the same transactional data store as the rest of your work, your code might look somewhat like this: readonly IMessageTracker _messageTracker ; public SomeMessageHandler ( IMessageTracker messageTracker ) { _messageTracker = messageTracker ; } [CapSubscribe] public async Task Handle ( SomeMessage message ) { if ( await _messageTracker . HasProcessed ( message . Id )) { return ; } // do the work here // ... // remember that this message has been processed await _messageTracker . MarkAsProcessed ( messageId ); } As for the implementation of IMessageTracker , you can use a storage message Id such as Redis or a database and the corresponding processing state. The chapter refers to the Delivery guarantees of rebus, which I think is described very good. \u21a9","title":"Explicitly handling redeliveries"},{"location":"user-guide/en/cap/messaging/","text":"Message \u00b6 The data sent by using the ICapPublisher interface is called Message . Compensating transaction \u00b6 Wiki : Compensating transaction In some cases, consumers need to return the execution value to tell the publisher, so that the publisher can implement some compensation actions, usually we called message compensation. Usually you can notify the upstream by republishing a new message in the consumer code. CAP provides a simple way to do this. You can specify callbackName parameter when publishing message, usually this only applies to point-to-point consumption. The following is an example. For example, in an e-commerce application, the initial status of the order is pending, and the status is marked as succeeded when the product quantity is successfully deducted, otherwise it is failed. // ============= Publisher ================= _capBus . Publish ( \"place.order.qty.deducted\" , contentObj : new { OrderId = 1234 , ProductId = 23255 , Qty = 1 }, callbackName : \"place.order.mark.status\" ); // publisher using `callbackName` to subscribe consumer result [CapSubscribe(\"place.order.mark.status\")] public void MarkOrderStatus ( JsonElement param ) { var orderId = param . GetProperty ( \"OrderId\" ). GetInt32 (); var isSuccess = param . GetProperty ( \"IsSuccess\" ). GetBoolean (); if ( isSuccess ){ // mark order status to succeeded } else { // mark order status to failed } } // ============= Consumer =================== [CapSubscribe(\"place.order.qty.deducted\")] public object DeductProductQty ( JsonElement param ) { var orderId = param . GetProperty ( \"OrderId\" ). GetInt32 (); var productId = param . GetProperty ( \"ProductId\" ). GetInt32 (); var qty = param . GetProperty ( \"Qty\" ). GetInt32 (); //business logic return new { OrderId = orderId , IsSuccess = true }; } Heterogeneous system integration \u00b6 In version 3.0+, we reconstructed the message structure. We used the Header in the message protocol in the message queue to transmit some additional information, so that we can do it in the Body without modifying or packaging the user\u2019s original The message data format and content are sent. This approach is reasonable. It helps to better integrate in heterogeneous systems. Compared with previous versions, users do not need to know the message structure used inside CAP to complete the integration work. Now we divide the message into Header and Body for transmission. The data in the body is the content of the original message sent by the user, that is, the content sent by calling the Publish method. We do not perform any packaging, but send it to the message queue after serialization. In the Header, we need to pass some additional information so that the CAP can extract the key features for operation when the message is received. The following is the content that needs to be written into the header of the message when sending a message in a heterogeneous system: Key DataType Description cap-msg-id string Message Id, Generated by snowflake algorithm, can also be guid cap-msg-name string The name of the message cap-msg-type string The type of message, typeof(T).FullName (not required) cap-senttime string sending time (not required) Custom headers \u00b6 To consume messages sent without CAP headers, both AzureServiceBus, Kafka and RabbitMQ consumers can inject a minimal set of headers using the CustomHeaders property as shown below (RabbitMQ example): container . AddCap ( x => { x . UseRabbitMQ ( z => { z . ExchangeName = \"TestExchange\" ; z . CustomHeaders = e => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( DotNetCore . CAP . Messages . Headers . MessageId , SnowflakeId . Default (). NextId (). ToString ()), new KeyValuePair < string , string >( DotNetCore . CAP . Messages . Headers . MessageName , e . RoutingKey ) }; }); }); After adding cap-msg-id and cap-msg-name , CAP consumers receive messages sent directly from any external system, like the RabbitMQ management tool when using RabbitMQ as a transport. Scheduling \u00b6 After CAP receives a message, it sends the message to Transport(RabitMq, Kafka...), which is transported by transport. When you send message using the ICapPublisher interface, CAP will dispatch message to the corresponding Transport. Currently, bulk messaging is not supported. For more information on transports, see Transports section. Storage \u00b6 CAP will store the message after receiving it. For more information on storage, see the Storage section. Retry \u00b6 Retrying plays an important role in the overall CAP architecture design, CAP retry messages that fail to send or fail to execute. There are several retry strategies used throughout the CAP design process. Send retry \u00b6 During the message sending process, when the broker crashes or the connection fails or an abnormality occurs, CAP will retry the sending. Retry 3 times for the first time, retry every minute after 4 minutes, and +1 retry. When the total number of retries reaches 50,CAP will stop retrying. You can adjust the total number of retries by setting FailedRetryCount in CapOptions. It will stop when the maximum number of times is reached. You can see the reason for the failure in Dashboard and choose whether to manually retry. Consumption retry \u00b6 The consumer method is executed when the Consumer receives the message and will retry when an exception occurs. This retry strategy is the same as the send retry. Data Cleanup \u00b6 There is an ExpiresAt field in the database message table indicating the expiration time of the message. When the message is sent successfully, status will be changed to Successed , and ExpiresAt will be set to 1 day later. Consuming failure will change the message status to Failed and ExpiresAt will be set to 15 days later (You can use FailedMessageExpiredAfter configuration items to custom). By default, the data of the message in the table is deleted every 5 minutes to avoid performance degradation caused by too much data. The cleanup strategy ExpiresAt is performed when field is not empty and is less than the current time. That is to say, the message with the status Failed (by default they have been retried 50 times), if you do not have manual intervention for 15 days, it will also be cleaned up. You can use CollectorCleaningInterval configuration items to custom the interval time.","title":"Messaging"},{"location":"user-guide/en/cap/messaging/#message","text":"The data sent by using the ICapPublisher interface is called Message .","title":"Message"},{"location":"user-guide/en/cap/messaging/#compensating-transaction","text":"Wiki : Compensating transaction In some cases, consumers need to return the execution value to tell the publisher, so that the publisher can implement some compensation actions, usually we called message compensation. Usually you can notify the upstream by republishing a new message in the consumer code. CAP provides a simple way to do this. You can specify callbackName parameter when publishing message, usually this only applies to point-to-point consumption. The following is an example. For example, in an e-commerce application, the initial status of the order is pending, and the status is marked as succeeded when the product quantity is successfully deducted, otherwise it is failed. // ============= Publisher ================= _capBus . Publish ( \"place.order.qty.deducted\" , contentObj : new { OrderId = 1234 , ProductId = 23255 , Qty = 1 }, callbackName : \"place.order.mark.status\" ); // publisher using `callbackName` to subscribe consumer result [CapSubscribe(\"place.order.mark.status\")] public void MarkOrderStatus ( JsonElement param ) { var orderId = param . GetProperty ( \"OrderId\" ). GetInt32 (); var isSuccess = param . GetProperty ( \"IsSuccess\" ). GetBoolean (); if ( isSuccess ){ // mark order status to succeeded } else { // mark order status to failed } } // ============= Consumer =================== [CapSubscribe(\"place.order.qty.deducted\")] public object DeductProductQty ( JsonElement param ) { var orderId = param . GetProperty ( \"OrderId\" ). GetInt32 (); var productId = param . GetProperty ( \"ProductId\" ). GetInt32 (); var qty = param . GetProperty ( \"Qty\" ). GetInt32 (); //business logic return new { OrderId = orderId , IsSuccess = true }; }","title":"Compensating transaction"},{"location":"user-guide/en/cap/messaging/#heterogeneous-system-integration","text":"In version 3.0+, we reconstructed the message structure. We used the Header in the message protocol in the message queue to transmit some additional information, so that we can do it in the Body without modifying or packaging the user\u2019s original The message data format and content are sent. This approach is reasonable. It helps to better integrate in heterogeneous systems. Compared with previous versions, users do not need to know the message structure used inside CAP to complete the integration work. Now we divide the message into Header and Body for transmission. The data in the body is the content of the original message sent by the user, that is, the content sent by calling the Publish method. We do not perform any packaging, but send it to the message queue after serialization. In the Header, we need to pass some additional information so that the CAP can extract the key features for operation when the message is received. The following is the content that needs to be written into the header of the message when sending a message in a heterogeneous system: Key DataType Description cap-msg-id string Message Id, Generated by snowflake algorithm, can also be guid cap-msg-name string The name of the message cap-msg-type string The type of message, typeof(T).FullName (not required) cap-senttime string sending time (not required)","title":"Heterogeneous system integration"},{"location":"user-guide/en/cap/messaging/#custom-headers","text":"To consume messages sent without CAP headers, both AzureServiceBus, Kafka and RabbitMQ consumers can inject a minimal set of headers using the CustomHeaders property as shown below (RabbitMQ example): container . AddCap ( x => { x . UseRabbitMQ ( z => { z . ExchangeName = \"TestExchange\" ; z . CustomHeaders = e => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( DotNetCore . CAP . Messages . Headers . MessageId , SnowflakeId . Default (). NextId (). ToString ()), new KeyValuePair < string , string >( DotNetCore . CAP . Messages . Headers . MessageName , e . RoutingKey ) }; }); }); After adding cap-msg-id and cap-msg-name , CAP consumers receive messages sent directly from any external system, like the RabbitMQ management tool when using RabbitMQ as a transport.","title":"Custom headers"},{"location":"user-guide/en/cap/messaging/#scheduling","text":"After CAP receives a message, it sends the message to Transport(RabitMq, Kafka...), which is transported by transport. When you send message using the ICapPublisher interface, CAP will dispatch message to the corresponding Transport. Currently, bulk messaging is not supported. For more information on transports, see Transports section.","title":"Scheduling"},{"location":"user-guide/en/cap/messaging/#storage","text":"CAP will store the message after receiving it. For more information on storage, see the Storage section.","title":"Storage"},{"location":"user-guide/en/cap/messaging/#retry","text":"Retrying plays an important role in the overall CAP architecture design, CAP retry messages that fail to send or fail to execute. There are several retry strategies used throughout the CAP design process.","title":"Retry"},{"location":"user-guide/en/cap/messaging/#send-retry","text":"During the message sending process, when the broker crashes or the connection fails or an abnormality occurs, CAP will retry the sending. Retry 3 times for the first time, retry every minute after 4 minutes, and +1 retry. When the total number of retries reaches 50,CAP will stop retrying. You can adjust the total number of retries by setting FailedRetryCount in CapOptions. It will stop when the maximum number of times is reached. You can see the reason for the failure in Dashboard and choose whether to manually retry.","title":"Send retry"},{"location":"user-guide/en/cap/messaging/#consumption-retry","text":"The consumer method is executed when the Consumer receives the message and will retry when an exception occurs. This retry strategy is the same as the send retry.","title":"Consumption retry"},{"location":"user-guide/en/cap/messaging/#data-cleanup","text":"There is an ExpiresAt field in the database message table indicating the expiration time of the message. When the message is sent successfully, status will be changed to Successed , and ExpiresAt will be set to 1 day later. Consuming failure will change the message status to Failed and ExpiresAt will be set to 15 days later (You can use FailedMessageExpiredAfter configuration items to custom). By default, the data of the message in the table is deleted every 5 minutes to avoid performance degradation caused by too much data. The cleanup strategy ExpiresAt is performed when field is not empty and is less than the current time. That is to say, the message with the status Failed (by default they have been retried 50 times), if you do not have manual intervention for 15 days, it will also be cleaned up. You can use CollectorCleaningInterval configuration items to custom the interval time.","title":"Data Cleanup"},{"location":"user-guide/en/cap/serialization/","text":"Serialization \u00b6 We provide the ISerializer interface to support serialization of messages. By default, json is used to serialize messages and store them in the database. Custom Serialization \u00b6 public class YourSerializer : ISerializer { Task < TransportMessage > SerializeAsync ( Message message ) { } Task < Message > DeserializeAsync ( TransportMessage transportMessage , Type valueType ) { } } Then register your implemented serializer in the container: services.AddSingleton<ISerializer, YourSerializer>(); // --- services.AddCap Message Adapter (removed in v3.0) \u00b6 In heterogeneous systems, sometimes you need to communicate with other systems, but other systems use message objects that may be different from CAP's Wrapper Object . This time maybe you need to customize the message wapper. CAP provides the IMessagePacker interface for customizing the Wrapper Object . Custom MessagePacker usually packs and unpacks the CapMessage In this process you can add your own business objects. Usage : class MyMessagePacker : IMessagePacker { private readonly IContentSerializer _serializer ; public DefaultMessagePacker ( IContentSerializer serializer ) { _serializer = serializer ; } public string Pack ( CapMessage obj ) { var myStructure = new { Id = obj . Id , Body = obj . Content , Date = obj . Timestamp , Callback = obj . CallbackName }; return _serializer . Serialize ( myStructure ); } public CapMessage UnPack ( string packingMessage ) { var myStructure = _serializer . DeSerialize < MyStructure >( packingMessage ); return new CapMessageDto { Id = myStructure . Id , Timestamp = myStructure . Date , Content = myStructure . Body , CallbackName = myStructure . Callback }; } } Next, add the custom MyMessagePacker to the service. services . AddCap ( x =>{ }). AddMessagePacker < MyMessagePacker >();","title":"Serialization"},{"location":"user-guide/en/cap/serialization/#serialization","text":"We provide the ISerializer interface to support serialization of messages. By default, json is used to serialize messages and store them in the database.","title":"Serialization"},{"location":"user-guide/en/cap/serialization/#custom-serialization","text":"public class YourSerializer : ISerializer { Task < TransportMessage > SerializeAsync ( Message message ) { } Task < Message > DeserializeAsync ( TransportMessage transportMessage , Type valueType ) { } } Then register your implemented serializer in the container: services.AddSingleton<ISerializer, YourSerializer>(); // --- services.AddCap","title":"Custom Serialization"},{"location":"user-guide/en/cap/serialization/#message-adapter-removed-in-v30","text":"In heterogeneous systems, sometimes you need to communicate with other systems, but other systems use message objects that may be different from CAP's Wrapper Object . This time maybe you need to customize the message wapper. CAP provides the IMessagePacker interface for customizing the Wrapper Object . Custom MessagePacker usually packs and unpacks the CapMessage In this process you can add your own business objects. Usage : class MyMessagePacker : IMessagePacker { private readonly IContentSerializer _serializer ; public DefaultMessagePacker ( IContentSerializer serializer ) { _serializer = serializer ; } public string Pack ( CapMessage obj ) { var myStructure = new { Id = obj . Id , Body = obj . Content , Date = obj . Timestamp , Callback = obj . CallbackName }; return _serializer . Serialize ( myStructure ); } public CapMessage UnPack ( string packingMessage ) { var myStructure = _serializer . DeSerialize < MyStructure >( packingMessage ); return new CapMessageDto { Id = myStructure . Id , Timestamp = myStructure . Date , Content = myStructure . Body , CallbackName = myStructure . Callback }; } } Next, add the custom MyMessagePacker to the service. services . AddCap ( x =>{ }). AddMessagePacker < MyMessagePacker >();","title":"Message Adapter (removed in v3.0)"},{"location":"user-guide/en/cap/transactions/","text":"Transaction \u00b6 Distributed transactions? \u00b6 CAP does not directly provide out-of-the-box MS DTC or 2PC-based distributed transactions, instead we provide a solution that can be used to solve problems encountered in distributed transactions. In a distributed environment, using 2PC or DTC-based distributed transactions can be very expensive due to the overhead involved in communication which affects performance. In addition, since distributed transactions based on 2PC or DTC are also subject to the CAP theorem , it will have to give up availability (A in CAP) when network partitioning occurs. A distributed transaction is a very complex process with a lot of moving parts that can fail. Also, if these parts run on different machines or even in different data centers, the process of committing a transaction could become very long and unreliable. This could seriously affect the user experience and overall system bandwidth. So one of the best ways to solve the problem of distributed transactions is to avoid them completely . 1 For the processing of distributed transactions, CAP uses the \"Eventual Consistency and Compensation\" scheme. Eventual Consistency and Compensation 1 \u00b6 By far, one of the most feasible models of handling consistency across microservices is eventual consistency . This model doesn\u2019t enforce distributed ACID transactions across microservices. Instead, it proposes to use some mechanisms of ensuring that the system would be eventually consistent at some point in the future. A Case for Eventual Consistency \u00b6 For example, suppose we need to solve the following task: register a user profile do some automated background check that the user can actually access the system Second task is to ensure, for example, that this user wasn\u2019t banned from our servers for some reason. But it could take time, and we\u2019d like to extract it to a separate microservice. It wouldn\u2019t be reasonable to keep the user waiting for so long just to know that he was registered successfully. One way to solve it would be with a message-driven approach including compensation . Let\u2019s consider the following architecture: the user microservice tasked with registering a user profile the validation microservice tasked with doing a background check the messaging platform that supports persistent queues The messaging platform could ensure that the messages sent by the microservices are persisted. Then they would be delivered at a later time if the receiver wasn't currently available Best case scenario \u00b6 In this architecture, best case scenario would be: the user microservice registers a user, saving information about him in its local database the user microservice marks this user with a flag. It could signify that this user hasn\u2019t yet been validated and doesn\u2019t have access to full system functionality a confirmation of registration is sent to the user with a warning that not all functionality of the system is accessible right away the user microservice sends a message to the validation microservice to do the background check of a user the validation microservice runs the background check and sends a message to the user microservice with the results of the check if the results are positive, the user microservice unblocks the user if the results are negative, the user microservice deletes the user account After we\u2019ve gone through all these steps, the system should be in a consistent state. However, for some period of time, user entity appeared to be in an incomplete state. The last step, when the user microservice removes the invalid account, is a compensation phase. Failure Scenarios \u00b6 Now let\u2019s consider some failure scenarios: if the validation microservice is not accessible, then the messaging platform with its persistent queue functionality ensures that the validation microservice would receive this message at some later time suppose the messaging platform fails, then the user microservice tries to send the message again at some later time, for example, by scheduled batch-processing of all users that were not yet validated if the validation microservice receives the message, validates the user but can\u2019t send the answer back due to the messaging platform failure, the validation microservice also retries sending the message at some later time if one of the messages got lost, or some other failure happened, the user microservice finds all non-validated users by scheduled batch-processing and sends requests for validation again Even if some of the messages were issued multiple times, this wouldn\u2019t affect the consistency of the data in the microservices\u2019 databases. By carefully considering all possible failure scenarios, we can ensure that our system would satisfy the conditions of eventual consistency. At the same time, we wouldn\u2019t need to deal with the costly distributed transactions. But we have to be aware that ensuring eventual consistency is a complex task. It doesn\u2019t have a single solution for all cases. This chapter is quoted from: https://www.baeldung.com/transactions-across-microservices \u21a9 \u21a9","title":"Transactions"},{"location":"user-guide/en/cap/transactions/#transaction","text":"","title":"Transaction"},{"location":"user-guide/en/cap/transactions/#distributed-transactions","text":"CAP does not directly provide out-of-the-box MS DTC or 2PC-based distributed transactions, instead we provide a solution that can be used to solve problems encountered in distributed transactions. In a distributed environment, using 2PC or DTC-based distributed transactions can be very expensive due to the overhead involved in communication which affects performance. In addition, since distributed transactions based on 2PC or DTC are also subject to the CAP theorem , it will have to give up availability (A in CAP) when network partitioning occurs. A distributed transaction is a very complex process with a lot of moving parts that can fail. Also, if these parts run on different machines or even in different data centers, the process of committing a transaction could become very long and unreliable. This could seriously affect the user experience and overall system bandwidth. So one of the best ways to solve the problem of distributed transactions is to avoid them completely . 1 For the processing of distributed transactions, CAP uses the \"Eventual Consistency and Compensation\" scheme.","title":"Distributed transactions?"},{"location":"user-guide/en/cap/transactions/#eventual-consistency-and-compensation-1","text":"By far, one of the most feasible models of handling consistency across microservices is eventual consistency . This model doesn\u2019t enforce distributed ACID transactions across microservices. Instead, it proposes to use some mechanisms of ensuring that the system would be eventually consistent at some point in the future.","title":"Eventual Consistency and Compensation 1"},{"location":"user-guide/en/cap/transactions/#a-case-for-eventual-consistency","text":"For example, suppose we need to solve the following task: register a user profile do some automated background check that the user can actually access the system Second task is to ensure, for example, that this user wasn\u2019t banned from our servers for some reason. But it could take time, and we\u2019d like to extract it to a separate microservice. It wouldn\u2019t be reasonable to keep the user waiting for so long just to know that he was registered successfully. One way to solve it would be with a message-driven approach including compensation . Let\u2019s consider the following architecture: the user microservice tasked with registering a user profile the validation microservice tasked with doing a background check the messaging platform that supports persistent queues The messaging platform could ensure that the messages sent by the microservices are persisted. Then they would be delivered at a later time if the receiver wasn't currently available","title":"A Case for Eventual Consistency"},{"location":"user-guide/en/cap/transactions/#best-case-scenario","text":"In this architecture, best case scenario would be: the user microservice registers a user, saving information about him in its local database the user microservice marks this user with a flag. It could signify that this user hasn\u2019t yet been validated and doesn\u2019t have access to full system functionality a confirmation of registration is sent to the user with a warning that not all functionality of the system is accessible right away the user microservice sends a message to the validation microservice to do the background check of a user the validation microservice runs the background check and sends a message to the user microservice with the results of the check if the results are positive, the user microservice unblocks the user if the results are negative, the user microservice deletes the user account After we\u2019ve gone through all these steps, the system should be in a consistent state. However, for some period of time, user entity appeared to be in an incomplete state. The last step, when the user microservice removes the invalid account, is a compensation phase.","title":"Best case scenario"},{"location":"user-guide/en/cap/transactions/#failure-scenarios","text":"Now let\u2019s consider some failure scenarios: if the validation microservice is not accessible, then the messaging platform with its persistent queue functionality ensures that the validation microservice would receive this message at some later time suppose the messaging platform fails, then the user microservice tries to send the message again at some later time, for example, by scheduled batch-processing of all users that were not yet validated if the validation microservice receives the message, validates the user but can\u2019t send the answer back due to the messaging platform failure, the validation microservice also retries sending the message at some later time if one of the messages got lost, or some other failure happened, the user microservice finds all non-validated users by scheduled batch-processing and sends requests for validation again Even if some of the messages were issued multiple times, this wouldn\u2019t affect the consistency of the data in the microservices\u2019 databases. By carefully considering all possible failure scenarios, we can ensure that our system would satisfy the conditions of eventual consistency. At the same time, we wouldn\u2019t need to deal with the costly distributed transactions. But we have to be aware that ensuring eventual consistency is a complex task. It doesn\u2019t have a single solution for all cases. This chapter is quoted from: https://www.baeldung.com/transactions-across-microservices \u21a9 \u21a9","title":"Failure Scenarios"},{"location":"user-guide/en/getting-started/contributing/","text":"Contribution \u00b6 One of the easiest ways to contribute is to participate in discussions and discuss issues. If you have any question or problems, please report them on the CAP repository: Report Issue Active Issues Submitting Changes \u00b6 You can also contribute by submitting pull requests with code changes. Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before the changes are merged into the repository. Additional Resources \u00b6 Filtering issues and pull requests Using search to filter issues and pull requests","title":"Contributing"},{"location":"user-guide/en/getting-started/contributing/#contribution","text":"One of the easiest ways to contribute is to participate in discussions and discuss issues. If you have any question or problems, please report them on the CAP repository: Report Issue Active Issues","title":"Contribution"},{"location":"user-guide/en/getting-started/contributing/#submitting-changes","text":"You can also contribute by submitting pull requests with code changes. Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before the changes are merged into the repository.","title":"Submitting Changes"},{"location":"user-guide/en/getting-started/contributing/#additional-resources","text":"Filtering issues and pull requests Using search to filter issues and pull requests","title":"Additional Resources"},{"location":"user-guide/en/getting-started/introduction/","text":"Introduction \u00b6 CAP is an EventBus and a solution for solving distributed transaction problems in microservices or SOA systems. It helps create a microservices system that is scalable, reliable, and easy to change. In Microsoft's eShopOnContainer microservices sample project, it is recommended to use CAP as the EventBus in the production environment. What is EventBus\uff1f An Eventbus is a mechanism that allows different components to communicate with each other without knowing about each other. A component can send an Event to the Eventbus without knowing who will pick it up or how many others will pick it up. Components can also listen to Events on an Eventbus, without knowing who sent the Events. That way, components can communicate without depending on each other. Also, it is very easy to substitute a component. As long as the new component understands events that are being sent and received, other components will never know about the substitution. Compared to other Services Bus or Event Bus, CAP has its own characteristics. It does not require users to implement or inherit any interface when sending messages or processing messages. It has very high flexibility. We have always believed that the appointment is greater than the configuration, so the CAP is very simple to use, very friendly to the novice, and lightweight. CAP is modular in design and highly scalable. You have many options to choose from, including message queues, storage, serialization, etc. Many elements of the system can be replaced with custom implementations. Related videos \u00b6 Video: bilibili Tutorial Video: Youtube Tutorial Video: Tencent Tutorial Related articles \u00b6 Article: Introduction and how to use Article: New features in version 5.0 Article: New features in version 3.0 Article: New features in version 2.6 Article: New features in version 2.5 Article: New features in version 2.4 Article: New features in version 2.3 Article: .NET Core Community The first thousand-star project was born: CAP","title":"Introduction"},{"location":"user-guide/en/getting-started/introduction/#introduction","text":"CAP is an EventBus and a solution for solving distributed transaction problems in microservices or SOA systems. It helps create a microservices system that is scalable, reliable, and easy to change. In Microsoft's eShopOnContainer microservices sample project, it is recommended to use CAP as the EventBus in the production environment. What is EventBus\uff1f An Eventbus is a mechanism that allows different components to communicate with each other without knowing about each other. A component can send an Event to the Eventbus without knowing who will pick it up or how many others will pick it up. Components can also listen to Events on an Eventbus, without knowing who sent the Events. That way, components can communicate without depending on each other. Also, it is very easy to substitute a component. As long as the new component understands events that are being sent and received, other components will never know about the substitution. Compared to other Services Bus or Event Bus, CAP has its own characteristics. It does not require users to implement or inherit any interface when sending messages or processing messages. It has very high flexibility. We have always believed that the appointment is greater than the configuration, so the CAP is very simple to use, very friendly to the novice, and lightweight. CAP is modular in design and highly scalable. You have many options to choose from, including message queues, storage, serialization, etc. Many elements of the system can be replaced with custom implementations.","title":"Introduction"},{"location":"user-guide/en/getting-started/introduction/#related-videos","text":"Video: bilibili Tutorial Video: Youtube Tutorial Video: Tencent Tutorial","title":"Related videos"},{"location":"user-guide/en/getting-started/introduction/#related-articles","text":"Article: Introduction and how to use Article: New features in version 5.0 Article: New features in version 3.0 Article: New features in version 2.6 Article: New features in version 2.5 Article: New features in version 2.4 Article: New features in version 2.3 Article: .NET Core Community The first thousand-star project was born: CAP","title":"Related articles"},{"location":"user-guide/en/getting-started/quick-start/","text":"Quick Start \u00b6 Learn how to build a microservices event bus architecture using CAP, which offers advantages over direct integration of message queues, and what out-of-the-box features it provides. Installation \u00b6 PM > Install-Package DotNetCore . CAP Integrated in Asp.Net Core \u00b6 For quick start, we use memory-based event storage and message transport. PM > Install-Package DotNetCore . CAP . InMemoryStorage PM > Install-Package Savorboard . CAP . InMemoryMessageQueue In Startup.cs \uff0cadd the following configuration: public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x => { x . UseInMemoryStorage (); x . UseInMemoryMessageQueue (); }); } Publish Message \u00b6 public class PublishController : Controller { [Route(\"~/send\")] public IActionResult SendMessage ([ FromServices ] ICapPublisher capBus ) { capBus . Publish ( \"test.show.time\" , DateTime . Now ); return Ok (); } } Publish delay message \u00b6 public class PublishController : Controller { [Route(\"~/send/delay\")] public IActionResult SendDelayMessage ([ FromServices ] ICapPublisher capBus ) { capBus . PublishDelay ( TimeSpan . FromSeconds ( 100 ), \"test.show.time\" , DateTime . Now ); return Ok (); } } Publish with extra header \u00b6 var header = new Dictionary < string , string >() { [\"my.header.first\"] = \"first\" , [\"my.header.second\"] = \"second\" }; capBus . Publish ( \"test.show.time\" , DateTime . Now , header ); Process Message \u00b6 public class ConsumerController : Controller { [NonAction] [CapSubscribe(\"test.show.time\")] public void ReceiveMessage ( DateTime time ) { Console . WriteLine ( \"message time is:\" + time ); } } Process with extra header \u00b6 [CapSubscribe(\"test.show.time\")] public void ReceiveMessage ( DateTime time , [ FromCap ] CapHeader header ) { Console . WriteLine ( \"message time is:\" + time ); Console . WriteLine ( \"message firset header :\" + header [ \"my.header.first\" ]); Console . WriteLine ( \"message second header :\" + header [ \"my.header.second\" ]); } Summary \u00b6 One of the most powerful advantages of asynchronous messaging over direct integrated message queues is reliability, where failures in one part of the system do not propagate or cause the entire system to crash. Messages are stored inside the CAP to ensure the reliability of the message, and strategies such as retry are used to achieve the final consistency of data between services.","title":"Quick Start"},{"location":"user-guide/en/getting-started/quick-start/#quick-start","text":"Learn how to build a microservices event bus architecture using CAP, which offers advantages over direct integration of message queues, and what out-of-the-box features it provides.","title":"Quick Start"},{"location":"user-guide/en/getting-started/quick-start/#installation","text":"PM > Install-Package DotNetCore . CAP","title":"Installation"},{"location":"user-guide/en/getting-started/quick-start/#integrated-in-aspnet-core","text":"For quick start, we use memory-based event storage and message transport. PM > Install-Package DotNetCore . CAP . InMemoryStorage PM > Install-Package Savorboard . CAP . InMemoryMessageQueue In Startup.cs \uff0cadd the following configuration: public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x => { x . UseInMemoryStorage (); x . UseInMemoryMessageQueue (); }); }","title":"Integrated in Asp.Net Core"},{"location":"user-guide/en/getting-started/quick-start/#publish-message","text":"public class PublishController : Controller { [Route(\"~/send\")] public IActionResult SendMessage ([ FromServices ] ICapPublisher capBus ) { capBus . Publish ( \"test.show.time\" , DateTime . Now ); return Ok (); } }","title":"Publish Message"},{"location":"user-guide/en/getting-started/quick-start/#publish-delay-message","text":"public class PublishController : Controller { [Route(\"~/send/delay\")] public IActionResult SendDelayMessage ([ FromServices ] ICapPublisher capBus ) { capBus . PublishDelay ( TimeSpan . FromSeconds ( 100 ), \"test.show.time\" , DateTime . Now ); return Ok (); } }","title":"Publish delay message"},{"location":"user-guide/en/getting-started/quick-start/#publish-with-extra-header","text":"var header = new Dictionary < string , string >() { [\"my.header.first\"] = \"first\" , [\"my.header.second\"] = \"second\" }; capBus . Publish ( \"test.show.time\" , DateTime . Now , header );","title":"Publish with extra header"},{"location":"user-guide/en/getting-started/quick-start/#process-message","text":"public class ConsumerController : Controller { [NonAction] [CapSubscribe(\"test.show.time\")] public void ReceiveMessage ( DateTime time ) { Console . WriteLine ( \"message time is:\" + time ); } }","title":"Process Message"},{"location":"user-guide/en/getting-started/quick-start/#process-with-extra-header","text":"[CapSubscribe(\"test.show.time\")] public void ReceiveMessage ( DateTime time , [ FromCap ] CapHeader header ) { Console . WriteLine ( \"message time is:\" + time ); Console . WriteLine ( \"message firset header :\" + header [ \"my.header.first\" ]); Console . WriteLine ( \"message second header :\" + header [ \"my.header.second\" ]); }","title":"Process with extra header"},{"location":"user-guide/en/getting-started/quick-start/#summary","text":"One of the most powerful advantages of asynchronous messaging over direct integrated message queues is reliability, where failures in one part of the system do not propagate or cause the entire system to crash. Messages are stored inside the CAP to ensure the reliability of the message, and strategies such as retry are used to achieve the final consistency of data between services.","title":"Summary"},{"location":"user-guide/en/monitoring/consul/","text":"Consul \u00b6 Consul is a distributed service mesh to connect, secure, and configure services across any runtime platform and public or private cloud. Consul Configuration for dashboard \u00b6 CAP's Dashboard uses Consul as a service discovery to get the data of other nodes, and you can switch to the Servers page to see other nodes. Click the Switch button to switch to the target node, CAP will use a proxy to get the data of the node you switched to. The following is a configuration example, you need to configure them on each node. services . AddCap ( x => { x . UseMySql ( Configuration . GetValue < string >( \"ConnectionString\" )); x . UseRabbitMQ ( \"localhost\" ); x . UseDashboard (); x . UseDiscovery ( _ => { _ . DiscoveryServerHostName = \"localhost\" ; _ . DiscoveryServerPort = 8500 ; _ . CurrentNodeHostName = Configuration . GetValue < string >( \"ASPNETCORE_HOSTNAME\" ); _ . CurrentNodePort = Configuration . GetValue < int >( \"ASPNETCORE_PORT\" ); _ . NodeId = Configuration . GetValue < string >( \"NodeId\" ); _ . NodeName = Configuration . GetValue < string >( \"NodeName\" ); }); }); Consul 1.6.2: consul agent -dev Windows 10, ASP.NET Core 3.1: set ASPNETCORE_HOSTNAME = localhost && set ASPNETCORE_PORT = 5001 && dotnet run --urls = http://localhost:5001 NodeId = 1 NodeName = CAP-1 ConnectionString = \"Server=localhost;Database=aaa;UserId=xxx;Password=xxx;\" set ASPNETCORE_HOSTNAME = localhost && set ASPNETCORE_PORT = 5002 && dotnet run --urls = http://localhost:5002 NodeId = 2 NodeName = CAP-2 ConnectionString = \"Server=localhost;Database=bbb;UserId=xxx;Password=xxx;\"","title":"Consul"},{"location":"user-guide/en/monitoring/consul/#consul","text":"Consul is a distributed service mesh to connect, secure, and configure services across any runtime platform and public or private cloud.","title":"Consul"},{"location":"user-guide/en/monitoring/consul/#consul-configuration-for-dashboard","text":"CAP's Dashboard uses Consul as a service discovery to get the data of other nodes, and you can switch to the Servers page to see other nodes. Click the Switch button to switch to the target node, CAP will use a proxy to get the data of the node you switched to. The following is a configuration example, you need to configure them on each node. services . AddCap ( x => { x . UseMySql ( Configuration . GetValue < string >( \"ConnectionString\" )); x . UseRabbitMQ ( \"localhost\" ); x . UseDashboard (); x . UseDiscovery ( _ => { _ . DiscoveryServerHostName = \"localhost\" ; _ . DiscoveryServerPort = 8500 ; _ . CurrentNodeHostName = Configuration . GetValue < string >( \"ASPNETCORE_HOSTNAME\" ); _ . CurrentNodePort = Configuration . GetValue < int >( \"ASPNETCORE_PORT\" ); _ . NodeId = Configuration . GetValue < string >( \"NodeId\" ); _ . NodeName = Configuration . GetValue < string >( \"NodeName\" ); }); }); Consul 1.6.2: consul agent -dev Windows 10, ASP.NET Core 3.1: set ASPNETCORE_HOSTNAME = localhost && set ASPNETCORE_PORT = 5001 && dotnet run --urls = http://localhost:5001 NodeId = 1 NodeName = CAP-1 ConnectionString = \"Server=localhost;Database=aaa;UserId=xxx;Password=xxx;\" set ASPNETCORE_HOSTNAME = localhost && set ASPNETCORE_PORT = 5002 && dotnet run --urls = http://localhost:5002 NodeId = 2 NodeName = CAP-2 ConnectionString = \"Server=localhost;Database=bbb;UserId=xxx;Password=xxx;\"","title":"Consul Configuration for dashboard"},{"location":"user-guide/en/monitoring/dashboard/","text":"Dashboard \u00b6 CAP provides a Dashboard for viewing messages, and features provided by Dashboard make it easy to view and manage messages. Enable Dashboard \u00b6 By default, Dashboard middleware will not be launched. To enable Dashboard functionality you need to add the following code to your configuration: services . AddCap ( x => { //... // Register Dashboard x . UseDashboard (); }); By default, you can open the Dashboard by visiting the url http://localhost:xxx/cap . Dashboard Configuration \u00b6 PathMatch Default \uff1a'/cap' You can change the path of the Dashboard by modifying this configuration option. StatsPollingInterval Default: 2000ms This configuration option is used to configure the Dashboard front end to get the polling time of the status interface (/stats). UseAuth Default\uff1afalse Enable authentication on dashboard request. DefaultAuthenticationScheme Default scheme used for authentication. If no scheme is set, the DefaultScheme set up in AddAuthentication will be used. UseChallengeOnAuth Default\uff1afalse Enable authentication challenge on dashboard request. DefaultChallengeScheme Default scheme used for authentication challenge. If no scheme is set, the DefaultChallengeScheme set up in AddAuthentication will be used. Custom authentication \u00b6 From version 5.1.0, Dashboard authorization uses ASP.NET Core style by default and no longer provides custom authorization filters. During Dashabord authentication, the value will be taken from HttpContext.User?.Identity?.IsAuthenticated . If it is not available, the authentication will fail and the DefaultChallengeScheme will be called (if configured). You can view the usage details in the sample project Sample.Dashboard.Auth . services . AddAuthorization () . AddAuthentication ( options => { options . DefaultScheme = CookieAuthenticationDefaults . AuthenticationScheme ; options . DefaultChallengeScheme = OpenIdConnectDefaults . AuthenticationScheme ; }) . AddCookie () . AddOpenIdConnect ( options => { options . Authority = \"https://demo.identityserver.io/\" ; options . ClientId = \"interactive.confidential\" ; options . ClientSecret = \"secret\" ; options . ResponseType = \"code\" ; options . UsePkce = true ; options . Scope . Clear (); options . Scope . Add ( \"openid\" ); options . Scope . Add ( \"profile\" ); }) configuration: services . AddCap ( cap => { cap . UseDashboard ( d => { d . UseChallengeOnAuth = true ; d . DefaultChallengeScheme = OpenIdConnectDefaults . AuthenticationScheme ; }); }","title":"Dashboard"},{"location":"user-guide/en/monitoring/dashboard/#dashboard","text":"CAP provides a Dashboard for viewing messages, and features provided by Dashboard make it easy to view and manage messages.","title":"Dashboard"},{"location":"user-guide/en/monitoring/dashboard/#enable-dashboard","text":"By default, Dashboard middleware will not be launched. To enable Dashboard functionality you need to add the following code to your configuration: services . AddCap ( x => { //... // Register Dashboard x . UseDashboard (); }); By default, you can open the Dashboard by visiting the url http://localhost:xxx/cap .","title":"Enable Dashboard"},{"location":"user-guide/en/monitoring/dashboard/#dashboard-configuration","text":"PathMatch Default \uff1a'/cap' You can change the path of the Dashboard by modifying this configuration option. StatsPollingInterval Default: 2000ms This configuration option is used to configure the Dashboard front end to get the polling time of the status interface (/stats). UseAuth Default\uff1afalse Enable authentication on dashboard request. DefaultAuthenticationScheme Default scheme used for authentication. If no scheme is set, the DefaultScheme set up in AddAuthentication will be used. UseChallengeOnAuth Default\uff1afalse Enable authentication challenge on dashboard request. DefaultChallengeScheme Default scheme used for authentication challenge. If no scheme is set, the DefaultChallengeScheme set up in AddAuthentication will be used.","title":"Dashboard Configuration"},{"location":"user-guide/en/monitoring/dashboard/#custom-authentication","text":"From version 5.1.0, Dashboard authorization uses ASP.NET Core style by default and no longer provides custom authorization filters. During Dashabord authentication, the value will be taken from HttpContext.User?.Identity?.IsAuthenticated . If it is not available, the authentication will fail and the DefaultChallengeScheme will be called (if configured). You can view the usage details in the sample project Sample.Dashboard.Auth . services . AddAuthorization () . AddAuthentication ( options => { options . DefaultScheme = CookieAuthenticationDefaults . AuthenticationScheme ; options . DefaultChallengeScheme = OpenIdConnectDefaults . AuthenticationScheme ; }) . AddCookie () . AddOpenIdConnect ( options => { options . Authority = \"https://demo.identityserver.io/\" ; options . ClientId = \"interactive.confidential\" ; options . ClientSecret = \"secret\" ; options . ResponseType = \"code\" ; options . UsePkce = true ; options . Scope . Clear (); options . Scope . Add ( \"openid\" ); options . Scope . Add ( \"profile\" ); }) configuration: services . AddCap ( cap => { cap . UseDashboard ( d => { d . UseChallengeOnAuth = true ; d . DefaultChallengeScheme = OpenIdConnectDefaults . AuthenticationScheme ; }); }","title":"Custom authentication"},{"location":"user-guide/en/monitoring/diagnostics/","text":"Diagnostics \u00b6 Diagnostics provides a set of features that make it easy for us to document critical operations that occurs during the application's operation, their execution time, etc., allowing administrators to find the root cause of problems, especially in production environments. Tracing \u00b6 The CAP provides support for DiagnosticSource with a listener name of CapDiagnosticListener . Diagnostics provides tracing event information as follows: Before the message is persisted After the message is persisted Message persistence exception Before the message is sent to MQ After the message is sent to MQ The message sends an exception to MQ. Messages saved from MQ consumption before saving After the message is saved from MQ consumption Before the subscriber method is executed After the subscriber method is executed Subscriber method execution exception Related objects, you can find at the DotNetCore.CAP.Diagnostics namespace. Tracing with Apache Skywalking \u00b6 Skywalking's C# client provides support for CAP Diagnostics. You can use SkyAPM-dotnet to tracking. Try to read the README to integrate it in your project. Example tracking image : Others APM support \u00b6 There is currently no support for APMs other than Skywalking, and if you would like to support CAP diagnostic events in other APM, you can refer to the code here to implement it: At present, apart from Skywalking, we have not provided support for other APMs. If you need it, you can refer the code here to implementation, and we also welcome the Pull Request. https://github.com/SkyAPM/SkyAPM-dotnet/tree/master/src/SkyApm.Diagnostics.CAP Metrics \u00b6 Metrics are numerical measurements reported over time, most often used to monitor the health of an application and generate alerts. For example, a web service might track how many requests it receives each second, how many milliseconds it took to respond, and how many of the responses sent an error back to the user. CAP 7.0 is support for EventSource , and the counters name is DotNetCore.CAP.EventCounter . CAP provides the following metrics: Publish rate pre seconds Consume rate pre seconds Invoke Subscriber rate pre seconds Subscriber elpased time mean pre seconds Monitor with dotnet-counters \u00b6 dotnet-counters is a performance monitoring tool for ad-hoc health monitoring and first-level performance investigation. It can observe performance counter values that are published via the EventCounter API or the Meter API. Use the following commands to monitor metrics in CAP: dotnet-counters ps dotnet-counters monitor --process-id=25496 --counters=DotNetCore.CAP.EventCounter process-id\uff1a The ID of the CAP process to collect counter data from. Monitor with dashboard \u00b6 You can configure x.UserDashboard() to open the dashboard to view Metrics graph charts. In the Realtime Metric Graph, the time axis will scroll in real time over time so that you can see the rate of publishing and consuming messages per second, And the consumer execution time is \"dotted\" on the Y1 axis (Y0 axis is the rates, and the Y1 axis is the execution elpsed time).","title":"Diagnostics"},{"location":"user-guide/en/monitoring/diagnostics/#diagnostics","text":"Diagnostics provides a set of features that make it easy for us to document critical operations that occurs during the application's operation, their execution time, etc., allowing administrators to find the root cause of problems, especially in production environments.","title":"Diagnostics"},{"location":"user-guide/en/monitoring/diagnostics/#tracing","text":"The CAP provides support for DiagnosticSource with a listener name of CapDiagnosticListener . Diagnostics provides tracing event information as follows: Before the message is persisted After the message is persisted Message persistence exception Before the message is sent to MQ After the message is sent to MQ The message sends an exception to MQ. Messages saved from MQ consumption before saving After the message is saved from MQ consumption Before the subscriber method is executed After the subscriber method is executed Subscriber method execution exception Related objects, you can find at the DotNetCore.CAP.Diagnostics namespace.","title":"Tracing"},{"location":"user-guide/en/monitoring/diagnostics/#tracing-with-apache-skywalking","text":"Skywalking's C# client provides support for CAP Diagnostics. You can use SkyAPM-dotnet to tracking. Try to read the README to integrate it in your project. Example tracking image :","title":"Tracing with Apache Skywalking"},{"location":"user-guide/en/monitoring/diagnostics/#others-apm-support","text":"There is currently no support for APMs other than Skywalking, and if you would like to support CAP diagnostic events in other APM, you can refer to the code here to implement it: At present, apart from Skywalking, we have not provided support for other APMs. If you need it, you can refer the code here to implementation, and we also welcome the Pull Request. https://github.com/SkyAPM/SkyAPM-dotnet/tree/master/src/SkyApm.Diagnostics.CAP","title":"Others APM support"},{"location":"user-guide/en/monitoring/diagnostics/#metrics","text":"Metrics are numerical measurements reported over time, most often used to monitor the health of an application and generate alerts. For example, a web service might track how many requests it receives each second, how many milliseconds it took to respond, and how many of the responses sent an error back to the user. CAP 7.0 is support for EventSource , and the counters name is DotNetCore.CAP.EventCounter . CAP provides the following metrics: Publish rate pre seconds Consume rate pre seconds Invoke Subscriber rate pre seconds Subscriber elpased time mean pre seconds","title":"Metrics"},{"location":"user-guide/en/monitoring/diagnostics/#monitor-with-dotnet-counters","text":"dotnet-counters is a performance monitoring tool for ad-hoc health monitoring and first-level performance investigation. It can observe performance counter values that are published via the EventCounter API or the Meter API. Use the following commands to monitor metrics in CAP: dotnet-counters ps dotnet-counters monitor --process-id=25496 --counters=DotNetCore.CAP.EventCounter process-id\uff1a The ID of the CAP process to collect counter data from.","title":"Monitor with dotnet-counters"},{"location":"user-guide/en/monitoring/diagnostics/#monitor-with-dashboard","text":"You can configure x.UserDashboard() to open the dashboard to view Metrics graph charts. In the Realtime Metric Graph, the time axis will scroll in real time over time so that you can see the rate of publishing and consuming messages per second, And the consumer execution time is \"dotted\" on the Y1 axis (Y0 axis is the rates, and the Y1 axis is the execution elpsed time).","title":"Monitor with dashboard"},{"location":"user-guide/en/monitoring/opentelemetry/","text":"OpenTelemetry \u00b6 https://opentelemetry.io/ OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) to help you analyze your software\u2019s performance and behavior. Integration \u00b6 You can find it here about how to use OpenTelemetry in console applications or ASP.NET Core, at here we mainly describe how to tracing CAP data to OpenTelemetry. Configuration \u00b6 Install the CAP OpenTelemetry package into the project. dotnet add package DotNetCore . Cap . OpenTelemetry The OpenTelemetry data comes from diagnostics , add the instrumentation of CAP to the configuration of OpenTelemetry. services . AddOpenTelemetryTracing (( builder ) => builder . AddAspNetCoreInstrumentation () . AddCapInstrumentation () // <-- Add this line . AddZipkinExporter () ); Here is a diagram of CAP's tracking data in Zipkin:","title":"OpenTelemetry"},{"location":"user-guide/en/monitoring/opentelemetry/#opentelemetry","text":"https://opentelemetry.io/ OpenTelemetry is a collection of tools, APIs, and SDKs. Use it to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) to help you analyze your software\u2019s performance and behavior.","title":"OpenTelemetry"},{"location":"user-guide/en/monitoring/opentelemetry/#integration","text":"You can find it here about how to use OpenTelemetry in console applications or ASP.NET Core, at here we mainly describe how to tracing CAP data to OpenTelemetry.","title":"Integration"},{"location":"user-guide/en/monitoring/opentelemetry/#configuration","text":"Install the CAP OpenTelemetry package into the project. dotnet add package DotNetCore . Cap . OpenTelemetry The OpenTelemetry data comes from diagnostics , add the instrumentation of CAP to the configuration of OpenTelemetry. services . AddOpenTelemetryTracing (( builder ) => builder . AddAspNetCoreInstrumentation () . AddCapInstrumentation () // <-- Add this line . AddZipkinExporter () ); Here is a diagram of CAP's tracking data in Zipkin:","title":"Configuration"},{"location":"user-guide/en/samples/eshoponcontainers/","text":"eShopOnContainers \u00b6 eShopOnContainers is a sample application written in C# running on .NET Core using a microservice architecture, Domain Driven Design. .NET Core reference application, powered by Microsoft, based on a simplified microservices architecture and Docker containers. This reference application is cross-platform at the server and client side, thanks to .NET Core services capable of running on Linux or Windows containers depending on your Docker host, and to Xamarin for mobile apps running on Android, iOS or Windows/UWP plus any browser for the client web apps. The architecture proposes a microservice oriented architecture implementation with multiple autonomous microservices (each one owning its own data/db) and implementing different approaches within each microservice (simple CRUD vs. DDD/CQRS patterns) using Http as the communication protocol between the client apps and the microservices and supports asynchronous communication for data updates propagation across multiple services based on Integration Events and an Event Bus (a light message broker, to choose between RabbitMQ or Azure Service Bus, underneath) plus other features defined at the roadmap. eShopOnContainers with CAP \u00b6 You can see how to use caps in eShopOnContainers at the Github repository. https://github.com/yang-xiaodong/eShopOnContainers","title":"eShopOnContainers"},{"location":"user-guide/en/samples/eshoponcontainers/#eshoponcontainers","text":"eShopOnContainers is a sample application written in C# running on .NET Core using a microservice architecture, Domain Driven Design. .NET Core reference application, powered by Microsoft, based on a simplified microservices architecture and Docker containers. This reference application is cross-platform at the server and client side, thanks to .NET Core services capable of running on Linux or Windows containers depending on your Docker host, and to Xamarin for mobile apps running on Android, iOS or Windows/UWP plus any browser for the client web apps. The architecture proposes a microservice oriented architecture implementation with multiple autonomous microservices (each one owning its own data/db) and implementing different approaches within each microservice (simple CRUD vs. DDD/CQRS patterns) using Http as the communication protocol between the client apps and the microservices and supports asynchronous communication for data updates propagation across multiple services based on Integration Events and an Event Bus (a light message broker, to choose between RabbitMQ or Azure Service Bus, underneath) plus other features defined at the roadmap.","title":"eShopOnContainers"},{"location":"user-guide/en/samples/eshoponcontainers/#eshoponcontainers-with-cap","text":"You can see how to use caps in eShopOnContainers at the Github repository. https://github.com/yang-xiaodong/eShopOnContainers","title":"eShopOnContainers with CAP"},{"location":"user-guide/en/samples/faq/","text":"FAQ \u00b6 Any IM group(e.g Tencent QQ group) to learn and chat about CAP? None of that. Better than wasting much time in IM group, I hope developers could be capable of independent thinking more, and solve problems yourselves with referenced documents, even create issues or send emails when errors are remaining present. Does it require different databases, one each for producer and consumer in CAP? No difference necessary, a recommendation is to use a dedicated database for each program. Otherwise, look at Q&A below. How to use the same database for different applications? Define a table prefix name in ConfigureServices method. Code example\uff1a public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x => { x . UseKafka ( \"\" ); x . UseMySql ( opt => { opt . ConnectionString = \"connection string\" ; opt . TableNamePrefix = \"appone\" ; // different table name prefix here }); }); } Can CAP not use the database as event storage? I just want to send the message Not yet. The purpose of CAP is that ensure consistency principle right in microservice or SOA architectures. The solution is based on ACID features of database, there is no sense about a single client wapper of message queue without database. If the consumer is abnormal, can I roll back the database executed sql that the producer has executed? Can't roll back, CAP is the ultimate consistency solution. You can imagine your scenario is to call a third party payment. If you are doing a third-party payment operation, after calling Alipay's interface successfully, and your own code is wrong, will Alipay roll back? If you don't roll back, what should you do? The same is true here.","title":"FAQ"},{"location":"user-guide/en/samples/faq/#faq","text":"Any IM group(e.g Tencent QQ group) to learn and chat about CAP? None of that. Better than wasting much time in IM group, I hope developers could be capable of independent thinking more, and solve problems yourselves with referenced documents, even create issues or send emails when errors are remaining present. Does it require different databases, one each for producer and consumer in CAP? No difference necessary, a recommendation is to use a dedicated database for each program. Otherwise, look at Q&A below. How to use the same database for different applications? Define a table prefix name in ConfigureServices method. Code example\uff1a public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x => { x . UseKafka ( \"\" ); x . UseMySql ( opt => { opt . ConnectionString = \"connection string\" ; opt . TableNamePrefix = \"appone\" ; // different table name prefix here }); }); } Can CAP not use the database as event storage? I just want to send the message Not yet. The purpose of CAP is that ensure consistency principle right in microservice or SOA architectures. The solution is based on ACID features of database, there is no sense about a single client wapper of message queue without database. If the consumer is abnormal, can I roll back the database executed sql that the producer has executed? Can't roll back, CAP is the ultimate consistency solution. You can imagine your scenario is to call a third party payment. If you are doing a third-party payment operation, after calling Alipay's interface successfully, and your own code is wrong, will Alipay roll back? If you don't roll back, what should you do? The same is true here.","title":"FAQ"},{"location":"user-guide/en/samples/github/","text":"Github Samples \u00b6 You can find the sample code at the Github repository: https://github.com/dotnetcore/CAP/tree/master/samples","title":"Github"},{"location":"user-guide/en/samples/github/#github-samples","text":"You can find the sample code at the Github repository: https://github.com/dotnetcore/CAP/tree/master/samples","title":"Github Samples"},{"location":"user-guide/en/storage/general/","text":"General \u00b6 CAP needs to use storage media with persistence capabilities to store event messages in databases or other NoSql facilities. CAP uses this approach to deal with loss of messages in all environments or network anomalies. Reliability of messages is the cornerstone of distributed transactions, so messages cannot be lost under any circumstances. Persistence \u00b6 Before sent \u00b6 Before message enters the message queue, CAP uses the local database table to persist the message, which ensures that the message is not lost when the message queue is abnormal or a network error occurs. To ensure the reliability of this mechanism, CAP uses the same database transactions as the business code to ensure that business operations and CAP messages are consistent in the persistence process. That is to say, in the process of message persistence, the database will be rolled back when any one of the exceptions occurs. After sent \u00b6 After the message enters the message queue, CAP will start the persistence function of the message queue. We need to explain how CAP message is persisted in RabbitMQ and Kafka. For message persistence in RabbitMQ, CAP uses a consumer queue with message persistence, but there may be exceptions here. Ready for production? By default, queues registered by CAP in RabbitMQ are persistent. When used in a production environment, we recommend that you start all consumers once to create the queues with persistence, which ensures that all queues are created before the message is sent. Since Kafka is born with message persistence using files, Kafka will ensure that messages are properly persisted without loss after the message enters Kafka. Storage \u00b6 Supported storages \u00b6 CAP supports the following types of transaction-enabled databases for storage: SQL Server MySQL PostgreSql MongoDB In-Memory Storage After CAP is started, two tables are generated in used storage, by default the name is Cap.Published and Cap.Received . Storage Data Structure \u00b6 Table structure of Published : NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string Table structure of Received : NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Group Group Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string Wapper Object \u00b6 When CAP sends a message, it will store original message object in a second package in the Content field. The following is the Wapper Object data structure of Content field. NAME DESCRIPTION TYPE Id Message Id string Timestamp Message created time string Content Message content string CallbackName Consumer callback topic name string The Id field is generate using the mongo objectid algorithm . Community-supported extensions \u00b6 Thanks to the community for supporting CAP, the following is the implementation of community-supported storage SQLite ( @colinin ) \uff1a https://github.com/colinin/DotNetCore.CAP.Sqlite LiteDB ( @maikebing ) \uff1a https://github.com/maikebing/CAP.Extensions SQLite & Oracle ( @cocosip ) \uff1a https://github.com/cocosip/CAP-Extensions","title":"General"},{"location":"user-guide/en/storage/general/#general","text":"CAP needs to use storage media with persistence capabilities to store event messages in databases or other NoSql facilities. CAP uses this approach to deal with loss of messages in all environments or network anomalies. Reliability of messages is the cornerstone of distributed transactions, so messages cannot be lost under any circumstances.","title":"General"},{"location":"user-guide/en/storage/general/#persistence","text":"","title":"Persistence"},{"location":"user-guide/en/storage/general/#before-sent","text":"Before message enters the message queue, CAP uses the local database table to persist the message, which ensures that the message is not lost when the message queue is abnormal or a network error occurs. To ensure the reliability of this mechanism, CAP uses the same database transactions as the business code to ensure that business operations and CAP messages are consistent in the persistence process. That is to say, in the process of message persistence, the database will be rolled back when any one of the exceptions occurs.","title":"Before sent"},{"location":"user-guide/en/storage/general/#after-sent","text":"After the message enters the message queue, CAP will start the persistence function of the message queue. We need to explain how CAP message is persisted in RabbitMQ and Kafka. For message persistence in RabbitMQ, CAP uses a consumer queue with message persistence, but there may be exceptions here. Ready for production? By default, queues registered by CAP in RabbitMQ are persistent. When used in a production environment, we recommend that you start all consumers once to create the queues with persistence, which ensures that all queues are created before the message is sent. Since Kafka is born with message persistence using files, Kafka will ensure that messages are properly persisted without loss after the message enters Kafka.","title":"After sent"},{"location":"user-guide/en/storage/general/#storage","text":"","title":"Storage"},{"location":"user-guide/en/storage/general/#supported-storages","text":"CAP supports the following types of transaction-enabled databases for storage: SQL Server MySQL PostgreSql MongoDB In-Memory Storage After CAP is started, two tables are generated in used storage, by default the name is Cap.Published and Cap.Received .","title":"Supported storages"},{"location":"user-guide/en/storage/general/#storage-data-structure","text":"Table structure of Published : NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string Table structure of Received : NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Group Group Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string","title":"Storage Data Structure"},{"location":"user-guide/en/storage/general/#wapper-object","text":"When CAP sends a message, it will store original message object in a second package in the Content field. The following is the Wapper Object data structure of Content field. NAME DESCRIPTION TYPE Id Message Id string Timestamp Message created time string Content Message content string CallbackName Consumer callback topic name string The Id field is generate using the mongo objectid algorithm .","title":"Wapper Object"},{"location":"user-guide/en/storage/general/#community-supported-extensions","text":"Thanks to the community for supporting CAP, the following is the implementation of community-supported storage SQLite ( @colinin ) \uff1a https://github.com/colinin/DotNetCore.CAP.Sqlite LiteDB ( @maikebing ) \uff1a https://github.com/maikebing/CAP.Extensions SQLite & Oracle ( @cocosip ) \uff1a https://github.com/cocosip/CAP-Extensions","title":"Community-supported extensions"},{"location":"user-guide/en/storage/in-memory-storage/","text":"In-Memory Storage \u00b6 In-memory storage is often used in development and test environments, and if you use memory-based storage you lose the reliability of local transaction messages. Configuration \u00b6 To use in-memory storage, you need to install following package from NuGet: PM > Install-Package DotNetCore . CAP . InMemoryStorage Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseInMemoryStorage (); // x.UseXXX ... }); } CAP will clean every 5 minutes Successful messages in memory. Publish with transaction \u00b6 In-Memory Storage does not support Transaction mode to send messages.","title":"In-Memory"},{"location":"user-guide/en/storage/in-memory-storage/#in-memory-storage","text":"In-memory storage is often used in development and test environments, and if you use memory-based storage you lose the reliability of local transaction messages.","title":"In-Memory Storage"},{"location":"user-guide/en/storage/in-memory-storage/#configuration","text":"To use in-memory storage, you need to install following package from NuGet: PM > Install-Package DotNetCore . CAP . InMemoryStorage Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseInMemoryStorage (); // x.UseXXX ... }); } CAP will clean every 5 minutes Successful messages in memory.","title":"Configuration"},{"location":"user-guide/en/storage/in-memory-storage/#publish-with-transaction","text":"In-Memory Storage does not support Transaction mode to send messages.","title":"Publish with transaction"},{"location":"user-guide/en/storage/mongodb/","text":"MongoDB \u00b6 MongoDB is a cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with schema. CAP supports MongoDB since version 2.3 . MongoDB supports ACID transactions since version 4.0, so CAP only supports MongoDB above 4.0, and MongoDB needs to be deployed as a cluster, because MongoDB's ACID transaction requires a cluster to be used. For a quick development of the MongoDB 4.0+ cluster for the development environment, you can refer to this article . Configuration \u00b6 To use MongoDB storage, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . MongoDB Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseMongoDB ( opt =>{ //MongoDBOptions }); // x.UseXXX ... }); } MongoDB Options \u00b6 NAME DESCRIPTION TYPE DEFAULT DatabaseName Database name string cap DatabaseConnection Database connection string string mongodb://localhost:27017 ReceivedCollection Database received message collection name string cap.received PublishedCollection Database published message collection name string cap.published Publish with transaction \u00b6 The following example shows how to leverage CAP and MongoDB for local transaction integration. //NOTE: Before your test, your need to create database and collection at first. // Mongo can't create databases and collections in transactions automatic, // so you need to create them separately, simulating a record insert // will automatically create. // var mycollection = _client.GetDatabase(\"test\") // .GetCollection<BsonDocument>(\"test.collection\"); // mycollection.InsertOne(new BsonDocument { { \"test\", \"test\" } }); using ( var session = _client . StartTransaction ( _capBus , autoCommit : false )) { var collection = _client . GetDatabase ( \"test\" ) . GetCollection < BsonDocument >( \"test.collection\" ); collection . InsertOne ( session , new BsonDocument { { \"hello\" , \"world\" } }); _capBus . Publish ( \"sample.rabbitmq.mongodb\" , DateTime . Now ); session . CommitTransaction (); }","title":"MongoDB"},{"location":"user-guide/en/storage/mongodb/#mongodb","text":"MongoDB is a cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with schema. CAP supports MongoDB since version 2.3 . MongoDB supports ACID transactions since version 4.0, so CAP only supports MongoDB above 4.0, and MongoDB needs to be deployed as a cluster, because MongoDB's ACID transaction requires a cluster to be used. For a quick development of the MongoDB 4.0+ cluster for the development environment, you can refer to this article .","title":"MongoDB"},{"location":"user-guide/en/storage/mongodb/#configuration","text":"To use MongoDB storage, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . MongoDB Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseMongoDB ( opt =>{ //MongoDBOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/storage/mongodb/#mongodb-options","text":"NAME DESCRIPTION TYPE DEFAULT DatabaseName Database name string cap DatabaseConnection Database connection string string mongodb://localhost:27017 ReceivedCollection Database received message collection name string cap.received PublishedCollection Database published message collection name string cap.published","title":"MongoDB Options"},{"location":"user-guide/en/storage/mongodb/#publish-with-transaction","text":"The following example shows how to leverage CAP and MongoDB for local transaction integration. //NOTE: Before your test, your need to create database and collection at first. // Mongo can't create databases and collections in transactions automatic, // so you need to create them separately, simulating a record insert // will automatically create. // var mycollection = _client.GetDatabase(\"test\") // .GetCollection<BsonDocument>(\"test.collection\"); // mycollection.InsertOne(new BsonDocument { { \"test\", \"test\" } }); using ( var session = _client . StartTransaction ( _capBus , autoCommit : false )) { var collection = _client . GetDatabase ( \"test\" ) . GetCollection < BsonDocument >( \"test.collection\" ); collection . InsertOne ( session , new BsonDocument { { \"hello\" , \"world\" } }); _capBus . Publish ( \"sample.rabbitmq.mongodb\" , DateTime . Now ); session . CommitTransaction (); }","title":"Publish with transaction"},{"location":"user-guide/en/storage/mysql/","text":"MySQL \u00b6 MySQL is an open-source relational database management system. CAP supports MySQL database. Configuration \u00b6 To use MySQL storage, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . MySql Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseMySql ( opt =>{ //MySqlOptions }); // x.UseXXX ... }); } MySqlOptions \u00b6 NAME DESCRIPTION TYPE DEFAULT TableNamePrefix CAP table name prefix string cap ConnectionString Database connection string string null Publish with transaction \u00b6 ADO.NET with transaction \u00b6 private readonly ICapPublisher _capBus ; using ( var connection = new MySqlConnection ( AppDbContext . ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } } EntityFramework with transaction \u00b6 private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"MySQL"},{"location":"user-guide/en/storage/mysql/#mysql","text":"MySQL is an open-source relational database management system. CAP supports MySQL database.","title":"MySQL"},{"location":"user-guide/en/storage/mysql/#configuration","text":"To use MySQL storage, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . MySql Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseMySql ( opt =>{ //MySqlOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/storage/mysql/#mysqloptions","text":"NAME DESCRIPTION TYPE DEFAULT TableNamePrefix CAP table name prefix string cap ConnectionString Database connection string string null","title":"MySqlOptions"},{"location":"user-guide/en/storage/mysql/#publish-with-transaction","text":"","title":"Publish with transaction"},{"location":"user-guide/en/storage/mysql/#adonet-with-transaction","text":"private readonly ICapPublisher _capBus ; using ( var connection = new MySqlConnection ( AppDbContext . ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } }","title":"ADO.NET with transaction"},{"location":"user-guide/en/storage/mysql/#entityframework-with-transaction","text":"private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"EntityFramework with transaction"},{"location":"user-guide/en/storage/postgresql/","text":"Postgre SQL \u00b6 PostgreSQL is an open-source relational database management system. CAP supports PostgreSQL database. Configuration \u00b6 To use PostgreSQL storage, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . PostgreSql Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UsePostgreSql ( opt =>{ //PostgreSqlOptions }); // x.UseXXX ... }); } PostgreSqlOptions \u00b6 NAME DESCRIPTION TYPE DEFAULT Schema Database schema string cap ConnectionString Database connection string string Publish with transaction \u00b6 ADO.NET with transaction \u00b6 private readonly ICapPublisher _capBus ; using ( var connection = new NpgsqlConnection ( \"ConnectionString\" )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } } EntityFramework with transaction \u00b6 private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"PostgreSql"},{"location":"user-guide/en/storage/postgresql/#postgre-sql","text":"PostgreSQL is an open-source relational database management system. CAP supports PostgreSQL database.","title":"Postgre SQL"},{"location":"user-guide/en/storage/postgresql/#configuration","text":"To use PostgreSQL storage, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . PostgreSql Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UsePostgreSql ( opt =>{ //PostgreSqlOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/storage/postgresql/#postgresqloptions","text":"NAME DESCRIPTION TYPE DEFAULT Schema Database schema string cap ConnectionString Database connection string string","title":"PostgreSqlOptions"},{"location":"user-guide/en/storage/postgresql/#publish-with-transaction","text":"","title":"Publish with transaction"},{"location":"user-guide/en/storage/postgresql/#adonet-with-transaction","text":"private readonly ICapPublisher _capBus ; using ( var connection = new NpgsqlConnection ( \"ConnectionString\" )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } }","title":"ADO.NET with transaction"},{"location":"user-guide/en/storage/postgresql/#entityframework-with-transaction","text":"private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"EntityFramework with transaction"},{"location":"user-guide/en/storage/sqlserver/","text":"SQL Server \u00b6 SQL Server is a relational database management system developed by Microsoft. CAP supports SQL Server database. Warning We currently use Microsoft.Data.SqlClient as the database driver, which is the future of SQL Server drivers, and we have abandoned System.Data.SqlClient , we suggest that you switch to. Configuration \u00b6 To use SQL Server storage, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . SqlServer Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseSqlServer ( opt =>{ //SqlServerOptions }); // x.UseXXX ... }); } SqlServerOptions \u00b6 NAME DESCRIPTION TYPE DEFAULT Schema Database schema string Cap ConnectionString Database connection string string Publish with transaction \u00b6 ADO.NET with transaction \u00b6 private readonly ICapPublisher _capBus ; using ( var connection = new SqlConnection ( \"ConnectionString\" )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } } EntityFramework with transaction \u00b6 private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"SQL Server"},{"location":"user-guide/en/storage/sqlserver/#sql-server","text":"SQL Server is a relational database management system developed by Microsoft. CAP supports SQL Server database. Warning We currently use Microsoft.Data.SqlClient as the database driver, which is the future of SQL Server drivers, and we have abandoned System.Data.SqlClient , we suggest that you switch to.","title":"SQL Server"},{"location":"user-guide/en/storage/sqlserver/#configuration","text":"To use SQL Server storage, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . SqlServer Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseSqlServer ( opt =>{ //SqlServerOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/storage/sqlserver/#sqlserveroptions","text":"NAME DESCRIPTION TYPE DEFAULT Schema Database schema string Cap ConnectionString Database connection string string","title":"SqlServerOptions"},{"location":"user-guide/en/storage/sqlserver/#publish-with-transaction","text":"","title":"Publish with transaction"},{"location":"user-guide/en/storage/sqlserver/#adonet-with-transaction","text":"private readonly ICapPublisher _capBus ; using ( var connection = new SqlConnection ( \"ConnectionString\" )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } }","title":"ADO.NET with transaction"},{"location":"user-guide/en/storage/sqlserver/#entityframework-with-transaction","text":"private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"EntityFramework with transaction"},{"location":"user-guide/en/transport/aws-sqs/","text":"Amazon SQS \u00b6 AWS SQS is a fully managed message queuing service that enables you to decouple and scale microservices, distributed systems, and serverless applications. AWS SNS is a highly available, durable, secure, fully managed pub/sub messaging service that enables you to decouple microservices, distributed systems, and serverless applications. How CAP uses AWS SNS and SQS \u00b6 SNS \u00b6 Because CAP works based on the topic pattern, it needs to use AWS SNS, which simplifies the publish and subscribe architecture of messages. When CAP startups, all subscription names will be registered as SNS topics, and you will see a list of all registered topics in the management console. SNS does not support use of symbols such as . : as the name of the topic, so we replaced it. We replaced . with - and : with _ Precautions Amazon SNS currently allows maximum size of published messages to be 256KB For example, you have the following two subscriber methods in your current project [CapSubscribe(\"sample.sns.foo\")] public void TestFoo ( DateTime value ) { } [CapSubscribe(\"sample.sns.bar\")] public void TestBar ( DateTime value ) { } After CAP startups, you will see in SNS management console: SQS \u00b6 For each consumer group, CAP will create a corresponding SQS queue, the name of the queue is the name of the DefaultGroup in the configuration options, and the queue type is Standard. The SQS queue will subscribe to Topic in SNS, as shown below: Precautions Due to the limitation of AWS SNS, when you remove the subscription method, CAP will not delete topics or queues on AWS SNS or SQS, you need to delete them manually. Configuration \u00b6 To use AWS SQS as the transport, you need to install the packages from NuGet: Install-Package DotNetCore.CAP.AmazonSQS Next, add configuration items to the ConfigureServices method of Startup.cs : public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseAmazonSQS ( opt => { //AmazonSQSOptions }); // x.UseXXX ... }); } AmazonSQS Options \u00b6 The SQS configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT Region AWS Region Amazon.RegionEndpoint Credentials AWS AK SK Information Amazon.Runtime.AWSCredentials If your project runs in AWS EC2, you don't need to set Credentials, you can directly apply IAM policy for EC2. Credentials requires the SNS,SQS IAM policy.","title":"Amazon SQS"},{"location":"user-guide/en/transport/aws-sqs/#amazon-sqs","text":"AWS SQS is a fully managed message queuing service that enables you to decouple and scale microservices, distributed systems, and serverless applications. AWS SNS is a highly available, durable, secure, fully managed pub/sub messaging service that enables you to decouple microservices, distributed systems, and serverless applications.","title":"Amazon SQS"},{"location":"user-guide/en/transport/aws-sqs/#how-cap-uses-aws-sns-and-sqs","text":"","title":"How CAP uses AWS SNS and SQS"},{"location":"user-guide/en/transport/aws-sqs/#sns","text":"Because CAP works based on the topic pattern, it needs to use AWS SNS, which simplifies the publish and subscribe architecture of messages. When CAP startups, all subscription names will be registered as SNS topics, and you will see a list of all registered topics in the management console. SNS does not support use of symbols such as . : as the name of the topic, so we replaced it. We replaced . with - and : with _ Precautions Amazon SNS currently allows maximum size of published messages to be 256KB For example, you have the following two subscriber methods in your current project [CapSubscribe(\"sample.sns.foo\")] public void TestFoo ( DateTime value ) { } [CapSubscribe(\"sample.sns.bar\")] public void TestBar ( DateTime value ) { } After CAP startups, you will see in SNS management console:","title":"SNS"},{"location":"user-guide/en/transport/aws-sqs/#sqs","text":"For each consumer group, CAP will create a corresponding SQS queue, the name of the queue is the name of the DefaultGroup in the configuration options, and the queue type is Standard. The SQS queue will subscribe to Topic in SNS, as shown below: Precautions Due to the limitation of AWS SNS, when you remove the subscription method, CAP will not delete topics or queues on AWS SNS or SQS, you need to delete them manually.","title":"SQS"},{"location":"user-guide/en/transport/aws-sqs/#configuration","text":"To use AWS SQS as the transport, you need to install the packages from NuGet: Install-Package DotNetCore.CAP.AmazonSQS Next, add configuration items to the ConfigureServices method of Startup.cs : public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseAmazonSQS ( opt => { //AmazonSQSOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/transport/aws-sqs/#amazonsqs-options","text":"The SQS configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT Region AWS Region Amazon.RegionEndpoint Credentials AWS AK SK Information Amazon.Runtime.AWSCredentials If your project runs in AWS EC2, you don't need to set Credentials, you can directly apply IAM policy for EC2. Credentials requires the SNS,SQS IAM policy.","title":"AmazonSQS Options"},{"location":"user-guide/en/transport/azure-service-bus/","text":"Azure Service Bus \u00b6 Microsoft Azure Service Bus is a fully managed enterprise integration message broker. Service Bus is most commonly used to decouple applications and services from each other, and is a reliable and secure platform for asynchronous data and state transfer. Azure services can be used in CAP as a message transporter. Configuration \u00b6 Requirement For the Service Bus pricing layer, CAP requires \"standard\" or \"advanced\" to support Topic functionality. To use Azure Service Bus as a message transport, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . AzureServiceBus Next, add configuration items to the ConfigureServices method of Startup.cs : public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseAzureServiceBus ( opt => { //AzureServiceBusOptions }); // x.UseXXX ... }); } AzureServiceBus Options \u00b6 The AzureServiceBus configuration options provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT ConnectionString Endpoint address string EnableSessions Enable Service bus sessions bool false TopicPath Topic entity path string cap ManagementTokenProvider Token provider ITokenProvider null CustomHeaders Adds custom and/or mandatory Headers for incoming messages from heterogeneous systems. Func >>? null #### Sessions When sessions are enabled (see EnableSessions option above), every message sent will have a session id. To control the session id, include an extra header with name AzureServiceBusHeaders.SessionId when publishing events: ICapPublisher capBus = ...; string yourEventName = ...; YourEventType yourEvent = ...; Dictionary < string , string > extraHeaders = new Dictionary < string , string >(); extraHeaders . Add ( AzureServiceBusHeaders . SessionId , < your - session - id >); capBus . Publish ( yourEventName , yourEvent , extraHeaders ); If no session id header is present, the message id will be used as the session id. Heterogeneous Systems \u00b6 Sometimes you might want to listen to a message that was published by an external system. In this case, you need to add a set of two mandatory headers for CAP compatibility as shown below. c . UseAzureServiceBus ( asb => { asb . ConnectionString = ... asb . CustomHeaders = message => new List < KeyValuePair < string , string >>() { new ( DotNetCore . CAP . Messages . Headers . MessageId , SnowflakeId . Default (). NextId (). ToString ()), new ( DotNetCore . CAP . Messages . Headers . MessageName , message . Label ) }; }); Important: If a header with the same name (key) already exists in the message, the Custom Header won't be added.","title":"Azure Service Bus"},{"location":"user-guide/en/transport/azure-service-bus/#azure-service-bus","text":"Microsoft Azure Service Bus is a fully managed enterprise integration message broker. Service Bus is most commonly used to decouple applications and services from each other, and is a reliable and secure platform for asynchronous data and state transfer. Azure services can be used in CAP as a message transporter.","title":"Azure Service Bus"},{"location":"user-guide/en/transport/azure-service-bus/#configuration","text":"Requirement For the Service Bus pricing layer, CAP requires \"standard\" or \"advanced\" to support Topic functionality. To use Azure Service Bus as a message transport, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . AzureServiceBus Next, add configuration items to the ConfigureServices method of Startup.cs : public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseAzureServiceBus ( opt => { //AzureServiceBusOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/transport/azure-service-bus/#azureservicebus-options","text":"The AzureServiceBus configuration options provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT ConnectionString Endpoint address string EnableSessions Enable Service bus sessions bool false TopicPath Topic entity path string cap ManagementTokenProvider Token provider ITokenProvider null CustomHeaders Adds custom and/or mandatory Headers for incoming messages from heterogeneous systems. Func >>? null #### Sessions When sessions are enabled (see EnableSessions option above), every message sent will have a session id. To control the session id, include an extra header with name AzureServiceBusHeaders.SessionId when publishing events: ICapPublisher capBus = ...; string yourEventName = ...; YourEventType yourEvent = ...; Dictionary < string , string > extraHeaders = new Dictionary < string , string >(); extraHeaders . Add ( AzureServiceBusHeaders . SessionId , < your - session - id >); capBus . Publish ( yourEventName , yourEvent , extraHeaders ); If no session id header is present, the message id will be used as the session id.","title":"AzureServiceBus Options"},{"location":"user-guide/en/transport/azure-service-bus/#heterogeneous-systems","text":"Sometimes you might want to listen to a message that was published by an external system. In this case, you need to add a set of two mandatory headers for CAP compatibility as shown below. c . UseAzureServiceBus ( asb => { asb . ConnectionString = ... asb . CustomHeaders = message => new List < KeyValuePair < string , string >>() { new ( DotNetCore . CAP . Messages . Headers . MessageId , SnowflakeId . Default (). NextId (). ToString ()), new ( DotNetCore . CAP . Messages . Headers . MessageName , message . Label ) }; }); Important: If a header with the same name (key) already exists in the message, the Custom Header won't be added.","title":"Heterogeneous Systems"},{"location":"user-guide/en/transport/general/","text":"Transports \u00b6 Transports move data from one place to another \u2013 between acquisition programs and pipelines, between pipelines and the entity database, and even between pipelines and external systems. Supported transports \u00b6 CAP supports several transport methods: RabbitMQ Kafka Azure Service Bus Amazon SQS NATS In-Memory Queue Redis Streams Apache Pulsar How to select a transport \u00b6 \ud83c\udff3\u200d\ud83c\udf08 RabbitMQ Kafka Azure Service Bus In-Memory Positioning Reliable message transmission Real time data processing Cloud In-Memory, testing Distributed \u2714 \u2714 \u2714 \u274c Persistence \u2714 \u2714 \u2714 \u274c Performance Medium High Medium High Azure Service Bus vs RabbitMQ : http://geekswithblogs.net/michaelstephenson/archive/2012/08/12/150399.aspx Kafka vs RabbitMQ : https://stackoverflow.com/questions/42151544/is-there-any-reason-to-use-rabbitmq-over-kafka Community-supported transport extensions \u00b6 Thanks to the community for supporting CAP, the following is the implementation of community-supported transport ActiveMQ (@ Lukas Zhang ): https://github.com/lukazh RedisMQ ( @\u6728\u6728 ) https://github.com/difudotnet/CAP.RedisMQ.Extensions ZeroMQ ( @maikebing )\uff1a https://github.com/maikebing/CAP.Extensions MQTT ( @john jiang ): https://github.com/jinzaz/jinzaz.CAP.MQTT","title":"General"},{"location":"user-guide/en/transport/general/#transports","text":"Transports move data from one place to another \u2013 between acquisition programs and pipelines, between pipelines and the entity database, and even between pipelines and external systems.","title":"Transports"},{"location":"user-guide/en/transport/general/#supported-transports","text":"CAP supports several transport methods: RabbitMQ Kafka Azure Service Bus Amazon SQS NATS In-Memory Queue Redis Streams Apache Pulsar","title":"Supported transports"},{"location":"user-guide/en/transport/general/#how-to-select-a-transport","text":"\ud83c\udff3\u200d\ud83c\udf08 RabbitMQ Kafka Azure Service Bus In-Memory Positioning Reliable message transmission Real time data processing Cloud In-Memory, testing Distributed \u2714 \u2714 \u2714 \u274c Persistence \u2714 \u2714 \u2714 \u274c Performance Medium High Medium High Azure Service Bus vs RabbitMQ : http://geekswithblogs.net/michaelstephenson/archive/2012/08/12/150399.aspx Kafka vs RabbitMQ : https://stackoverflow.com/questions/42151544/is-there-any-reason-to-use-rabbitmq-over-kafka","title":"How to select a transport"},{"location":"user-guide/en/transport/general/#community-supported-transport-extensions","text":"Thanks to the community for supporting CAP, the following is the implementation of community-supported transport ActiveMQ (@ Lukas Zhang ): https://github.com/lukazh RedisMQ ( @\u6728\u6728 ) https://github.com/difudotnet/CAP.RedisMQ.Extensions ZeroMQ ( @maikebing )\uff1a https://github.com/maikebing/CAP.Extensions MQTT ( @john jiang ): https://github.com/jinzaz/jinzaz.CAP.MQTT","title":"Community-supported transport extensions"},{"location":"user-guide/en/transport/in-memory-queue/","text":"In-Memory Queue \u00b6 In Memory Queue is a memory-based message queue provided by Community . Configuration \u00b6 To use In Memory Queue as a message transporter, you need to install the following package from NuGet: PM > Install-Package Savorboard . CAP . InMemoryMessageQueue Next, add configuration options to the ConfigureServices method of Startup.cs : public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseInMemoryMessageQueue (); // x.UseXXX ... }); }","title":"In-Memory Queue"},{"location":"user-guide/en/transport/in-memory-queue/#in-memory-queue","text":"In Memory Queue is a memory-based message queue provided by Community .","title":"In-Memory Queue"},{"location":"user-guide/en/transport/in-memory-queue/#configuration","text":"To use In Memory Queue as a message transporter, you need to install the following package from NuGet: PM > Install-Package Savorboard . CAP . InMemoryMessageQueue Next, add configuration options to the ConfigureServices method of Startup.cs : public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseInMemoryMessageQueue (); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/transport/kafka/","text":"Apache Kafka\u00ae \u00b6 Apache Kafka\u00ae is an open-source stream-processing software platform developed by LinkedIn and donated to the Apache Software Foundation, written in Scala and Java. Kafka\u00ae can be used in CAP as a message transporter. Configuration \u00b6 To use Kafka transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . Kafka Then you can add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseKafka ( opt =>{ //KafkaOptions }); // x.UseXXX ... }); } Kafka Options \u00b6 The Kafka configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT Servers Broker server address string ConnectionPoolSize connection pool size int 10 CustomHeaders Custom subscribe headers Func<> N/A CustomHeaders Options \u00b6 When the message sent from a heterogeneous system, because of the CAP needs to define additional headers, so an exception will occur at this time. By providing this parameter to set the custom headersn to make the subscriber works. You can find the description of heterogeneous system integration here . Sometimes, if you want to get additional context information from Broker, you can also add it through this option. For example, add information such as Offset or Partition. Example\uff1a x . UseKafka ( opt => { //... opt . CustomHeaders = kafkaResult => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( \"my.kafka.offset\" , kafkaResult . Offset . ToString ()), new KeyValuePair < string , string >( \"my.kafka.partition\" , kafkaResult . Partition . ToString ()) }; }); Then you can get the header you added by this way: [CapSubscribe(\"sample.kafka.postgrsql\")] public void HeadersTest ( DateTime value , [ FromCap ] CapHeader header ) { var offset = header [ \"my.kafka.offset\" ]; var partition = header [ \"my.kafka.partition\" ]; } Kafka MainConfig Options \u00b6 If you need more native Kakfa related configuration options, you can set them in the MainConfig configuration option: services . AddCap ( capOptions => { capOptions . UseKafka ( kafkaOption => { // kafka options. // kafkaOptions.MainConfig.Add(\"\", \"\"); }); }); MainConfig is a configuration dictionary, you can find a list of supported configuration options through the following link. https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md","title":"Apache Kafka\u00ae"},{"location":"user-guide/en/transport/kafka/#apache-kafka","text":"Apache Kafka\u00ae is an open-source stream-processing software platform developed by LinkedIn and donated to the Apache Software Foundation, written in Scala and Java. Kafka\u00ae can be used in CAP as a message transporter.","title":"Apache Kafka\u00ae"},{"location":"user-guide/en/transport/kafka/#configuration","text":"To use Kafka transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . Kafka Then you can add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseKafka ( opt =>{ //KafkaOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/transport/kafka/#kafka-options","text":"The Kafka configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT Servers Broker server address string ConnectionPoolSize connection pool size int 10 CustomHeaders Custom subscribe headers Func<> N/A","title":"Kafka Options"},{"location":"user-guide/en/transport/kafka/#customheaders-options","text":"When the message sent from a heterogeneous system, because of the CAP needs to define additional headers, so an exception will occur at this time. By providing this parameter to set the custom headersn to make the subscriber works. You can find the description of heterogeneous system integration here . Sometimes, if you want to get additional context information from Broker, you can also add it through this option. For example, add information such as Offset or Partition. Example\uff1a x . UseKafka ( opt => { //... opt . CustomHeaders = kafkaResult => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( \"my.kafka.offset\" , kafkaResult . Offset . ToString ()), new KeyValuePair < string , string >( \"my.kafka.partition\" , kafkaResult . Partition . ToString ()) }; }); Then you can get the header you added by this way: [CapSubscribe(\"sample.kafka.postgrsql\")] public void HeadersTest ( DateTime value , [ FromCap ] CapHeader header ) { var offset = header [ \"my.kafka.offset\" ]; var partition = header [ \"my.kafka.partition\" ]; }","title":"CustomHeaders Options"},{"location":"user-guide/en/transport/kafka/#kafka-mainconfig-options","text":"If you need more native Kakfa related configuration options, you can set them in the MainConfig configuration option: services . AddCap ( capOptions => { capOptions . UseKafka ( kafkaOption => { // kafka options. // kafkaOptions.MainConfig.Add(\"\", \"\"); }); }); MainConfig is a configuration dictionary, you can find a list of supported configuration options through the following link. https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md","title":"Kafka MainConfig Options"},{"location":"user-guide/en/transport/nats/","text":"NATS \u00b6 NATS is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (CNCF). Warning Versions of CAP below 5.2.0 are implement based on Request/Response mode, and now we are based on JetStream implementation. see https://github.com/dotnetcore/CAP/issues/983 for more information. Configuration \u00b6 To use NATS transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . NATS Then you can add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( capOptions => { capOptions . UseNATS ( natsOptions =>{ //NATS Options }); }); } NATS Options \u00b6 NATS configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT Options NATS client configuration Options Options Servers Server url/urls used to connect to the NATs server. string NULL ConnectionPoolSize number of connections pool uint 10 NATS ConfigurationOptions \u00b6 If you need more native NATS related configuration options, you can set them in the Options option: services . AddCap ( capOptions => { capOptions . UseNATS ( natsOptions => { // NATS options. natsOptions . Options . Url = \"\" ; }); }); Options is a NATS.Client ConfigurationOptions , you can find more details through this link","title":"NATS"},{"location":"user-guide/en/transport/nats/#nats","text":"NATS is a simple, secure and performant communications system for digital systems, services and devices. NATS is part of the Cloud Native Computing Foundation (CNCF). Warning Versions of CAP below 5.2.0 are implement based on Request/Response mode, and now we are based on JetStream implementation. see https://github.com/dotnetcore/CAP/issues/983 for more information.","title":"NATS"},{"location":"user-guide/en/transport/nats/#configuration","text":"To use NATS transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . NATS Then you can add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( capOptions => { capOptions . UseNATS ( natsOptions =>{ //NATS Options }); }); }","title":"Configuration"},{"location":"user-guide/en/transport/nats/#nats-options","text":"NATS configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT Options NATS client configuration Options Options Servers Server url/urls used to connect to the NATs server. string NULL ConnectionPoolSize number of connections pool uint 10","title":"NATS Options"},{"location":"user-guide/en/transport/nats/#nats-configurationoptions","text":"If you need more native NATS related configuration options, you can set them in the Options option: services . AddCap ( capOptions => { capOptions . UseNATS ( natsOptions => { // NATS options. natsOptions . Options . Url = \"\" ; }); }); Options is a NATS.Client ConfigurationOptions , you can find more details through this link","title":"NATS ConfigurationOptions"},{"location":"user-guide/en/transport/pulsar/","text":"Apache Pulsar \u00b6 Apache Pulsar is a cloud-native, distributed messaging and streaming platform originally created at Yahoo! and now a top-level Apache Software Foundation project. Pulsar can be used in CAP as a message transporter. Configuration \u00b6 To use Pulsar transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . Pulsar Then you can add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UsePulsar ( opt => { //Pulsar options }); // x.UseXXX ... }); } Pulsar Options \u00b6 The Pulsar configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT ServiceUrl Broker server address string TlsOptions Tls configuration object","title":"Apache Pulsar"},{"location":"user-guide/en/transport/pulsar/#apache-pulsar","text":"Apache Pulsar is a cloud-native, distributed messaging and streaming platform originally created at Yahoo! and now a top-level Apache Software Foundation project. Pulsar can be used in CAP as a message transporter.","title":"Apache Pulsar"},{"location":"user-guide/en/transport/pulsar/#configuration","text":"To use Pulsar transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . Pulsar Then you can add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UsePulsar ( opt => { //Pulsar options }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/transport/pulsar/#pulsar-options","text":"The Pulsar configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT ServiceUrl Broker server address string TlsOptions Tls configuration object","title":"Pulsar Options"},{"location":"user-guide/en/transport/rabbitmq/","text":"RabbitMQ \u00b6 RabbitMQ is an open-source message-broker software that originally implemented the Advanced Message Queuing Protocol and has since been extended with a plug-in architecture to support Streaming Text Oriented Messaging Protocol, Message Queuing Telemetry Transport, and other protocols. RabbitMQ can be used in CAP as a message transporter. Configuration \u00b6 To use RabbitMQ transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . RabbitMQ Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseRabbitMQ ( opt => { //RabbitMQOptions }); // x.UseXXX ... }); } RabbitMQ Options \u00b6 The RabbitMQ configuration parameters provided directly by CAP: NAME DESCRIPTION TYPE DEFAULT HostName Broker host address string localhost UserName Broker user name string guest Password Broker password string guest VirtualHost Broker virtual host string / Port Port int -1 ExchangeName Default exchange name string cap.default.topic QueueArguments Extra queue x-arguments QueueArgumentsOptions N/A ConnectionFactoryOptions RabbitMQClient native connection options ConnectionFactory N/A CustomHeaders Custom subscribe headers See the blow N/A PublishConfirms Enable publish confirms bool false ConnectionFactory Option \u00b6 If you need more native ConnectionFactory configuration options, you can set it by 'ConnectionFactoryOptions' option: services . AddCap ( x => { x . UseRabbitMQ ( o => { o . HostName = \"localhost\" ; o . ConnectionFactoryOptions = opt => { //rabbitmq client ConnectionFactory config }; }); }); CustomHeaders Option \u00b6 When the message sent from the RabbitMQ management console or a heterogeneous system, because of the CAP needs to define additional headers, so an exception will occur at this time. By providing this parameter to set the custom headersn to make the subscriber works. You can find the description of Header Information here. Example\uff1a x . UseRabbitMQ ( aa => { aa . CustomHeaders = e => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( Headers . MessageId , SnowflakeId . Default (). NextId (). ToString ()), new KeyValuePair < string , string >( Headers . MessageName , e . RoutingKey ), }; }); How to connect cluster \u00b6 using comma split connection string, like this: x=> x.UseRabbitMQ(\"localhost:5672,localhost:5673,localhost:5674\")","title":"RabbitMQ"},{"location":"user-guide/en/transport/rabbitmq/#rabbitmq","text":"RabbitMQ is an open-source message-broker software that originally implemented the Advanced Message Queuing Protocol and has since been extended with a plug-in architecture to support Streaming Text Oriented Messaging Protocol, Message Queuing Telemetry Transport, and other protocols. RabbitMQ can be used in CAP as a message transporter.","title":"RabbitMQ"},{"location":"user-guide/en/transport/rabbitmq/#configuration","text":"To use RabbitMQ transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . RabbitMQ Next, add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseRabbitMQ ( opt => { //RabbitMQOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/en/transport/rabbitmq/#rabbitmq-options","text":"The RabbitMQ configuration parameters provided directly by CAP: NAME DESCRIPTION TYPE DEFAULT HostName Broker host address string localhost UserName Broker user name string guest Password Broker password string guest VirtualHost Broker virtual host string / Port Port int -1 ExchangeName Default exchange name string cap.default.topic QueueArguments Extra queue x-arguments QueueArgumentsOptions N/A ConnectionFactoryOptions RabbitMQClient native connection options ConnectionFactory N/A CustomHeaders Custom subscribe headers See the blow N/A PublishConfirms Enable publish confirms bool false","title":"RabbitMQ Options"},{"location":"user-guide/en/transport/rabbitmq/#connectionfactory-option","text":"If you need more native ConnectionFactory configuration options, you can set it by 'ConnectionFactoryOptions' option: services . AddCap ( x => { x . UseRabbitMQ ( o => { o . HostName = \"localhost\" ; o . ConnectionFactoryOptions = opt => { //rabbitmq client ConnectionFactory config }; }); });","title":"ConnectionFactory Option"},{"location":"user-guide/en/transport/rabbitmq/#customheaders-option","text":"When the message sent from the RabbitMQ management console or a heterogeneous system, because of the CAP needs to define additional headers, so an exception will occur at this time. By providing this parameter to set the custom headersn to make the subscriber works. You can find the description of Header Information here. Example\uff1a x . UseRabbitMQ ( aa => { aa . CustomHeaders = e => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( Headers . MessageId , SnowflakeId . Default (). NextId (). ToString ()), new KeyValuePair < string , string >( Headers . MessageName , e . RoutingKey ), }; });","title":"CustomHeaders Option"},{"location":"user-guide/en/transport/rabbitmq/#how-to-connect-cluster","text":"using comma split connection string, like this: x=> x.UseRabbitMQ(\"localhost:5672,localhost:5673,localhost:5674\")","title":"How to connect cluster"},{"location":"user-guide/en/transport/redis-streams/","text":"Redis Streams \u00b6 Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis Stream is a new data type introduced with Redis 5.0, which models a log data structure in a more abstract way with an append only data structure. Redis Streams can be used in CAP as a message transporter. Configuration \u00b6 To use Redis Streams transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . RedisStreams Then you can add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( capOptions => { capOptions . UseRedis ( redisOptions =>{ //redisOptions }); }); } Redis Streams Options \u00b6 Redis configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT Configuration redis connection configuration (StackExchange.Redis) ConfigurationOptions ConfigurationOptions StreamEntriesCount number of entries returned from a stream while reading uint 10 ConnectionPoolSize number of connections pool uint 10 Redis ConfigurationOptions \u00b6 If you need more native Redis related configuration options, you can set them in the Configuration option: services . AddCap ( capOptions => { capOptions . UseRedis ( redisOptions => { // redis options. redisOptions . Configuration . EndPoints . Add ( IPAddress . Loopback , 0 ); }); }); Configuration is a StackExchange.Redis ConfigurationOptions , you can find more details through this link","title":"Redis Streams"},{"location":"user-guide/en/transport/redis-streams/#redis-streams","text":"Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis Stream is a new data type introduced with Redis 5.0, which models a log data structure in a more abstract way with an append only data structure. Redis Streams can be used in CAP as a message transporter.","title":"Redis Streams"},{"location":"user-guide/en/transport/redis-streams/#configuration","text":"To use Redis Streams transporter, you need to install the following package from NuGet: PM > Install-Package DotNetCore . CAP . RedisStreams Then you can add configuration items to the ConfigureServices method of Startup.cs . public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( capOptions => { capOptions . UseRedis ( redisOptions =>{ //redisOptions }); }); }","title":"Configuration"},{"location":"user-guide/en/transport/redis-streams/#redis-streams-options","text":"Redis configuration parameters provided directly by the CAP: NAME DESCRIPTION TYPE DEFAULT Configuration redis connection configuration (StackExchange.Redis) ConfigurationOptions ConfigurationOptions StreamEntriesCount number of entries returned from a stream while reading uint 10 ConnectionPoolSize number of connections pool uint 10","title":"Redis Streams Options"},{"location":"user-guide/en/transport/redis-streams/#redis-configurationoptions","text":"If you need more native Redis related configuration options, you can set them in the Configuration option: services . AddCap ( capOptions => { capOptions . UseRedis ( redisOptions => { // redis options. redisOptions . Configuration . EndPoints . Add ( IPAddress . Loopback , 0 ); }); }); Configuration is a StackExchange.Redis ConfigurationOptions , you can find more details through this link","title":"Redis ConfigurationOptions"},{"location":"user-guide/zh/cap/configuration/","text":"\u914d\u7f6e \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f60\u5728\u5411IoC\u5bb9\u5668\u4e2d\u6ce8\u518cCAP\u670d\u52a1\u7684\u65f6\u5019\u6307\u5b9a\u914d\u7f6e\u3002 services . AddCap ( config => { // config.XXX }); \u5176\u4e2d services \u4ee3\u8868\u7684\u662f IServiceCollection \u63a5\u53e3\u5bf9\u8c61\uff0c\u5b83\u4f4d\u4e8e Microsoft.Extensions.DependencyInjection \u4e0b\u9762\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528\u5fae\u8f6f\u7684IoC\u5bb9\u5668\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u67e5\u770b ASP.NET Core \u8fd9\u91cc\u7684\u6587\u6863 \u6765\u4e86\u89e3\u5982\u4f55\u66ff\u6362\u9ed8\u8ba4\u7684\u5bb9\u5668\u5b9e\u73b0\u3002 \u4ec0\u4e48\u662f\u6700\u4f4e\u914d\u7f6e\uff1f \u00b6 \u6700\u7b80\u5355\u7684\u56de\u7b54\u5c31\u662f\uff0c\u81f3\u5c11\u4f60\u8981\u914d\u7f6e\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u548c\u4e00\u4e2a\u4e8b\u4ef6\u5b58\u50a8\uff0c\u5982\u679c\u4f60\u60f3\u5feb\u901f\u5f00\u59cb\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u914d\u7f6e\uff1a services . AddCap ( config => { config . UseInMemoryMessageQueue (); config . UseInMemoryStorage (); }); \u6709\u5173\u5177\u4f53\u7684\u6d88\u606f\u961f\u5217\u7684\u914d\u7f6e\u548c\u5b58\u50a8\u7684\u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b Transports \u7ae0\u8282\u548c Persistent \u7ae0\u8282\u4e2d\u5177\u4f53\u7ec4\u4ef6\u63d0\u4f9b\u7684\u914d\u7f6e\u9879\u3002 CAP \u4e2d\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e \u00b6 \u5728 AddCap \u4e2d CapOptions \u5bf9\u8c61\u662f\u7528\u6765\u5b58\u50a8\u914d\u7f6e\u76f8\u5173\u4fe1\u606f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4eec\u90fd\u5177\u6709\u4e00\u4e9b\u9ed8\u8ba4\u503c\uff0c\u6709\u4e9b\u65f6\u5019\u4f60\u53ef\u80fd\u9700\u8981\u81ea\u5b9a\u4e49\u3002 DefaultGroupName \u00b6 \u9ed8\u8ba4\u503c\uff1acap.queue.{\u7a0b\u5e8f\u96c6\u540d\u79f0} \u9ed8\u8ba4\u7684\u6d88\u8d39\u8005\u7ec4\u7684\u540d\u5b57\uff0c\u5728\u4e0d\u540c\u7684 Transports \u4e2d\u5bf9\u5e94\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6b64\u503c\u6765\u81ea\u5b9a\u4e49\u4e0d\u540c Transports \u4e2d\u7684\u540d\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u770b\u3002 Mapping \u5728 RabbitMQ \u4e2d\u6620\u5c04\u5230 Queue Names \u3002 \u5728 Apache Kafka \u4e2d\u6620\u5c04\u5230 Consumer Group Id \u3002 \u5728 Azure Service Bus \u4e2d\u6620\u5c04\u5230 Subscription Name\u3002 \u5728 NATS \u4e2d\u6620\u5c04\u5230 Queue Group Name . \u5728 Redis Streams \u4e2d\u6620\u5c04\u5230 Consumer Group . GroupNamePrefix \u00b6 \u9ed8\u8ba4\u503c\uff1aNull \u4e3a\u8ba2\u9605 Group \u7edf\u4e00\u6dfb\u52a0\u524d\u7f00\u3002 https://github.com/dotnetcore/CAP/pull/780 TopicNamePrefix \u00b6 \u9ed8\u8ba4\u503c\uff1a Null \u4e3a Topic \u7edf\u4e00\u6dfb\u52a0\u524d\u7f00\u3002 https://github.com/dotnetcore/CAP/pull/780 Version \u00b6 \u9ed8\u8ba4\u503c\uff1av1 \u8fd9\u662f\u5728CAP v2.4 \u7248\u672c\u4e2d\u5f15\u5165\u7684\u65b0\u914d\u7f6e\u9879\uff0c\u7528\u4e8e\u7ed9\u6d88\u606f\u6307\u5b9a\u7248\u672c\u6765\u9694\u79bb\u4e0d\u540c\u7248\u672c\u670d\u52a1\u7684\u6d88\u606f\uff0c\u5e38\u7528\u4e8eA/B\u6d4b\u8bd5\u6216\u8005\u591a\u670d\u52a1\u7248\u672c\u7684\u573a\u666f\u3002\u4ee5\u4e0b\u662f\u5176\u5e94\u7528\u573a\u666f\uff1a \u4e1a\u52a1\u5feb\u901f\u8fed\u4ee3\uff0c\u9700\u8981\u5411\u524d\u517c\u5bb9 \u7531\u4e8e\u4e1a\u52a1\u7684\u5feb\u901f\u8fed\u4ee3\uff0c\u5728\u5404\u4e2a\u670d\u52a1\u96c6\u6210\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6d88\u606f\u7684\u6570\u636e\u7ed3\u6784\u5e76\u4e0d\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u6709\u4e9b\u65f6\u5019\u6211\u4eec\u4e3a\u4e86\u9002\u5e94\u65b0\u5f15\u5165\u7684\u9700\u6c42\uff0c\u4f1a\u6dfb\u52a0\u6216\u8005\u4fee\u6539\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u3002\u5982\u679c\u4f60\u662f\u4e00\u5957\u5168\u65b0\u7684\u7cfb\u7edf\u8fd9\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u4f60\u7684\u7cfb\u7edf\u5df2\u7ecf\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e86\u5e76\u4e14\u6b63\u5728\u670d\u52a1\u5ba2\u6237\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u65b0\u7684\u529f\u80fd\u5728\u4e0a\u7ebf\u7684\u65f6\u5019\u548c\u65e7\u7684\u6570\u636e\u7ed3\u6784\u53d1\u751f\u4e0d\u517c\u5bb9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6539\u53d8\u53ef\u80fd\u4f1a\u5bfc\u81f4\u51fa\u73b0\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u8981\u60f3\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u80fd\u628a\u6d88\u606f\u961f\u5217\u548c\u6301\u4e45\u5316\u7684\u6d88\u606f\u5168\u90e8\u6e05\u7a7a\uff0c\u7136\u540e\u624d\u80fd\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u5bf9\u4e8e\u751f\u4ea7\u73af\u5883\u6765\u8bf4\u663e\u7136\u662f\u81f4\u547d\u7684\u3002 \u591a\u4e2a\u7248\u672c\u7684\u670d\u52a1\u7aef \u6709\u4e9b\u65f6\u5019\uff0cApp\u7684\u670d\u52a1\u7aef\u9700\u8981\u63d0\u4f9b\u591a\u5957\u63a5\u53e3\uff0c\u6765\u652f\u6301\u4e0d\u540c\u7248\u672c\u7684App\uff0c\u8fd9\u4e9b\u4e0d\u540c\u7248\u672c\u7684App\u76f8\u540c\u7684\u63a5\u53e3\u548c\u670d\u52a1\u7aef\u4ea4\u4e92\u7684\u6570\u636e\u7ed3\u6784\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u901a\u5e38\u60c5\u51b5\u4e0b\u670d\u52a1\u7aef\u63d0\u4f9b\u4e0d\u7528\u7684\u8def\u7531\u5730\u5740\u6765\u9002\u914d\u4e0d\u540c\u7248\u672c\u7684App\u8c03\u7528\u3002 \u4e0d\u540c\u5b9e\u4f8b\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6301\u4e45\u5316\u8868/\u96c6\u5408 \u5e0c\u671b\u591a\u4e2a\u4e0d\u540c\u5b9e\u4f8b\u7684\u7a0b\u5e8f\u53ef\u4ee5\u516c\u7528\u76f8\u540c\u7684\u6570\u636e\u5e93\uff0c\u5728 2.4 \u4e4b\u524d\u7684\u7248\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e0d\u540c\u7684\u8868\u540d\u6765\u9694\u79bb\u4e0d\u540c\u5b9e\u4f8b\u7684\u6570\u636e\u5e93\u8868\uff0c\u5373\u5728CAP\u914d\u7f6e\u7684\u65f6\u5019\u901a\u8fc7\u914d\u7f6e\u4e0d\u540c\u7684\u8868\u540d\u524d\u7f00\u6765\u5b9e\u73b0\u3002 \u67e5\u770b\u535a\u5ba2\u6765\u4e86\u89e3\u66f4\u591a\u5173\u4e8e Version \u7684\u4fe1\u606f\uff1a https://www.cnblogs.com/savorboard/p/cap-2-4.html FailedRetryInterval \u00b6 \u9ed8\u8ba4\u503c\uff1a60 \u79d2 \u5728\u6d88\u606f\u53d1\u9001\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u9001\u5931\u8d25\uff0cCAP\u5c06\u4f1a\u5bf9\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\uff0c\u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6e\u6bcf\u6b21\u91cd\u8bd5\u7684\u95f4\u9694\u65f6\u95f4\u3002 \u5728\u6d88\u606f\u6d88\u8d39\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6d88\u8d39\u5931\u8d25\uff0cCAP\u5c06\u4f1a\u5bf9\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u6d88\u8d39\uff0c\u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6e\u6bcf\u6b21\u91cd\u8bd5\u7684\u95f4\u9694\u65f6\u95f4\u3002 \u91cd\u8bd5 & \u95f4\u9694 \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u91cd\u8bd5\u5c06\u5728\u53d1\u9001\u548c\u6d88\u8d39\u6d88\u606f\u5931\u8d25\u7684 4\u5206\u949f\u540e \u5f00\u59cb\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u8bbe\u7f6e\u6d88\u606f\u72b6\u6001\u5ef6\u8fdf\u5bfc\u81f4\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\u3002 \u53d1\u9001\u548c\u6d88\u8d39\u6d88\u606f\u7684\u8fc7\u7a0b\u4e2d\u5931\u8d25\u4f1a\u7acb\u5373\u91cd\u8bd5 3 \u6b21\uff0c\u5728 3 \u6b21\u4ee5\u540e\u5c06\u8fdb\u5165\u91cd\u8bd5\u8f6e\u8be2\uff0c\u6b64\u65f6 FailedRetryInterval \u914d\u7f6e\u624d\u4f1a\u751f\u6548\u3002 ConsumerThreadCount \u00b6 \u9ed8\u8ba4\u503c\uff1a1 \u6d88\u8d39\u8005\u7ebf\u7a0b\u5e76\u884c\u5904\u7406\u6d88\u606f\u7684\u7ebf\u7a0b\u6570\uff0c\u5f53\u8fd9\u4e2a\u503c\u5927\u4e8e1\u65f6\uff0c\u5c06\u4e0d\u80fd\u4fdd\u8bc1\u6d88\u606f\u6267\u884c\u7684\u987a\u5e8f\u3002 CollectorCleaningInterval \u00b6 \u9ed8\u8ba4\u503c\uff1a300 \u79d2 \u6536\u96c6\u5668\u5220\u9664\u5df2\u7ecf\u8fc7\u671f\u6d88\u606f\u7684\u65f6\u95f4\u95f4\u9694\u3002 FailedRetryCount \u00b6 \u9ed8\u8ba4\u503c\uff1a50 \u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\u3002\u5f53\u8fbe\u5230\u6b64\u8bbe\u7f6e\u503c\u65f6\uff0c\u5c06\u4e0d\u4f1a\u518d\u7ee7\u7eed\u91cd\u8bd5\uff0c\u901a\u8fc7\u6539\u53d8\u6b64\u53c2\u6570\u6765\u8bbe\u7f6e\u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\u3002 FailedThresholdCallback \u00b6 \u9ed8\u8ba4\u503c\uff1aNULL \u7c7b\u578b\uff1a Action<FailedInfo> \u91cd\u8bd5\u9608\u503c\u7684\u5931\u8d25\u56de\u8c03\u3002\u5f53\u91cd\u8bd5\u8fbe\u5230 FailedRetryCount \u8bbe\u7f6e\u7684\u503c\u7684\u65f6\u5019\uff0c\u5c06\u8c03\u7528\u6b64 Action \u56de\u8c03\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u56de\u8c03\u6765\u63a5\u6536\u5931\u8d25\u8fbe\u5230\u6700\u5927\u7684\u901a\u77e5\uff0c\u4ee5\u505a\u51fa\u4eba\u5de5\u4ecb\u5165\u3002\u4f8b\u5982\u53d1\u9001\u90ae\u4ef6\u6216\u8005\u77ed\u4fe1\u3002 SucceedMessageExpiredAfter \u00b6 \u9ed8\u8ba4\u503c\uff1a24*3600 \u79d2\uff081\u5929\u540e\uff09 \u6210\u529f\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\u3002 \u5f53\u6d88\u606f\u53d1\u9001\u6216\u8005\u6d88\u8d39\u6210\u529f\u65f6\u5019\uff0c\u5728\u65f6\u95f4\u8fbe\u5230 SucceedMessageExpiredAfter \u79d2\u65f6\u5019\u5c06\u4f1a\u4ece Persistent \u4e2d\u5220\u9664\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u503c\u6765\u8bbe\u7f6e\u8fc7\u671f\u7684\u65f6\u95f4\u3002 FailedMessageExpiredAfter \u00b6 \u9ed8\u8ba4\u503c\uff1a15*24*3600 \u79d2\uff0815\u5929\u540e\uff09 \u5931\u8d25\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\u3002 \u5f53\u6d88\u606f\u53d1\u9001\u6216\u8005\u6d88\u8d39\u5931\u8d25\u65f6\u5019\uff0c\u5728\u65f6\u95f4\u8fbe\u5230 FailedMessageExpiredAfter \u79d2\u65f6\u5019\u5c06\u4f1a\u4ece Persistent \u4e2d\u5220\u9664\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u503c\u6765\u8bbe\u7f6e\u8fc7\u671f\u7684\u65f6\u95f4\u3002 UseDispatchingPerGroup \u00b6 \u9ed8\u8ba4\u503c: false \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCAP\u4f1a\u5c06\u6240\u6709\u6d88\u8d39\u8005\u7ec4\u7684\u6d88\u606f\u90fd\u5148\u653e\u7f6e\u5230\u5185\u5b58\u540c\u4e00\u4e2aChannel\u4e2d\uff0c\u7136\u540e\u7ebf\u6027\u5904\u7406\u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a true\uff0c\u5219\u6bcf\u4e2a\u6d88\u8d39\u8005\u7ec4\u90fd\u4f1a\u6839\u636e ConsumerThreadCount \u8bbe\u7f6e\u7684\u503c\u521b\u5efa\u5355\u72ec\u7684\u7ebf\u7a0b\u8fdb\u884c\u5904\u7406\u3002 \u5982\u679c\u6b64\u8bbe\u7f6e\u9879\u76ee\u4e3a true\uff0c\u5219 EnableConsumerPrefetch \u8bbe\u7f6e\u9879\u65e0\u6548 EnableConsumerPrefetch \u00b6 \u9ed8\u8ba4\u503c: false\uff0c \u5728 7.0 \u7248\u672c\u4e4b\u524d\u9ed8\u8ba4\u884c\u4e3a true \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCAP\u53ea\u4f1a\u4ece\u6d88\u606f\u961f\u5217\u8bfb\u53d6\u4e00\u6761\uff0c\u7136\u540e\u6267\u884c\u8ba2\u9605\u65b9\u6cd5\uff0c\u6267\u884c\u5b8c\u6210\u540e\u624d\u4f1a\u8bfb\u53d6\u4e0b\u4e00\u6761\u6765\u6267\u884c. \u5982\u679c\u8bbe\u7f6e\u4e3a true, \u6d88\u8d39\u7aef\u4f1a\u9884\u53d6\u4e00\u90e8\u5206\u6d88\u606f\u5230\u5185\u5b58\u961f\u5217\uff0c\u7136\u540e\u518d\u5206\u53d1\u7ed9\u8c03\u5ea6\u5668\u6267\u884c\u3002 \u6ce8\u610f\u4e8b\u9879 \u8bbe\u7f6e\u4e3a true \u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u95ee\u9898\uff0c\u5f53\u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u8fc7\u6162\u8017\u65f6\u592a\u4e45\u65f6\uff0c\u4f1a\u5bfc\u81f4\u91cd\u8bd5\u7ebf\u7a0b\u62fe\u53d6\u5230\u8fd8\u672a\u6267\u884c\u7684\u7684\u6d88\u606f\u3002\u91cd\u8bd5\u7ebf\u7a0b\u9ed8\u8ba4\u62fe\u53d64\u5206\u949f\u524d\u7684\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6d88\u8d39\u7aef\u79ef\u538b\u4e86\u8d85\u8fc74\u5206\u949f\u7684\u6d88\u606f\u5c31\u4f1a\u88ab\u91cd\u65b0\u62fe\u53d6\u5230\u518d\u6b21\u6267\u884c","title":"\u914d\u7f6e"},{"location":"user-guide/zh/cap/configuration/#_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f60\u5728\u5411IoC\u5bb9\u5668\u4e2d\u6ce8\u518cCAP\u670d\u52a1\u7684\u65f6\u5019\u6307\u5b9a\u914d\u7f6e\u3002 services . AddCap ( config => { // config.XXX }); \u5176\u4e2d services \u4ee3\u8868\u7684\u662f IServiceCollection \u63a5\u53e3\u5bf9\u8c61\uff0c\u5b83\u4f4d\u4e8e Microsoft.Extensions.DependencyInjection \u4e0b\u9762\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528\u5fae\u8f6f\u7684IoC\u5bb9\u5668\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u67e5\u770b ASP.NET Core \u8fd9\u91cc\u7684\u6587\u6863 \u6765\u4e86\u89e3\u5982\u4f55\u66ff\u6362\u9ed8\u8ba4\u7684\u5bb9\u5668\u5b9e\u73b0\u3002","title":"\u914d\u7f6e"},{"location":"user-guide/zh/cap/configuration/#_2","text":"\u6700\u7b80\u5355\u7684\u56de\u7b54\u5c31\u662f\uff0c\u81f3\u5c11\u4f60\u8981\u914d\u7f6e\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u548c\u4e00\u4e2a\u4e8b\u4ef6\u5b58\u50a8\uff0c\u5982\u679c\u4f60\u60f3\u5feb\u901f\u5f00\u59cb\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u914d\u7f6e\uff1a services . AddCap ( config => { config . UseInMemoryMessageQueue (); config . UseInMemoryStorage (); }); \u6709\u5173\u5177\u4f53\u7684\u6d88\u606f\u961f\u5217\u7684\u914d\u7f6e\u548c\u5b58\u50a8\u7684\u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b Transports \u7ae0\u8282\u548c Persistent \u7ae0\u8282\u4e2d\u5177\u4f53\u7ec4\u4ef6\u63d0\u4f9b\u7684\u914d\u7f6e\u9879\u3002","title":"\u4ec0\u4e48\u662f\u6700\u4f4e\u914d\u7f6e\uff1f"},{"location":"user-guide/zh/cap/configuration/#cap","text":"\u5728 AddCap \u4e2d CapOptions \u5bf9\u8c61\u662f\u7528\u6765\u5b58\u50a8\u914d\u7f6e\u76f8\u5173\u4fe1\u606f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4eec\u90fd\u5177\u6709\u4e00\u4e9b\u9ed8\u8ba4\u503c\uff0c\u6709\u4e9b\u65f6\u5019\u4f60\u53ef\u80fd\u9700\u8981\u81ea\u5b9a\u4e49\u3002","title":"CAP \u4e2d\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e"},{"location":"user-guide/zh/cap/configuration/#defaultgroupname","text":"\u9ed8\u8ba4\u503c\uff1acap.queue.{\u7a0b\u5e8f\u96c6\u540d\u79f0} \u9ed8\u8ba4\u7684\u6d88\u8d39\u8005\u7ec4\u7684\u540d\u5b57\uff0c\u5728\u4e0d\u540c\u7684 Transports \u4e2d\u5bf9\u5e94\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6b64\u503c\u6765\u81ea\u5b9a\u4e49\u4e0d\u540c Transports \u4e2d\u7684\u540d\u5b57\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u770b\u3002 Mapping \u5728 RabbitMQ \u4e2d\u6620\u5c04\u5230 Queue Names \u3002 \u5728 Apache Kafka \u4e2d\u6620\u5c04\u5230 Consumer Group Id \u3002 \u5728 Azure Service Bus \u4e2d\u6620\u5c04\u5230 Subscription Name\u3002 \u5728 NATS \u4e2d\u6620\u5c04\u5230 Queue Group Name . \u5728 Redis Streams \u4e2d\u6620\u5c04\u5230 Consumer Group .","title":"DefaultGroupName"},{"location":"user-guide/zh/cap/configuration/#groupnameprefix","text":"\u9ed8\u8ba4\u503c\uff1aNull \u4e3a\u8ba2\u9605 Group \u7edf\u4e00\u6dfb\u52a0\u524d\u7f00\u3002 https://github.com/dotnetcore/CAP/pull/780","title":"GroupNamePrefix"},{"location":"user-guide/zh/cap/configuration/#topicnameprefix","text":"\u9ed8\u8ba4\u503c\uff1a Null \u4e3a Topic \u7edf\u4e00\u6dfb\u52a0\u524d\u7f00\u3002 https://github.com/dotnetcore/CAP/pull/780","title":"TopicNamePrefix"},{"location":"user-guide/zh/cap/configuration/#version","text":"\u9ed8\u8ba4\u503c\uff1av1 \u8fd9\u662f\u5728CAP v2.4 \u7248\u672c\u4e2d\u5f15\u5165\u7684\u65b0\u914d\u7f6e\u9879\uff0c\u7528\u4e8e\u7ed9\u6d88\u606f\u6307\u5b9a\u7248\u672c\u6765\u9694\u79bb\u4e0d\u540c\u7248\u672c\u670d\u52a1\u7684\u6d88\u606f\uff0c\u5e38\u7528\u4e8eA/B\u6d4b\u8bd5\u6216\u8005\u591a\u670d\u52a1\u7248\u672c\u7684\u573a\u666f\u3002\u4ee5\u4e0b\u662f\u5176\u5e94\u7528\u573a\u666f\uff1a \u4e1a\u52a1\u5feb\u901f\u8fed\u4ee3\uff0c\u9700\u8981\u5411\u524d\u517c\u5bb9 \u7531\u4e8e\u4e1a\u52a1\u7684\u5feb\u901f\u8fed\u4ee3\uff0c\u5728\u5404\u4e2a\u670d\u52a1\u96c6\u6210\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6d88\u606f\u7684\u6570\u636e\u7ed3\u6784\u5e76\u4e0d\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u6709\u4e9b\u65f6\u5019\u6211\u4eec\u4e3a\u4e86\u9002\u5e94\u65b0\u5f15\u5165\u7684\u9700\u6c42\uff0c\u4f1a\u6dfb\u52a0\u6216\u8005\u4fee\u6539\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u3002\u5982\u679c\u4f60\u662f\u4e00\u5957\u5168\u65b0\u7684\u7cfb\u7edf\u8fd9\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u4f60\u7684\u7cfb\u7edf\u5df2\u7ecf\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e86\u5e76\u4e14\u6b63\u5728\u670d\u52a1\u5ba2\u6237\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u65b0\u7684\u529f\u80fd\u5728\u4e0a\u7ebf\u7684\u65f6\u5019\u548c\u65e7\u7684\u6570\u636e\u7ed3\u6784\u53d1\u751f\u4e0d\u517c\u5bb9\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6539\u53d8\u53ef\u80fd\u4f1a\u5bfc\u81f4\u51fa\u73b0\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u8981\u60f3\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u80fd\u628a\u6d88\u606f\u961f\u5217\u548c\u6301\u4e45\u5316\u7684\u6d88\u606f\u5168\u90e8\u6e05\u7a7a\uff0c\u7136\u540e\u624d\u80fd\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u5bf9\u4e8e\u751f\u4ea7\u73af\u5883\u6765\u8bf4\u663e\u7136\u662f\u81f4\u547d\u7684\u3002 \u591a\u4e2a\u7248\u672c\u7684\u670d\u52a1\u7aef \u6709\u4e9b\u65f6\u5019\uff0cApp\u7684\u670d\u52a1\u7aef\u9700\u8981\u63d0\u4f9b\u591a\u5957\u63a5\u53e3\uff0c\u6765\u652f\u6301\u4e0d\u540c\u7248\u672c\u7684App\uff0c\u8fd9\u4e9b\u4e0d\u540c\u7248\u672c\u7684App\u76f8\u540c\u7684\u63a5\u53e3\u548c\u670d\u52a1\u7aef\u4ea4\u4e92\u7684\u6570\u636e\u7ed3\u6784\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u901a\u5e38\u60c5\u51b5\u4e0b\u670d\u52a1\u7aef\u63d0\u4f9b\u4e0d\u7528\u7684\u8def\u7531\u5730\u5740\u6765\u9002\u914d\u4e0d\u540c\u7248\u672c\u7684App\u8c03\u7528\u3002 \u4e0d\u540c\u5b9e\u4f8b\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6301\u4e45\u5316\u8868/\u96c6\u5408 \u5e0c\u671b\u591a\u4e2a\u4e0d\u540c\u5b9e\u4f8b\u7684\u7a0b\u5e8f\u53ef\u4ee5\u516c\u7528\u76f8\u540c\u7684\u6570\u636e\u5e93\uff0c\u5728 2.4 \u4e4b\u524d\u7684\u7248\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e0d\u540c\u7684\u8868\u540d\u6765\u9694\u79bb\u4e0d\u540c\u5b9e\u4f8b\u7684\u6570\u636e\u5e93\u8868\uff0c\u5373\u5728CAP\u914d\u7f6e\u7684\u65f6\u5019\u901a\u8fc7\u914d\u7f6e\u4e0d\u540c\u7684\u8868\u540d\u524d\u7f00\u6765\u5b9e\u73b0\u3002 \u67e5\u770b\u535a\u5ba2\u6765\u4e86\u89e3\u66f4\u591a\u5173\u4e8e Version \u7684\u4fe1\u606f\uff1a https://www.cnblogs.com/savorboard/p/cap-2-4.html","title":"Version"},{"location":"user-guide/zh/cap/configuration/#failedretryinterval","text":"\u9ed8\u8ba4\u503c\uff1a60 \u79d2 \u5728\u6d88\u606f\u53d1\u9001\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u9001\u5931\u8d25\uff0cCAP\u5c06\u4f1a\u5bf9\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\uff0c\u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6e\u6bcf\u6b21\u91cd\u8bd5\u7684\u95f4\u9694\u65f6\u95f4\u3002 \u5728\u6d88\u606f\u6d88\u8d39\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6d88\u8d39\u5931\u8d25\uff0cCAP\u5c06\u4f1a\u5bf9\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u6d88\u8d39\uff0c\u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6e\u6bcf\u6b21\u91cd\u8bd5\u7684\u95f4\u9694\u65f6\u95f4\u3002 \u91cd\u8bd5 & \u95f4\u9694 \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u91cd\u8bd5\u5c06\u5728\u53d1\u9001\u548c\u6d88\u8d39\u6d88\u606f\u5931\u8d25\u7684 4\u5206\u949f\u540e \u5f00\u59cb\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u8bbe\u7f6e\u6d88\u606f\u72b6\u6001\u5ef6\u8fdf\u5bfc\u81f4\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898\u3002 \u53d1\u9001\u548c\u6d88\u8d39\u6d88\u606f\u7684\u8fc7\u7a0b\u4e2d\u5931\u8d25\u4f1a\u7acb\u5373\u91cd\u8bd5 3 \u6b21\uff0c\u5728 3 \u6b21\u4ee5\u540e\u5c06\u8fdb\u5165\u91cd\u8bd5\u8f6e\u8be2\uff0c\u6b64\u65f6 FailedRetryInterval \u914d\u7f6e\u624d\u4f1a\u751f\u6548\u3002","title":"FailedRetryInterval"},{"location":"user-guide/zh/cap/configuration/#consumerthreadcount","text":"\u9ed8\u8ba4\u503c\uff1a1 \u6d88\u8d39\u8005\u7ebf\u7a0b\u5e76\u884c\u5904\u7406\u6d88\u606f\u7684\u7ebf\u7a0b\u6570\uff0c\u5f53\u8fd9\u4e2a\u503c\u5927\u4e8e1\u65f6\uff0c\u5c06\u4e0d\u80fd\u4fdd\u8bc1\u6d88\u606f\u6267\u884c\u7684\u987a\u5e8f\u3002","title":"ConsumerThreadCount"},{"location":"user-guide/zh/cap/configuration/#collectorcleaninginterval","text":"\u9ed8\u8ba4\u503c\uff1a300 \u79d2 \u6536\u96c6\u5668\u5220\u9664\u5df2\u7ecf\u8fc7\u671f\u6d88\u606f\u7684\u65f6\u95f4\u95f4\u9694\u3002","title":"CollectorCleaningInterval"},{"location":"user-guide/zh/cap/configuration/#failedretrycount","text":"\u9ed8\u8ba4\u503c\uff1a50 \u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\u3002\u5f53\u8fbe\u5230\u6b64\u8bbe\u7f6e\u503c\u65f6\uff0c\u5c06\u4e0d\u4f1a\u518d\u7ee7\u7eed\u91cd\u8bd5\uff0c\u901a\u8fc7\u6539\u53d8\u6b64\u53c2\u6570\u6765\u8bbe\u7f6e\u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\u3002","title":"FailedRetryCount"},{"location":"user-guide/zh/cap/configuration/#failedthresholdcallback","text":"\u9ed8\u8ba4\u503c\uff1aNULL \u7c7b\u578b\uff1a Action<FailedInfo> \u91cd\u8bd5\u9608\u503c\u7684\u5931\u8d25\u56de\u8c03\u3002\u5f53\u91cd\u8bd5\u8fbe\u5230 FailedRetryCount \u8bbe\u7f6e\u7684\u503c\u7684\u65f6\u5019\uff0c\u5c06\u8c03\u7528\u6b64 Action \u56de\u8c03\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u56de\u8c03\u6765\u63a5\u6536\u5931\u8d25\u8fbe\u5230\u6700\u5927\u7684\u901a\u77e5\uff0c\u4ee5\u505a\u51fa\u4eba\u5de5\u4ecb\u5165\u3002\u4f8b\u5982\u53d1\u9001\u90ae\u4ef6\u6216\u8005\u77ed\u4fe1\u3002","title":"FailedThresholdCallback"},{"location":"user-guide/zh/cap/configuration/#succeedmessageexpiredafter","text":"\u9ed8\u8ba4\u503c\uff1a24*3600 \u79d2\uff081\u5929\u540e\uff09 \u6210\u529f\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\u3002 \u5f53\u6d88\u606f\u53d1\u9001\u6216\u8005\u6d88\u8d39\u6210\u529f\u65f6\u5019\uff0c\u5728\u65f6\u95f4\u8fbe\u5230 SucceedMessageExpiredAfter \u79d2\u65f6\u5019\u5c06\u4f1a\u4ece Persistent \u4e2d\u5220\u9664\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u503c\u6765\u8bbe\u7f6e\u8fc7\u671f\u7684\u65f6\u95f4\u3002","title":"SucceedMessageExpiredAfter"},{"location":"user-guide/zh/cap/configuration/#failedmessageexpiredafter","text":"\u9ed8\u8ba4\u503c\uff1a15*24*3600 \u79d2\uff0815\u5929\u540e\uff09 \u5931\u8d25\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\u3002 \u5f53\u6d88\u606f\u53d1\u9001\u6216\u8005\u6d88\u8d39\u5931\u8d25\u65f6\u5019\uff0c\u5728\u65f6\u95f4\u8fbe\u5230 FailedMessageExpiredAfter \u79d2\u65f6\u5019\u5c06\u4f1a\u4ece Persistent \u4e2d\u5220\u9664\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6b64\u503c\u6765\u8bbe\u7f6e\u8fc7\u671f\u7684\u65f6\u95f4\u3002","title":"FailedMessageExpiredAfter"},{"location":"user-guide/zh/cap/configuration/#usedispatchingpergroup","text":"\u9ed8\u8ba4\u503c: false \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCAP\u4f1a\u5c06\u6240\u6709\u6d88\u8d39\u8005\u7ec4\u7684\u6d88\u606f\u90fd\u5148\u653e\u7f6e\u5230\u5185\u5b58\u540c\u4e00\u4e2aChannel\u4e2d\uff0c\u7136\u540e\u7ebf\u6027\u5904\u7406\u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a true\uff0c\u5219\u6bcf\u4e2a\u6d88\u8d39\u8005\u7ec4\u90fd\u4f1a\u6839\u636e ConsumerThreadCount \u8bbe\u7f6e\u7684\u503c\u521b\u5efa\u5355\u72ec\u7684\u7ebf\u7a0b\u8fdb\u884c\u5904\u7406\u3002 \u5982\u679c\u6b64\u8bbe\u7f6e\u9879\u76ee\u4e3a true\uff0c\u5219 EnableConsumerPrefetch \u8bbe\u7f6e\u9879\u65e0\u6548","title":"UseDispatchingPerGroup"},{"location":"user-guide/zh/cap/configuration/#enableconsumerprefetch","text":"\u9ed8\u8ba4\u503c: false\uff0c \u5728 7.0 \u7248\u672c\u4e4b\u524d\u9ed8\u8ba4\u884c\u4e3a true \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cCAP\u53ea\u4f1a\u4ece\u6d88\u606f\u961f\u5217\u8bfb\u53d6\u4e00\u6761\uff0c\u7136\u540e\u6267\u884c\u8ba2\u9605\u65b9\u6cd5\uff0c\u6267\u884c\u5b8c\u6210\u540e\u624d\u4f1a\u8bfb\u53d6\u4e0b\u4e00\u6761\u6765\u6267\u884c. \u5982\u679c\u8bbe\u7f6e\u4e3a true, \u6d88\u8d39\u7aef\u4f1a\u9884\u53d6\u4e00\u90e8\u5206\u6d88\u606f\u5230\u5185\u5b58\u961f\u5217\uff0c\u7136\u540e\u518d\u5206\u53d1\u7ed9\u8c03\u5ea6\u5668\u6267\u884c\u3002 \u6ce8\u610f\u4e8b\u9879 \u8bbe\u7f6e\u4e3a true \u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e9b\u95ee\u9898\uff0c\u5f53\u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u8fc7\u6162\u8017\u65f6\u592a\u4e45\u65f6\uff0c\u4f1a\u5bfc\u81f4\u91cd\u8bd5\u7ebf\u7a0b\u62fe\u53d6\u5230\u8fd8\u672a\u6267\u884c\u7684\u7684\u6d88\u606f\u3002\u91cd\u8bd5\u7ebf\u7a0b\u9ed8\u8ba4\u62fe\u53d64\u5206\u949f\u524d\u7684\u6d88\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6d88\u8d39\u7aef\u79ef\u538b\u4e86\u8d85\u8fc74\u5206\u949f\u7684\u6d88\u606f\u5c31\u4f1a\u88ab\u91cd\u65b0\u62fe\u53d6\u5230\u518d\u6b21\u6267\u884c","title":"EnableConsumerPrefetch"},{"location":"user-guide/zh/cap/filter/","text":"\u8fc7\u6ee4\u5668 \u00b6 \u5728 5.1.0 \u7248\u672c\u4e2d\uff0c\u6211\u4eec\u652f\u6301\u4e86\u5728\u8ba2\u9605\u8005\u4e2d\u6dfb\u52a0\u8fc7\u6ee4\u5668\u3002\u5728\u8fc7\u53bb\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9\u7b2c\u4e09\u65b9 AOP \u7ec4\u4ef6\u63d0\u4f9b\u652f\u6301\u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f8b\u5982\u6211\u4eec\u5199\u4e86\u4e00\u7bc7 \u535a\u5ba2 \u6765\u63cf\u8ff0\u5982\u4f55\u5728 CAP 5.0 \u7248\u672c\u4e2d\u4f7f\u7528 Castle \u6765\u5bf9\u8ba2\u9605\u65b9\u6cd5\u8fdb\u884c\u62e6\u622a\uff0c\u4f46\u4e86\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u4e00\u4e9b\u7f3a\u70b9\uff0c\u4f8b\u5982\u65e0\u6cd5\u65b9\u4fbf\u7684\u5728\u4ee3\u7406\u7c7b\u4e2d\u8fdb\u884c\u6784\u9020\u51fd\u6570\u6ce8\u5165\u4ee5\u53ca\u65b9\u6cd5\u9700\u8981\u8bbe\u5b9a\u4e3a virtual \u53e6\u5916\u8fd8\u6709\u62e6\u622a\u5668\u751f\u547d\u5468\u671f\u63a7\u5236\u7b49\u95ee\u9898\u3002 \u6240\u4ee5\u6211\u4eec\u5f15\u5165\u4e86\u5bf9\u8ba2\u9605\u8005\u8fc7\u6ee4\u5668\u7684\u652f\u6301\uff0c\u4ee5\u4f7f\u5728\u67d0\u4e9b\u573a\u666f\uff08\u5982\u4e8b\u52a1\u5904\u7406\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7b49\uff09\u4e2d\u53d8\u5f97\u5bb9\u6613\u3002 \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668 \u00b6 \u6dfb\u52a0\u8fc7\u6ee4\u5668 \u00b6 \u521b\u5efa\u4e00\u4e2a\u8fc7\u6ee4\u5668\u7c7b\uff0c\u5e76\u7ee7\u627f SubscribeFilter \u62bd\u8c61\u7c7b\u3002 public class MyCapFilter : SubscribeFilter { public override Task OnSubscribeExecutingAsync ( ExecutingContext context ) { // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u524d } public override Task OnSubscribeExecutedAsync ( ExecutedContext context ) { // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u540e } public override Task OnSubscribeExceptionAsync ( ExceptionContext context ) { // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u5f02\u5e38 } } \u5728\u4e00\u4e9b\u573a\u666f\u4e2d\uff0c\u5982\u679c\u60f3\u7ec8\u6b62\u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\uff0c\u53ef\u4ee5\u5728 OnSubscribeExecutingAsync \u4e2d\u629b\u51fa\u5f02\u5e38\uff0c\u5e76\u4e14\u5728 OnSubscribeExceptionAsync \u4e2d\u9009\u62e9\u5ffd\u7565\u8be5\u5f02\u5e38\u3002 \u901a\u8fc7\u5728 ExceptionContext \u4e2d\u8bbe\u7f6e context.ExceptionHandled = true \u6765\u5ffd\u7565\u5f02\u5e38\u3002 public override Task OnSubscribeExceptionAsync ( ExceptionContext context ) { context . ExceptionHandled = true ; } \u914d\u7f6e\u8fc7\u6ee4\u5668 \u00b6 services . AddCap ( opt => { // *** }. AddSubscribeFilter < MyCapFilter >(); \u76ee\u524d\uff0c \u6211\u4eec\u8fd8\u4e0d\u652f\u6301\u540c\u65f6\u6dfb\u52a0\u591a\u4e2a\u8fc7\u6ee4\u5668\u3002","title":"\u8fc7\u6ee4\u5668"},{"location":"user-guide/zh/cap/filter/#_1","text":"\u5728 5.1.0 \u7248\u672c\u4e2d\uff0c\u6211\u4eec\u652f\u6301\u4e86\u5728\u8ba2\u9605\u8005\u4e2d\u6dfb\u52a0\u8fc7\u6ee4\u5668\u3002\u5728\u8fc7\u53bb\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9\u7b2c\u4e09\u65b9 AOP \u7ec4\u4ef6\u63d0\u4f9b\u652f\u6301\u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f8b\u5982\u6211\u4eec\u5199\u4e86\u4e00\u7bc7 \u535a\u5ba2 \u6765\u63cf\u8ff0\u5982\u4f55\u5728 CAP 5.0 \u7248\u672c\u4e2d\u4f7f\u7528 Castle \u6765\u5bf9\u8ba2\u9605\u65b9\u6cd5\u8fdb\u884c\u62e6\u622a\uff0c\u4f46\u4e86\u8fd9\u79cd\u65b9\u5f0f\u5b58\u5728\u4e00\u4e9b\u7f3a\u70b9\uff0c\u4f8b\u5982\u65e0\u6cd5\u65b9\u4fbf\u7684\u5728\u4ee3\u7406\u7c7b\u4e2d\u8fdb\u884c\u6784\u9020\u51fd\u6570\u6ce8\u5165\u4ee5\u53ca\u65b9\u6cd5\u9700\u8981\u8bbe\u5b9a\u4e3a virtual \u53e6\u5916\u8fd8\u6709\u62e6\u622a\u5668\u751f\u547d\u5468\u671f\u63a7\u5236\u7b49\u95ee\u9898\u3002 \u6240\u4ee5\u6211\u4eec\u5f15\u5165\u4e86\u5bf9\u8ba2\u9605\u8005\u8fc7\u6ee4\u5668\u7684\u652f\u6301\uff0c\u4ee5\u4f7f\u5728\u67d0\u4e9b\u573a\u666f\uff08\u5982\u4e8b\u52a1\u5904\u7406\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7b49\uff09\u4e2d\u53d8\u5f97\u5bb9\u6613\u3002","title":"\u8fc7\u6ee4\u5668"},{"location":"user-guide/zh/cap/filter/#_2","text":"","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668"},{"location":"user-guide/zh/cap/filter/#_3","text":"\u521b\u5efa\u4e00\u4e2a\u8fc7\u6ee4\u5668\u7c7b\uff0c\u5e76\u7ee7\u627f SubscribeFilter \u62bd\u8c61\u7c7b\u3002 public class MyCapFilter : SubscribeFilter { public override Task OnSubscribeExecutingAsync ( ExecutingContext context ) { // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u524d } public override Task OnSubscribeExecutedAsync ( ExecutedContext context ) { // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u540e } public override Task OnSubscribeExceptionAsync ( ExceptionContext context ) { // \u8ba2\u9605\u65b9\u6cd5\u6267\u884c\u5f02\u5e38 } } \u5728\u4e00\u4e9b\u573a\u666f\u4e2d\uff0c\u5982\u679c\u60f3\u7ec8\u6b62\u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\uff0c\u53ef\u4ee5\u5728 OnSubscribeExecutingAsync \u4e2d\u629b\u51fa\u5f02\u5e38\uff0c\u5e76\u4e14\u5728 OnSubscribeExceptionAsync \u4e2d\u9009\u62e9\u5ffd\u7565\u8be5\u5f02\u5e38\u3002 \u901a\u8fc7\u5728 ExceptionContext \u4e2d\u8bbe\u7f6e context.ExceptionHandled = true \u6765\u5ffd\u7565\u5f02\u5e38\u3002 public override Task OnSubscribeExceptionAsync ( ExceptionContext context ) { context . ExceptionHandled = true ; }","title":"\u6dfb\u52a0\u8fc7\u6ee4\u5668"},{"location":"user-guide/zh/cap/filter/#_4","text":"services . AddCap ( opt => { // *** }. AddSubscribeFilter < MyCapFilter >(); \u76ee\u524d\uff0c \u6211\u4eec\u8fd8\u4e0d\u652f\u6301\u540c\u65f6\u6dfb\u52a0\u591a\u4e2a\u8fc7\u6ee4\u5668\u3002","title":"\u914d\u7f6e\u8fc7\u6ee4\u5668"},{"location":"user-guide/zh/cap/idempotence/","text":"\u5e42\u7b49\u6027 \u00b6 \u5e42\u7b49\u6027\uff08\u4f60\u53ef\u4ee5\u5728 Wikipedia \u8bfb\u5230\u5173\u4e8e\u5e42\u7b49\u6027\u7684\u5b9a\u4e49\uff09\uff0c\u5f53\u6211\u4eec\u8c08\u8bba\u5e42\u7b49\u65f6\uff0c\u4e00\u822c\u662f\u6307\u53ef\u4ee5\u91cd\u590d\u5904\u7406\u4f20\u9012\u7684\u6d88\u606f\uff0c\u800c\u4e0d\u4f1a\u4ea7\u751f\u610f\u5916\u7684\u7ed3\u679c\u3002 \u4ea4\u4ed8\u4fdd\u8bc1 \u00b6 \u5728\u8bf4\u5e42\u7b49\u6027\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u8bf4\u4e0b\u5173\u4e8e\u6d88\u8d39\u7aef\u7684\u6d88\u606f\u4ea4\u4ed8\u3002 \u7531\u4e8eCAP\u4e0d\u662f\u4f7f\u7528\u7684 MS DTC \u6216\u5176\u4ed6\u7c7b\u578b\u76842PC\u5206\u5e03\u5f0f\u4e8b\u52a1\u673a\u5236\uff0c\u6240\u4ee5\u5b58\u5728\u81f3\u5c11\u6d88\u606f\u4e25\u683c\u4ea4\u4ed8\u4e00\u6b21\u7684\u95ee\u9898\uff0c\u5177\u4f53\u7684\u8bf4\u5728\u57fa\u4e8e\u6d88\u606f\u7684\u7cfb\u7edf\u4e2d\uff0c\u5b58\u5728\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\uff1a Exactly Once(*) \uff08\u4ec5\u6709\u4e00\u6b21\uff09 At Most Once \uff08\u6700\u591a\u4e00\u6b21\uff09 At Least Once \uff08\u6700\u5c11\u4e00\u6b21\uff09 \u5e26 * \u53f7\u8868\u793a\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u5f88\u96be\u8fbe\u5230\u3002 At Most Once \u00b6 \u6700\u591a\u4e00\u6b21\u4ea4\u4ed8\u4fdd\u8bc1\uff0c\u6db5\u76d6\u4e86\u4fdd\u8bc1\u4e00\u6b21\u6216\u6839\u672c\u4e0d\u63a5\u6536\u6240\u6709\u6d88\u606f\u7684\u60c5\u51b5\u3002 \u8fd9\u79cd\u7c7b\u578b\u7684\u4f20\u9012\u4fdd\u8bc1\u53ef\u80fd\u6765\u81ea\u4f60\u7684\u6d88\u606f\u7cfb\u7edf\uff0c\u4f60\u7684\u4ee3\u7801\u6309\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u5176\u64cd\u4f5c\uff1a 1. \u4ece\u961f\u5217\u79fb\u9664\u6d88\u606f 2. \u5f00\u59cb\u4e00\u4e2a\u5de5\u4f5c\u4e8b\u52a1 3. \u5904\u7406\u6d88\u606f ( \u4f60\u7684\u4ee3\u7801 ) 4. \u662f\u5426\u6210\u529f ? Yes: 1. \u63d0\u4ea4\u5de5\u4f5c\u4e8b\u52a1 No: 1. \u56de\u6eda\u5de5\u4f5c\u4e8b\u52a1 2. \u5c06\u6d88\u606f\u53d1\u56de\u5230\u961f\u5217\u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u5de5\u4f5c\u7684\u5f88\u597d\uff0c\u5de5\u4f5c\u4e8b\u52a1\u5c06\u88ab\u63d0\u4ea4\u3002 \u7136\u800c\uff0c\u6709\u4e9b\u65f6\u5019\u5e76\u4e0d\u80fd\u603b\u662f\u6210\u529f\uff0c\u6bd4\u5982\u5728 1 \u4e4b\u540e\u51fa\u73b0\u5f02\u5e38\uff0c\u6216\u8005\u662f\u4f60\u5728\u5c06\u6d88\u606f\u653e\u56de\u5230\u961f\u5217\u4e2d\u51fa\u73b0\u7f51\u7edc\u95ee\u9898\u7531\u6216\u8005\u5b95\u673a\u91cd\u542f\u7b49\u60c5\u51b5\u3002 \u4f7f\u7528\u8fd9\u4e2a\u534f\u8bae\uff0c\u4f60\u5c06\u5192\u7740\u4e22\u5931\u6d88\u606f\u7684\u98ce\u9669\uff0c\u5982\u679c\u53ef\u4ee5\u63a5\u53d7\uff0c\u90a3\u5c31\u6ca1\u6709\u5173\u7cfb\u3002 At Least Once \u00b6 \u8fd9\u4e2a\u4ea4\u4ed8\u4fdd\u8bc1\u5305\u542b\u4f60\u6536\u5230\u81f3\u5c11\u4e00\u6b21\u7684\u6d88\u606f\uff0c\u5f53\u51fa\u73b0\u6545\u969c\u65f6\uff0c\u53ef\u80fd\u4f1a\u6536\u5230\u591a\u6b21\u6d88\u606f\u3002 \u5b83\u9700\u8981\u7a0d\u5fae\u6539\u53d8\u6211\u4eec\u6267\u884c\u6b65\u9aa4\u7684\u987a\u5e8f\uff0c\u5b83\u8981\u6c42\u6d88\u606f\u961f\u5217\u7cfb\u7edf\u652f\u6301\u4e8b\u52a1\u6216ACK\u673a\u5236\uff0c\u6bd4\u5982\u4f20\u7edf\u7684 begin-commit-rollback \u534f\u8bae\uff08MSMQ\u662f\u8fd9\u6837\uff09\uff0c\u6216\u8005\u662f receive-ack-nack \u534f\u8bae\uff08RabbitMQ\uff0cAzure Service Bus\u7b49\u662f\u8fd9\u6837\u7684\uff09\u3002 \u5927\u81f4\u6b65\u9aa4\u5982\u4e0b: 1. \u62a2\u5360\u961f\u5217\u4e2d\u7684\u6d88\u606f\u3002 2. \u5f00\u59cb\u4e00\u4e2a\u5de5\u4f5c\u4e8b\u52a1 3. \u5904\u7406\u6d88\u606f ( \u4f60\u7684\u4ee3\u7801 ) 4. \u662f\u5426\u6210\u529f ? Yes: 1. \u63d0\u4ea4\u5de5\u4f5c\u4e8b\u52a1 2. \u4ece\u961f\u5217\u5220\u9664\u6d88\u606f No: 1. \u56de\u6eda\u5de5\u4f5c\u4e8b\u52a1 2. \u4ece\u961f\u5217\u91ca\u653e\u62a2\u5360\u7684\u6d88\u606f \u5f53\u51fa\u73b0\u5931\u8d25\u6216\u8005\u62a2\u5360\u6d88\u606f\u8d85\u65f6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u603b\u662f\u80fd\u591f\u518d\u6b21\u63a5\u6536\u5230\u6d88\u606f\u4ee5\u4fdd\u8bc1\u6211\u4eec\u5de5\u4f5c\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\u3002 \u4ec0\u4e48\u662f \u201c\u5de5\u4f5c\u4e8b\u52a1\u201d ? \u00b6 \u4e0a\u9762\u6240\u8bf4\u7684\u201c\u5de5\u4f5c\u4e8b\u52a1\u201d\u5e76\u4e0d\u662f\u7279\u6307\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u7684\u4e8b\u52a1\uff0c\u8fd9\u91cc\u7684\u5de5\u4f5c\u4e8b\u52a1\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6267\u884c\u4ee3\u7801\u7684\u539f\u5b50\u6027\u3002 \u6bd4\u5982\u5b83\u53ef\u4ee5\u662f\u4f20\u7edf\u7684RDMS\u4e8b\u52a1\uff0c\u4e5f\u6216\u8005\u662f MongoDB \u4e8b\u52a1\u6216\u8005\u662f\u4e00\u4e2a\u4ea4\u6613\u7b49\u3002 \u5728\u8fd9\u91cc\u5b83\u4ee3\u8868\u4e00\u4e2a\u6267\u884c\u5355\u5143\uff0c\u8fd9\u4e2a\u6267\u884c\u5355\u5143\u662f\u4e00\u4e2a\u6982\u5ff5\u6027\u7684\u4e8b\u5b9e\u4ee5\u652f\u6301\u524d\u9762\u63d0\u5230\u7684\u4ec5\u4ea4\u4ed8\u4e00\u6b21\u7684\u8fd9\u79cd\u95ee\u9898\u3002 \u901a\u5e38\uff0c\u4e0d\u53ef\u80fd\u505a\u5230\u6d88\u606f\u7684\u4e8b\u52a1\u548c\u5de5\u4f5c\u4e8b\u52a1\u6765\u5f62\u6210\u539f\u5b50\u6027\u8fdb\u884c\u63d0\u4ea4\u6216\u8005\u56de\u6eda\u3002 CAP \u4e2d\u7684\u5e42\u7b49\u6027 \u00b6 \u5728CAP\u4e2d\uff0c\u6211\u4eec\u91c7\u7528\u7684\u4ea4\u4ed8\u4fdd\u8bc1\u4e3a At Least Once\u3002 \u7531\u4e8e\u6211\u4eec\u5177\u6709\u4e34\u65f6\u5b58\u50a8\u4ecb\u8d28\uff08\u6570\u636e\u5e93\u8868\uff09\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u505a\u5230 At Most Once, \u4f46\u662f\u4e3a\u4e86\u4e25\u683c\u4fdd\u8bc1\u6d88\u606f\u4e0d\u4f1a\u4e22\u5931\uff0c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9b\u76f8\u5173\u529f\u80fd\u6216\u914d\u7f6e\u3002 \u4e3a\u4ec0\u4e48\u6ca1\u6709\u5b9e\u73b0\u5e42\u7b49\uff1f \u00b6 1\u3001\u6d88\u606f\u5199\u5165\u6210\u529f\u4e86\uff0c\u4f46\u662f\u6b64\u65f6\u6267\u884cConsumer\u65b9\u6cd5\u5931\u8d25\u4e86 \u6267\u884cConsumer\u65b9\u6cd5\u5931\u8d25\u7684\u539f\u56e0\u6709\u975e\u5e38\u591a\uff0c\u6211\u5982\u679c\u4e0d\u77e5\u9053\u5177\u4f53\u7684\u573a\u666f\u76f2\u76ee\u8fdb\u884c\u91cd\u8bd5\u6216\u8005\u4e0d\u8fdb\u884c\u91cd\u8bd5\u90fd\u662f\u4e0d\u6b63\u786e\u7684\u9009\u62e9\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5047\u5982\u6d88\u8d39\u8005\u4e3a\u6263\u6b3e\u670d\u52a1\uff0c\u5982\u679c\u662f\u6267\u884c\u6263\u6b3e\u6210\u529f\u4e86\uff0c\u4f46\u662f\u5728\u5199\u6263\u6b3e\u65e5\u5fd7\u7684\u65f6\u5019\u5931\u8d25\u4e86\uff0c\u6b64\u65f6CAP\u4f1a\u5224\u65ad\u4e3a\u6d88\u8d39\u8005\u6267\u884c\u5931\u8d25\uff0c\u8fdb\u884c\u91cd\u8bd5\u3002\u5982\u679c\u5ba2\u6237\u7aef\u81ea\u5df1\u6ca1\u6709\u4fdd\u8bc1\u5e42\u7b49\u6027\uff0c\u6846\u67b6\u5bf9\u5176\u8fdb\u884c\u91cd\u8bd5\uff0c\u8fd9\u91cc\u52bf\u5fc5\u4f1a\u9020\u6210\u591a\u6b21\u6263\u6b3e\u51fa\u73b0\u4e25\u91cd\u540e\u679c\u3002 2\u3001\u6267\u884cConsumer\u65b9\u6cd5\u6210\u529f\u4e86\uff0c\u4f46\u662f\u53c8\u6536\u5230\u4e86\u540c\u6837\u7684\u6d88\u606f \u6b64\u5904\u573a\u666f\u4e5f\u662f\u53ef\u80fd\u5b58\u5728\u7684\uff0c\u5047\u5982\u5f00\u59cb\u7684\u65f6\u5019Consumer\u5df2\u7ecf\u6267\u884c\u6210\u529f\u4e86\uff0c\u4f46\u662f\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u5982 Broker \u5b95\u673a\u6062\u590d\u7b49\uff0c\u53c8\u6536\u5230\u4e86\u76f8\u540c\u7684\u6d88\u606f\uff0cCAP \u5728\u6536\u5230Broker\u6d88\u606f\u540e\u4f1a\u8ba4\u4e3a\u8fd9\u4e2a\u662f\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\uff0c\u4f1a\u5bf9 Consumer\u518d\u6b21\u6267\u884c\uff0c\u7531\u4e8e\u662f\u65b0\u6d88\u606f\uff0c\u6b64\u65f6 CAP \u4e5f\u662f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49\u7684\u3002 3\u3001\u76ee\u524d\u7684\u6570\u636e\u5b58\u50a8\u6a21\u5f0f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49 \u7531\u4e8eCAP\u5b58\u6d88\u606f\u7684\u8868\u5bf9\u4e8e\u6210\u529f\u6d88\u8d39\u7684\u6d88\u606f\u4f1a\u4e8e1\u4e2a\u5c0f\u65f6\u540e\u5220\u9664\uff0c\u6240\u4ee5\u5982\u679c\u5bf9\u4e8e\u4e00\u4e9b\u5386\u53f2\u6027\u6d88\u606f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49\u64cd\u4f5c\u3002 \u5386\u53f2\u6027\u6307\u7684\u662f\uff0c\u5047\u5982 Broker\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u7ef4\u62a4\u4e86\u6216\u8005\u662f\u4eba\u5de5\u5904\u7406\u7684\u4e00\u4e9b\u6d88\u606f\u3002 4\u3001\u4e1a\u754c\u505a\u6cd5 \u8bb8\u591a\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u6846\u67b6\u90fd\u662f\u8981\u6c42 \u7528\u6237 \u6765\u4fdd\u8bc1\u5e42\u7b49\u6027\u64cd\u4f5c\u7684\uff0c\u6bd4\u5982 ENode, RocketMQ \u7b49\u7b49... \u4ece\u5b9e\u73b0\u7684\u89d2\u5ea6\u6765\u8bf4\uff0cCAP\u53ef\u4ee5\u505a\u4e00\u4e9b\u6bd4\u8f83\u4e0d\u4e25\u683c\u7684\u5e42\u7b49\uff0c\u4f46\u662f\u4e25\u683c\u7684\u5e42\u7b49\u65e0\u6cd5\u505a\u5230\u7684\u3002 \u4ee5\u81ea\u7136\u7684\u65b9\u5f0f\u5904\u7406\u5e42\u7b49\u6d88\u606f \u00b6 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4fdd\u8bc1\u6d88\u606f\u88ab\u6267\u884c\u591a\u6b21\u800c\u4e0d\u4f1a\u4ea7\u751f\u610f\u5916\u7ed3\u679c\u662f\u5f88\u81ea\u7136\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u91c7\u7528\u64cd\u4f5c\u5bf9\u8c61\u81ea\u5e26\u7684\u4e00\u4e9b\u5e42\u7b49\u529f\u80fd\u3002\u6bd4\u5982\uff1a \u6570\u636e\u5e93\u63d0\u4f9b\u7684 INSERT ON DUPLICATE KEY UPDATE \u6216\u8005\u662f\u91c7\u53d6\u7c7b\u578b\u7684\u7a0b\u5e8f\u5224\u65ad\u884c\u4e3a\u3002 \u663e\u5f0f\u5904\u7406\u5e42\u7b49\u6d88\u606f \u00b6 \u53e6\u5916\u4e00\u79cd\u5904\u7406\u5e42\u7b49\u6027\u7684\u65b9\u5f0f\u5c31\u662f\u5728\u6d88\u606f\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u4f20\u9012ID\uff0c\u7136\u540e\u7531\u5355\u72ec\u7684\u6d88\u606f\u8ddf\u8e2a\u5668\u6765\u5904\u7406\u3002 \u6bd4\u5982\u4f60\u4f7f\u7528\u5177\u6709\u4e8b\u52a1\u6570\u636e\u5b58\u50a8\u7684 IMessageTracker \u6765\u8ddf\u8e2a\u6d88\u606fID\uff0c\u4f60\u7684\u4ee3\u7801\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a readonly IMessageTracker _messageTracker ; public SomeMessageHandler ( IMessageTracker messageTracker ) { _messageTracker = messageTracker ; } [CapSubscribe] public async Task Handle ( SomeMessage message ) { if ( await _messageTracker . HasProcessed ( message . Id )) { return ; } // do the work here // ... // remember that this message has been processed await _messageTracker . MarkAsProcessed ( messageId ); } \u81f3\u4e8e IMessageTracker \u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982Redis\u6216\u8005\u6570\u636e\u5e93\u7b49\u5b58\u50a8\u6d88\u606fId\u548c\u5bf9\u5e94\u7684\u5904\u7406\u72b6\u6001\u3002","title":"\u5e42\u7b49\u6027"},{"location":"user-guide/zh/cap/idempotence/#_1","text":"\u5e42\u7b49\u6027\uff08\u4f60\u53ef\u4ee5\u5728 Wikipedia \u8bfb\u5230\u5173\u4e8e\u5e42\u7b49\u6027\u7684\u5b9a\u4e49\uff09\uff0c\u5f53\u6211\u4eec\u8c08\u8bba\u5e42\u7b49\u65f6\uff0c\u4e00\u822c\u662f\u6307\u53ef\u4ee5\u91cd\u590d\u5904\u7406\u4f20\u9012\u7684\u6d88\u606f\uff0c\u800c\u4e0d\u4f1a\u4ea7\u751f\u610f\u5916\u7684\u7ed3\u679c\u3002","title":"\u5e42\u7b49\u6027"},{"location":"user-guide/zh/cap/idempotence/#_2","text":"\u5728\u8bf4\u5e42\u7b49\u6027\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u8bf4\u4e0b\u5173\u4e8e\u6d88\u8d39\u7aef\u7684\u6d88\u606f\u4ea4\u4ed8\u3002 \u7531\u4e8eCAP\u4e0d\u662f\u4f7f\u7528\u7684 MS DTC \u6216\u5176\u4ed6\u7c7b\u578b\u76842PC\u5206\u5e03\u5f0f\u4e8b\u52a1\u673a\u5236\uff0c\u6240\u4ee5\u5b58\u5728\u81f3\u5c11\u6d88\u606f\u4e25\u683c\u4ea4\u4ed8\u4e00\u6b21\u7684\u95ee\u9898\uff0c\u5177\u4f53\u7684\u8bf4\u5728\u57fa\u4e8e\u6d88\u606f\u7684\u7cfb\u7edf\u4e2d\uff0c\u5b58\u5728\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\uff1a Exactly Once(*) \uff08\u4ec5\u6709\u4e00\u6b21\uff09 At Most Once \uff08\u6700\u591a\u4e00\u6b21\uff09 At Least Once \uff08\u6700\u5c11\u4e00\u6b21\uff09 \u5e26 * \u53f7\u8868\u793a\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u5f88\u96be\u8fbe\u5230\u3002","title":"\u4ea4\u4ed8\u4fdd\u8bc1"},{"location":"user-guide/zh/cap/idempotence/#at-most-once","text":"\u6700\u591a\u4e00\u6b21\u4ea4\u4ed8\u4fdd\u8bc1\uff0c\u6db5\u76d6\u4e86\u4fdd\u8bc1\u4e00\u6b21\u6216\u6839\u672c\u4e0d\u63a5\u6536\u6240\u6709\u6d88\u606f\u7684\u60c5\u51b5\u3002 \u8fd9\u79cd\u7c7b\u578b\u7684\u4f20\u9012\u4fdd\u8bc1\u53ef\u80fd\u6765\u81ea\u4f60\u7684\u6d88\u606f\u7cfb\u7edf\uff0c\u4f60\u7684\u4ee3\u7801\u6309\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u5176\u64cd\u4f5c\uff1a 1. \u4ece\u961f\u5217\u79fb\u9664\u6d88\u606f 2. \u5f00\u59cb\u4e00\u4e2a\u5de5\u4f5c\u4e8b\u52a1 3. \u5904\u7406\u6d88\u606f ( \u4f60\u7684\u4ee3\u7801 ) 4. \u662f\u5426\u6210\u529f ? Yes: 1. \u63d0\u4ea4\u5de5\u4f5c\u4e8b\u52a1 No: 1. \u56de\u6eda\u5de5\u4f5c\u4e8b\u52a1 2. \u5c06\u6d88\u606f\u53d1\u56de\u5230\u961f\u5217\u3002 \u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u5de5\u4f5c\u7684\u5f88\u597d\uff0c\u5de5\u4f5c\u4e8b\u52a1\u5c06\u88ab\u63d0\u4ea4\u3002 \u7136\u800c\uff0c\u6709\u4e9b\u65f6\u5019\u5e76\u4e0d\u80fd\u603b\u662f\u6210\u529f\uff0c\u6bd4\u5982\u5728 1 \u4e4b\u540e\u51fa\u73b0\u5f02\u5e38\uff0c\u6216\u8005\u662f\u4f60\u5728\u5c06\u6d88\u606f\u653e\u56de\u5230\u961f\u5217\u4e2d\u51fa\u73b0\u7f51\u7edc\u95ee\u9898\u7531\u6216\u8005\u5b95\u673a\u91cd\u542f\u7b49\u60c5\u51b5\u3002 \u4f7f\u7528\u8fd9\u4e2a\u534f\u8bae\uff0c\u4f60\u5c06\u5192\u7740\u4e22\u5931\u6d88\u606f\u7684\u98ce\u9669\uff0c\u5982\u679c\u53ef\u4ee5\u63a5\u53d7\uff0c\u90a3\u5c31\u6ca1\u6709\u5173\u7cfb\u3002","title":"At Most Once"},{"location":"user-guide/zh/cap/idempotence/#at-least-once","text":"\u8fd9\u4e2a\u4ea4\u4ed8\u4fdd\u8bc1\u5305\u542b\u4f60\u6536\u5230\u81f3\u5c11\u4e00\u6b21\u7684\u6d88\u606f\uff0c\u5f53\u51fa\u73b0\u6545\u969c\u65f6\uff0c\u53ef\u80fd\u4f1a\u6536\u5230\u591a\u6b21\u6d88\u606f\u3002 \u5b83\u9700\u8981\u7a0d\u5fae\u6539\u53d8\u6211\u4eec\u6267\u884c\u6b65\u9aa4\u7684\u987a\u5e8f\uff0c\u5b83\u8981\u6c42\u6d88\u606f\u961f\u5217\u7cfb\u7edf\u652f\u6301\u4e8b\u52a1\u6216ACK\u673a\u5236\uff0c\u6bd4\u5982\u4f20\u7edf\u7684 begin-commit-rollback \u534f\u8bae\uff08MSMQ\u662f\u8fd9\u6837\uff09\uff0c\u6216\u8005\u662f receive-ack-nack \u534f\u8bae\uff08RabbitMQ\uff0cAzure Service Bus\u7b49\u662f\u8fd9\u6837\u7684\uff09\u3002 \u5927\u81f4\u6b65\u9aa4\u5982\u4e0b: 1. \u62a2\u5360\u961f\u5217\u4e2d\u7684\u6d88\u606f\u3002 2. \u5f00\u59cb\u4e00\u4e2a\u5de5\u4f5c\u4e8b\u52a1 3. \u5904\u7406\u6d88\u606f ( \u4f60\u7684\u4ee3\u7801 ) 4. \u662f\u5426\u6210\u529f ? Yes: 1. \u63d0\u4ea4\u5de5\u4f5c\u4e8b\u52a1 2. \u4ece\u961f\u5217\u5220\u9664\u6d88\u606f No: 1. \u56de\u6eda\u5de5\u4f5c\u4e8b\u52a1 2. \u4ece\u961f\u5217\u91ca\u653e\u62a2\u5360\u7684\u6d88\u606f \u5f53\u51fa\u73b0\u5931\u8d25\u6216\u8005\u62a2\u5360\u6d88\u606f\u8d85\u65f6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u603b\u662f\u80fd\u591f\u518d\u6b21\u63a5\u6536\u5230\u6d88\u606f\u4ee5\u4fdd\u8bc1\u6211\u4eec\u5de5\u4f5c\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\u3002","title":"At Least Once"},{"location":"user-guide/zh/cap/idempotence/#_3","text":"\u4e0a\u9762\u6240\u8bf4\u7684\u201c\u5de5\u4f5c\u4e8b\u52a1\u201d\u5e76\u4e0d\u662f\u7279\u6307\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u7684\u4e8b\u52a1\uff0c\u8fd9\u91cc\u7684\u5de5\u4f5c\u4e8b\u52a1\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6267\u884c\u4ee3\u7801\u7684\u539f\u5b50\u6027\u3002 \u6bd4\u5982\u5b83\u53ef\u4ee5\u662f\u4f20\u7edf\u7684RDMS\u4e8b\u52a1\uff0c\u4e5f\u6216\u8005\u662f MongoDB \u4e8b\u52a1\u6216\u8005\u662f\u4e00\u4e2a\u4ea4\u6613\u7b49\u3002 \u5728\u8fd9\u91cc\u5b83\u4ee3\u8868\u4e00\u4e2a\u6267\u884c\u5355\u5143\uff0c\u8fd9\u4e2a\u6267\u884c\u5355\u5143\u662f\u4e00\u4e2a\u6982\u5ff5\u6027\u7684\u4e8b\u5b9e\u4ee5\u652f\u6301\u524d\u9762\u63d0\u5230\u7684\u4ec5\u4ea4\u4ed8\u4e00\u6b21\u7684\u8fd9\u79cd\u95ee\u9898\u3002 \u901a\u5e38\uff0c\u4e0d\u53ef\u80fd\u505a\u5230\u6d88\u606f\u7684\u4e8b\u52a1\u548c\u5de5\u4f5c\u4e8b\u52a1\u6765\u5f62\u6210\u539f\u5b50\u6027\u8fdb\u884c\u63d0\u4ea4\u6216\u8005\u56de\u6eda\u3002","title":"\u4ec0\u4e48\u662f \u201c\u5de5\u4f5c\u4e8b\u52a1\u201d ?"},{"location":"user-guide/zh/cap/idempotence/#cap","text":"\u5728CAP\u4e2d\uff0c\u6211\u4eec\u91c7\u7528\u7684\u4ea4\u4ed8\u4fdd\u8bc1\u4e3a At Least Once\u3002 \u7531\u4e8e\u6211\u4eec\u5177\u6709\u4e34\u65f6\u5b58\u50a8\u4ecb\u8d28\uff08\u6570\u636e\u5e93\u8868\uff09\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u505a\u5230 At Most Once, \u4f46\u662f\u4e3a\u4e86\u4e25\u683c\u4fdd\u8bc1\u6d88\u606f\u4e0d\u4f1a\u4e22\u5931\uff0c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9b\u76f8\u5173\u529f\u80fd\u6216\u914d\u7f6e\u3002","title":"CAP \u4e2d\u7684\u5e42\u7b49\u6027"},{"location":"user-guide/zh/cap/idempotence/#_4","text":"1\u3001\u6d88\u606f\u5199\u5165\u6210\u529f\u4e86\uff0c\u4f46\u662f\u6b64\u65f6\u6267\u884cConsumer\u65b9\u6cd5\u5931\u8d25\u4e86 \u6267\u884cConsumer\u65b9\u6cd5\u5931\u8d25\u7684\u539f\u56e0\u6709\u975e\u5e38\u591a\uff0c\u6211\u5982\u679c\u4e0d\u77e5\u9053\u5177\u4f53\u7684\u573a\u666f\u76f2\u76ee\u8fdb\u884c\u91cd\u8bd5\u6216\u8005\u4e0d\u8fdb\u884c\u91cd\u8bd5\u90fd\u662f\u4e0d\u6b63\u786e\u7684\u9009\u62e9\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5047\u5982\u6d88\u8d39\u8005\u4e3a\u6263\u6b3e\u670d\u52a1\uff0c\u5982\u679c\u662f\u6267\u884c\u6263\u6b3e\u6210\u529f\u4e86\uff0c\u4f46\u662f\u5728\u5199\u6263\u6b3e\u65e5\u5fd7\u7684\u65f6\u5019\u5931\u8d25\u4e86\uff0c\u6b64\u65f6CAP\u4f1a\u5224\u65ad\u4e3a\u6d88\u8d39\u8005\u6267\u884c\u5931\u8d25\uff0c\u8fdb\u884c\u91cd\u8bd5\u3002\u5982\u679c\u5ba2\u6237\u7aef\u81ea\u5df1\u6ca1\u6709\u4fdd\u8bc1\u5e42\u7b49\u6027\uff0c\u6846\u67b6\u5bf9\u5176\u8fdb\u884c\u91cd\u8bd5\uff0c\u8fd9\u91cc\u52bf\u5fc5\u4f1a\u9020\u6210\u591a\u6b21\u6263\u6b3e\u51fa\u73b0\u4e25\u91cd\u540e\u679c\u3002 2\u3001\u6267\u884cConsumer\u65b9\u6cd5\u6210\u529f\u4e86\uff0c\u4f46\u662f\u53c8\u6536\u5230\u4e86\u540c\u6837\u7684\u6d88\u606f \u6b64\u5904\u573a\u666f\u4e5f\u662f\u53ef\u80fd\u5b58\u5728\u7684\uff0c\u5047\u5982\u5f00\u59cb\u7684\u65f6\u5019Consumer\u5df2\u7ecf\u6267\u884c\u6210\u529f\u4e86\uff0c\u4f46\u662f\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u5982 Broker \u5b95\u673a\u6062\u590d\u7b49\uff0c\u53c8\u6536\u5230\u4e86\u76f8\u540c\u7684\u6d88\u606f\uff0cCAP \u5728\u6536\u5230Broker\u6d88\u606f\u540e\u4f1a\u8ba4\u4e3a\u8fd9\u4e2a\u662f\u4e00\u4e2a\u65b0\u7684\u6d88\u606f\uff0c\u4f1a\u5bf9 Consumer\u518d\u6b21\u6267\u884c\uff0c\u7531\u4e8e\u662f\u65b0\u6d88\u606f\uff0c\u6b64\u65f6 CAP \u4e5f\u662f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49\u7684\u3002 3\u3001\u76ee\u524d\u7684\u6570\u636e\u5b58\u50a8\u6a21\u5f0f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49 \u7531\u4e8eCAP\u5b58\u6d88\u606f\u7684\u8868\u5bf9\u4e8e\u6210\u529f\u6d88\u8d39\u7684\u6d88\u606f\u4f1a\u4e8e1\u4e2a\u5c0f\u65f6\u540e\u5220\u9664\uff0c\u6240\u4ee5\u5982\u679c\u5bf9\u4e8e\u4e00\u4e9b\u5386\u53f2\u6027\u6d88\u606f\u65e0\u6cd5\u505a\u5230\u5e42\u7b49\u64cd\u4f5c\u3002 \u5386\u53f2\u6027\u6307\u7684\u662f\uff0c\u5047\u5982 Broker\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u7ef4\u62a4\u4e86\u6216\u8005\u662f\u4eba\u5de5\u5904\u7406\u7684\u4e00\u4e9b\u6d88\u606f\u3002 4\u3001\u4e1a\u754c\u505a\u6cd5 \u8bb8\u591a\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\u7684\u6846\u67b6\u90fd\u662f\u8981\u6c42 \u7528\u6237 \u6765\u4fdd\u8bc1\u5e42\u7b49\u6027\u64cd\u4f5c\u7684\uff0c\u6bd4\u5982 ENode, RocketMQ \u7b49\u7b49... \u4ece\u5b9e\u73b0\u7684\u89d2\u5ea6\u6765\u8bf4\uff0cCAP\u53ef\u4ee5\u505a\u4e00\u4e9b\u6bd4\u8f83\u4e0d\u4e25\u683c\u7684\u5e42\u7b49\uff0c\u4f46\u662f\u4e25\u683c\u7684\u5e42\u7b49\u65e0\u6cd5\u505a\u5230\u7684\u3002","title":"\u4e3a\u4ec0\u4e48\u6ca1\u6709\u5b9e\u73b0\u5e42\u7b49\uff1f"},{"location":"user-guide/zh/cap/idempotence/#_5","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4fdd\u8bc1\u6d88\u606f\u88ab\u6267\u884c\u591a\u6b21\u800c\u4e0d\u4f1a\u4ea7\u751f\u610f\u5916\u7ed3\u679c\u662f\u5f88\u81ea\u7136\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u91c7\u7528\u64cd\u4f5c\u5bf9\u8c61\u81ea\u5e26\u7684\u4e00\u4e9b\u5e42\u7b49\u529f\u80fd\u3002\u6bd4\u5982\uff1a \u6570\u636e\u5e93\u63d0\u4f9b\u7684 INSERT ON DUPLICATE KEY UPDATE \u6216\u8005\u662f\u91c7\u53d6\u7c7b\u578b\u7684\u7a0b\u5e8f\u5224\u65ad\u884c\u4e3a\u3002","title":"\u4ee5\u81ea\u7136\u7684\u65b9\u5f0f\u5904\u7406\u5e42\u7b49\u6d88\u606f"},{"location":"user-guide/zh/cap/idempotence/#_6","text":"\u53e6\u5916\u4e00\u79cd\u5904\u7406\u5e42\u7b49\u6027\u7684\u65b9\u5f0f\u5c31\u662f\u5728\u6d88\u606f\u4f20\u9012\u7684\u8fc7\u7a0b\u4e2d\u4f20\u9012ID\uff0c\u7136\u540e\u7531\u5355\u72ec\u7684\u6d88\u606f\u8ddf\u8e2a\u5668\u6765\u5904\u7406\u3002 \u6bd4\u5982\u4f60\u4f7f\u7528\u5177\u6709\u4e8b\u52a1\u6570\u636e\u5b58\u50a8\u7684 IMessageTracker \u6765\u8ddf\u8e2a\u6d88\u606fID\uff0c\u4f60\u7684\u4ee3\u7801\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a readonly IMessageTracker _messageTracker ; public SomeMessageHandler ( IMessageTracker messageTracker ) { _messageTracker = messageTracker ; } [CapSubscribe] public async Task Handle ( SomeMessage message ) { if ( await _messageTracker . HasProcessed ( message . Id )) { return ; } // do the work here // ... // remember that this message has been processed await _messageTracker . MarkAsProcessed ( messageId ); } \u81f3\u4e8e IMessageTracker \u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982Redis\u6216\u8005\u6570\u636e\u5e93\u7b49\u5b58\u50a8\u6d88\u606fId\u548c\u5bf9\u5e94\u7684\u5904\u7406\u72b6\u6001\u3002","title":"\u663e\u5f0f\u5904\u7406\u5e42\u7b49\u6d88\u606f"},{"location":"user-guide/zh/cap/messaging/","text":"\u6d88\u606f \u00b6 \u4f7f\u7528 ICapPublisher \u63a5\u53e3\u53d1\u9001\u51fa\u53bb\u7684\u6570\u636e\u79f0\u4e4b\u4e3a Message ( \u6d88\u606f )\u3002 \u53d1\u9001 & \u5904\u7406\u6d88\u606f \u00b6 \u4f60\u53ef\u4ee5\u9605\u8bfb quick-start \u6765\u5b66\u4e60\u5982\u4f55\u53d1\u9001\u548c\u5904\u7406\u6d88\u606f\u3002 \u8865\u507f\u4e8b\u52a1 \u00b6 Compensating transaction \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6d88\u8d39\u8005\u9700\u8981\u8fd4\u56de\u503c\u4ee5\u544a\u8bc9\u53d1\u5e03\u8005\u6267\u884c\u7ed3\u679c\uff0c\u4ee5\u4fbf\u4e8e\u53d1\u5e03\u8005\u5b9e\u65bd\u4e00\u4e9b\u52a8\u4f5c\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u8fd9\u5c5e\u4e8e\u8865\u507f\u8303\u56f4\u3002 \u4f60\u53ef\u4ee5\u5728\u6d88\u8d39\u8005\u6267\u884c\u7684\u4ee3\u7801\u4e2d\u901a\u8fc7\u91cd\u65b0\u53d1\u5e03\u4e00\u4e2a\u65b0\u6d88\u606f\u6765\u901a\u77e5\u4e0a\u6e38\uff0cCAP \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u4f60\u53ef\u4ee5\u5728\u53d1\u9001\u7684\u65f6\u5019\u6307\u5b9a callbackName \u6765\u5f97\u5230\u6d88\u8d39\u8005\u7684\u6267\u884c\u7ed3\u679c\uff0c\u901a\u5e38\u8fd9\u4ec5\u9002\u7528\u4e8e\u70b9\u5bf9\u70b9\u7684\u6d88\u8d39\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\u3002 \u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u7535\u5546\u7a0b\u5e8f\u4e2d\uff0c\u8ba2\u5355\u521d\u59cb\u72b6\u6001\u4e3a pending\uff0c\u5f53\u5546\u54c1\u6570\u91cf\u6210\u529f\u6263\u9664\u65f6\u5c06\u72b6\u6001\u6807\u8bb0\u4e3a succeeded \uff0c\u5426\u5219\u4e3a failed\u3002 // ============= Publisher ================= _capBus . Publish ( \"place.order.qty.deducted\" , contentObj : new { OrderId = 1234 , ProductId = 23255 , Qty = 1 }, callbackName : \"place.order.mark.status\" ); // publisher using `callbackName` to subscribe consumer result [CapSubscribe(\"place.order.mark.status\")] public void MarkOrderStatus ( JsonElement param ) { var orderId = param . GetProperty ( \"OrderId\" ). GetInt32 (); var isSuccess = param . GetProperty ( \"IsSuccess\" ). GetBoolean (); if ( isSuccess ){ // mark order status to succeeded } else { // mark order status to failed } } // ============= Consumer =================== [CapSubscribe(\"place.order.qty.deducted\")] public object DeductProductQty ( JsonElement param ) { var orderId = param . GetProperty ( \"OrderId\" ). GetInt32 (); var productId = param . GetProperty ( \"ProductId\" ). GetInt32 (); var qty = param . GetProperty ( \"Qty\" ). GetInt32 (); //business logic return new { OrderId = orderId , IsSuccess = true }; } \u5f02\u6784\u7cfb\u7edf\u96c6\u6210 \u00b6 \u5728 3.0+ \u7248\u672c\u4e2d\uff0c\u6211\u4eec\u5bf9\u6d88\u606f\u7ed3\u6784\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u6211\u4eec\u5229\u7528\u4e86\u6d88\u606f\u961f\u5217\u4e2d\u6d88\u606f\u534f\u8bae\u4e2d\u7684 Header \u6765\u4f20\u8f93\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4e8e\u5728 Body \u4e2d\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u4e0d\u9700\u8981\u4fee\u6539\u6216\u5305\u88c5\u4f7f\u7528\u8005\u7684\u539f\u59cb\u6d88\u606f\u6570\u636e\u683c\u5f0f\u548c\u5185\u5bb9\u8fdb\u884c\u53d1\u9001\u3002 \u8fd9\u6837\u7684\u505a\u6cd5\u662f\u5408\u7406\u7684\uff0c\u5b83\u6709\u52a9\u4e8e\u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\u8fdb\u884c\u66f4\u597d\u7684\u96c6\u6210\uff0c\u76f8\u5bf9\u4e8e\u4ee5\u524d\u7684\u7248\u672c\u4f7f\u7528\u8005\u4e0d\u9700\u8981\u77e5\u9053CAP\u5185\u90e8\u4f7f\u7528\u7684\u6d88\u606f\u7ed3\u6784\u5c31\u53ef\u4ee5\u5b8c\u6210\u96c6\u6210\u5de5\u4f5c\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u6d88\u606f\u5212\u5206\u4e3a Header \u548c Body \u6765\u8fdb\u884c\u4f20\u8f93\u3002 Body \u4e2d\u7684\u6570\u636e\u4e3a\u7528\u6237\u53d1\u9001\u7684\u539f\u59cb\u6d88\u606f\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8c03\u7528 Publish \u65b9\u6cd5\u53d1\u9001\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e0d\u8fdb\u884c\u4efb\u4f55\u5305\u88c5\u4ec5\u4ec5\u662f\u5e8f\u5217\u5316\u540e\u4f20\u9012\u5230\u6d88\u606f\u961f\u5217\u3002 \u5728 Header \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f20\u9012\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\u4ee5\u4fbf\u4e8eCAP\u5728\u6536\u5230\u6d88\u606f\u65f6\u80fd\u591f\u63d0\u53d6\u5230\u5173\u952e\u7279\u5f81\u8fdb\u884c\u64cd\u4f5c\u3002 \u4ee5\u4e0b\u662f\u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u5728\u53d1\u6d88\u606f\u7684\u65f6\u5019\u5411\u6d88\u606f\u7684Header \u4e2d\u5199\u5165\u7684\u5185\u5bb9\uff1a \u952e \u7c7b\u578b \u8bf4\u660e cap-msg-id string \u6d88\u606fId\uff0c \u7531\u96ea\u82b1\u7b97\u6cd5\u751f\u6210\uff0c\u4e5f\u53ef\u4ee5\u662f guid cap-msg-name string \u6d88\u606f\u540d\u79f0\uff0c\u5373 Topic \u540d\u5b57 cap-msg-type string \u6d88\u606f\u7684\u7c7b\u578b, \u5373 typeof(T).FullName (\u975e\u5fc5\u987b) cap-senttime stringg \u53d1\u9001\u7684\u65f6\u95f4 (\u975e\u5fc5\u987b) \u4ee5 Java \u7cfb\u7edf\u53d1\u9001 RabbitMQ \u4e3a\u4f8b\uff1a Map < String , Object > headers = new HashMap < String , Object > (); headers . put ( \"cap-msg-id\" , UUID . randomUUID (). toString ()); headers . put ( \"cap-msg-name\" , routingKey ); channel . basicPublish ( exchangeName , routingKey , new AMQP . BasicProperties . Builder () . headers ( headers ) . build (), messageBodyBytes ); // messageBodyBytes = \"\u53d1\u9001\u7684json\".getBytes(Charset.forName(\"UTF-8\")) // \u6ce8\u610f messageBody \u9ed8\u8ba4\u4e3a json \u7684 byte[]\uff0c\u5982\u679c\u91c7\u7528\u5176\u4ed6\u7cfb\u5217\u5316\uff0c\u9700\u8981\u5728CAP\u4fa7\u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5668 \u6d88\u606f\u8c03\u5ea6 \u00b6 CAP \u63a5\u6536\u5230\u6d88\u606f\u4e4b\u540e\u4f1a\u5c06\u6d88\u606f\u53d1\u9001\u5230 Transport, \u7531 Transport \u8fdb\u884c\u8fd0\u8f93\u3002 \u5f53\u4f60\u4f7f\u7528 ICapPublisher \u63a5\u53e3\u53d1\u9001\u65f6\uff0cCAP\u5c06\u4f1a\u5c06\u6d88\u606f\u8c03\u5ea6\u5230\u76f8\u5e94\u7684 Transport\u4e2d\u53bb\uff0c\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u6279\u91cf\u53d1\u9001\u6d88\u606f\u3002 \u6709\u5173 Transports \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b Transports \u7ae0\u8282\u3002 \u6d88\u606f\u5b58\u50a8 \u00b6 CAP \u63a5\u6536\u5230\u6d88\u606f\u4e4b\u540e\u4f1a\u5c06\u6d88\u606f\u8fdb\u884c Persistent\uff08\u6301\u4e45\u5316\uff09\uff0c \u6709\u5173 Persistent \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b Persistent \u7ae0\u8282\u3002 \u6d88\u606f\u91cd\u8bd5 \u00b6 \u91cd\u8bd5\u5728\u6574\u4e2aCAP\u67b6\u6784\u8bbe\u8ba1\u4e2d\u5177\u6709\u91cd\u8981\u4f5c\u7528\uff0cCAP \u4e2d\u4f1a\u9488\u5bf9\u53d1\u9001\u5931\u8d25\u6216\u8005\u6267\u884c\u5931\u8d25\u7684\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u3002\u5728\u6574\u4e2a CAP \u7684\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u6709\u4ee5\u4e0b\u51e0\u5904\u91c7\u7528\u7684\u91cd\u8bd5\u7b56\u7565\u3002 1\u3001 \u53d1\u9001\u91cd\u8bd5 \u5728\u6d88\u606f\u53d1\u9001\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u51fa\u73b0 Broker \u5b95\u673a\u6216\u8005\u8fde\u63a5\u5931\u8d25\u7684\u60c5\u51b5\u4ea6\u6216\u8005\u51fa\u73b0\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65f6\u5019 CAP \u4f1a\u5bf9\u53d1\u9001\u7684\u91cd\u8bd5\uff0c\u7b2c\u4e00\u6b21\u91cd\u8bd5\u6b21\u6570\u4e3a 3\uff0c4\u5206\u949f\u540e\u4ee5\u540e\u6bcf\u5206\u949f\u91cd\u8bd5\u4e00\u6b21\uff0c\u8fdb\u884c\u6b21\u6570 +1\uff0c\u5f53\u603b\u6b21\u6570\u8fbe\u523050\u6b21\u540e\uff0cCAP\u5c06\u4e0d\u5bf9\u5176\u8fdb\u884c\u91cd\u8bd5\u3002 \u4f60\u53ef\u4ee5\u5728 CapOptions \u4e2d\u8bbe\u7f6e FailedRetryCount \u6765\u8c03\u6574\u9ed8\u8ba4\u91cd\u8bd5\u7684\u603b\u6b21\u6570\u3002 \u5f53\u5931\u8d25\u603b\u6b21\u6570\u8fbe\u5230\u9ed8\u8ba4\u5931\u8d25\u603b\u6b21\u6570\u540e\uff0c\u5c31\u4e0d\u4f1a\u8fdb\u884c\u91cd\u8bd5\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728 Dashboard \u4e2d\u67e5\u770b\u6d88\u606f\u5931\u8d25\u7684\u539f\u56e0\uff0c\u7136\u540e\u8fdb\u884c\u4eba\u5de5\u91cd\u8bd5\u5904\u7406\u3002 2\u3001 \u6d88\u8d39\u91cd\u8bd5 \u5f53 Consumer \u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u4f1a\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\uff0c\u5728\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u4f1a\u8fdb\u884c\u91cd\u8bd5\u3002\u8fd9\u4e2a\u91cd\u8bd5\u7b56\u7565\u548c\u4e0a\u9762\u7684 \u53d1\u9001\u91cd\u8bd5 \u662f\u76f8\u540c\u7684\u3002 \u6d88\u606f\u6570\u636e\u6e05\u7406 \u00b6 \u6570\u636e\u5e93\u6d88\u606f\u8868\u4e2d\u5177\u6709\u4e00\u4e2a ExpiresAt \u5b57\u6bb5\u8868\u793a\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u5f53\u6d88\u606f\u53d1\u9001\u6210\u529f\u6216\u8005\u6d88\u8d39\u6210\u529f\u540e\uff0cCAP\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Successed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 1\u5929 \u540e\u8fc7\u671f\uff0c\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Failed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 15\u5929 \u540e\u8fc7\u671f\uff08\u53ef\u901a\u8fc7 FailedMessageExpiredAfter \u914d\u7f6e)\u3002 CAP \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6bcf\u9694**5\u5206\u949f**\u5c06\u6d88\u606f\u8868\u7684\u6570\u636e\u8fdb\u884c\u6e05\u7406\u5220\u9664\uff0c\u907f\u514d\u6570\u636e\u91cf\u8fc7\u591a\u5bfc\u81f4\u6027\u80fd\u7684\u964d\u4f4e\u3002\u6e05\u7406\u89c4\u5219\u4e3a ExpiresAt \u4e0d\u4e3a\u7a7a\u5e76\u4e14\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\u6570\u636e\u3002 \u4e5f\u5c31\u662f\u8bf4\u72b6\u6001\u4e3aFailed\u7684\u6d88\u606f\uff08\u6b63\u5e38\u60c5\u51b5\u4ed6\u4eec\u5df2\u7ecf\u88ab\u91cd\u8bd5\u4e86 50 \u6b21\uff09\uff0c\u5982\u679c\u4f6015\u5929\u6ca1\u6709\u4eba\u5de5\u4ecb\u5165\u5904\u7406\uff0c\u540c\u6837\u4f1a\u88ab\u6e05\u7406\u6389\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 CollectorCleaningInterval \u914d\u7f6e\u9879\u6765\u81ea\u5b9a\u4e49\u95f4\u9694\u65f6\u95f4\u3002","title":"\u6d88\u606f"},{"location":"user-guide/zh/cap/messaging/#_1","text":"\u4f7f\u7528 ICapPublisher \u63a5\u53e3\u53d1\u9001\u51fa\u53bb\u7684\u6570\u636e\u79f0\u4e4b\u4e3a Message ( \u6d88\u606f )\u3002","title":"\u6d88\u606f"},{"location":"user-guide/zh/cap/messaging/#_2","text":"\u4f60\u53ef\u4ee5\u9605\u8bfb quick-start \u6765\u5b66\u4e60\u5982\u4f55\u53d1\u9001\u548c\u5904\u7406\u6d88\u606f\u3002","title":"\u53d1\u9001 &amp; \u5904\u7406\u6d88\u606f"},{"location":"user-guide/zh/cap/messaging/#_3","text":"Compensating transaction \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6d88\u8d39\u8005\u9700\u8981\u8fd4\u56de\u503c\u4ee5\u544a\u8bc9\u53d1\u5e03\u8005\u6267\u884c\u7ed3\u679c\uff0c\u4ee5\u4fbf\u4e8e\u53d1\u5e03\u8005\u5b9e\u65bd\u4e00\u4e9b\u52a8\u4f5c\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u8fd9\u5c5e\u4e8e\u8865\u507f\u8303\u56f4\u3002 \u4f60\u53ef\u4ee5\u5728\u6d88\u8d39\u8005\u6267\u884c\u7684\u4ee3\u7801\u4e2d\u901a\u8fc7\u91cd\u65b0\u53d1\u5e03\u4e00\u4e2a\u65b0\u6d88\u606f\u6765\u901a\u77e5\u4e0a\u6e38\uff0cCAP \u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u4f60\u53ef\u4ee5\u5728\u53d1\u9001\u7684\u65f6\u5019\u6307\u5b9a callbackName \u6765\u5f97\u5230\u6d88\u8d39\u8005\u7684\u6267\u884c\u7ed3\u679c\uff0c\u901a\u5e38\u8fd9\u4ec5\u9002\u7528\u4e8e\u70b9\u5bf9\u70b9\u7684\u6d88\u8d39\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u793a\u4f8b\u3002 \u4f8b\u5982\uff0c\u5728\u4e00\u4e2a\u7535\u5546\u7a0b\u5e8f\u4e2d\uff0c\u8ba2\u5355\u521d\u59cb\u72b6\u6001\u4e3a pending\uff0c\u5f53\u5546\u54c1\u6570\u91cf\u6210\u529f\u6263\u9664\u65f6\u5c06\u72b6\u6001\u6807\u8bb0\u4e3a succeeded \uff0c\u5426\u5219\u4e3a failed\u3002 // ============= Publisher ================= _capBus . Publish ( \"place.order.qty.deducted\" , contentObj : new { OrderId = 1234 , ProductId = 23255 , Qty = 1 }, callbackName : \"place.order.mark.status\" ); // publisher using `callbackName` to subscribe consumer result [CapSubscribe(\"place.order.mark.status\")] public void MarkOrderStatus ( JsonElement param ) { var orderId = param . GetProperty ( \"OrderId\" ). GetInt32 (); var isSuccess = param . GetProperty ( \"IsSuccess\" ). GetBoolean (); if ( isSuccess ){ // mark order status to succeeded } else { // mark order status to failed } } // ============= Consumer =================== [CapSubscribe(\"place.order.qty.deducted\")] public object DeductProductQty ( JsonElement param ) { var orderId = param . GetProperty ( \"OrderId\" ). GetInt32 (); var productId = param . GetProperty ( \"ProductId\" ). GetInt32 (); var qty = param . GetProperty ( \"Qty\" ). GetInt32 (); //business logic return new { OrderId = orderId , IsSuccess = true }; }","title":"\u8865\u507f\u4e8b\u52a1"},{"location":"user-guide/zh/cap/messaging/#_4","text":"\u5728 3.0+ \u7248\u672c\u4e2d\uff0c\u6211\u4eec\u5bf9\u6d88\u606f\u7ed3\u6784\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u6211\u4eec\u5229\u7528\u4e86\u6d88\u606f\u961f\u5217\u4e2d\u6d88\u606f\u534f\u8bae\u4e2d\u7684 Header \u6765\u4f20\u8f93\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4e8e\u5728 Body \u4e2d\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u4e0d\u9700\u8981\u4fee\u6539\u6216\u5305\u88c5\u4f7f\u7528\u8005\u7684\u539f\u59cb\u6d88\u606f\u6570\u636e\u683c\u5f0f\u548c\u5185\u5bb9\u8fdb\u884c\u53d1\u9001\u3002 \u8fd9\u6837\u7684\u505a\u6cd5\u662f\u5408\u7406\u7684\uff0c\u5b83\u6709\u52a9\u4e8e\u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\u8fdb\u884c\u66f4\u597d\u7684\u96c6\u6210\uff0c\u76f8\u5bf9\u4e8e\u4ee5\u524d\u7684\u7248\u672c\u4f7f\u7528\u8005\u4e0d\u9700\u8981\u77e5\u9053CAP\u5185\u90e8\u4f7f\u7528\u7684\u6d88\u606f\u7ed3\u6784\u5c31\u53ef\u4ee5\u5b8c\u6210\u96c6\u6210\u5de5\u4f5c\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u6d88\u606f\u5212\u5206\u4e3a Header \u548c Body \u6765\u8fdb\u884c\u4f20\u8f93\u3002 Body \u4e2d\u7684\u6570\u636e\u4e3a\u7528\u6237\u53d1\u9001\u7684\u539f\u59cb\u6d88\u606f\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8c03\u7528 Publish \u65b9\u6cd5\u53d1\u9001\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e0d\u8fdb\u884c\u4efb\u4f55\u5305\u88c5\u4ec5\u4ec5\u662f\u5e8f\u5217\u5316\u540e\u4f20\u9012\u5230\u6d88\u606f\u961f\u5217\u3002 \u5728 Header \u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4f20\u9012\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\u4ee5\u4fbf\u4e8eCAP\u5728\u6536\u5230\u6d88\u606f\u65f6\u80fd\u591f\u63d0\u53d6\u5230\u5173\u952e\u7279\u5f81\u8fdb\u884c\u64cd\u4f5c\u3002 \u4ee5\u4e0b\u662f\u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u5728\u53d1\u6d88\u606f\u7684\u65f6\u5019\u5411\u6d88\u606f\u7684Header \u4e2d\u5199\u5165\u7684\u5185\u5bb9\uff1a \u952e \u7c7b\u578b \u8bf4\u660e cap-msg-id string \u6d88\u606fId\uff0c \u7531\u96ea\u82b1\u7b97\u6cd5\u751f\u6210\uff0c\u4e5f\u53ef\u4ee5\u662f guid cap-msg-name string \u6d88\u606f\u540d\u79f0\uff0c\u5373 Topic \u540d\u5b57 cap-msg-type string \u6d88\u606f\u7684\u7c7b\u578b, \u5373 typeof(T).FullName (\u975e\u5fc5\u987b) cap-senttime stringg \u53d1\u9001\u7684\u65f6\u95f4 (\u975e\u5fc5\u987b) \u4ee5 Java \u7cfb\u7edf\u53d1\u9001 RabbitMQ \u4e3a\u4f8b\uff1a Map < String , Object > headers = new HashMap < String , Object > (); headers . put ( \"cap-msg-id\" , UUID . randomUUID (). toString ()); headers . put ( \"cap-msg-name\" , routingKey ); channel . basicPublish ( exchangeName , routingKey , new AMQP . BasicProperties . Builder () . headers ( headers ) . build (), messageBodyBytes ); // messageBodyBytes = \"\u53d1\u9001\u7684json\".getBytes(Charset.forName(\"UTF-8\")) // \u6ce8\u610f messageBody \u9ed8\u8ba4\u4e3a json \u7684 byte[]\uff0c\u5982\u679c\u91c7\u7528\u5176\u4ed6\u7cfb\u5217\u5316\uff0c\u9700\u8981\u5728CAP\u4fa7\u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5668","title":"\u5f02\u6784\u7cfb\u7edf\u96c6\u6210"},{"location":"user-guide/zh/cap/messaging/#_5","text":"CAP \u63a5\u6536\u5230\u6d88\u606f\u4e4b\u540e\u4f1a\u5c06\u6d88\u606f\u53d1\u9001\u5230 Transport, \u7531 Transport \u8fdb\u884c\u8fd0\u8f93\u3002 \u5f53\u4f60\u4f7f\u7528 ICapPublisher \u63a5\u53e3\u53d1\u9001\u65f6\uff0cCAP\u5c06\u4f1a\u5c06\u6d88\u606f\u8c03\u5ea6\u5230\u76f8\u5e94\u7684 Transport\u4e2d\u53bb\uff0c\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u6279\u91cf\u53d1\u9001\u6d88\u606f\u3002 \u6709\u5173 Transports \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b Transports \u7ae0\u8282\u3002","title":"\u6d88\u606f\u8c03\u5ea6"},{"location":"user-guide/zh/cap/messaging/#_6","text":"CAP \u63a5\u6536\u5230\u6d88\u606f\u4e4b\u540e\u4f1a\u5c06\u6d88\u606f\u8fdb\u884c Persistent\uff08\u6301\u4e45\u5316\uff09\uff0c \u6709\u5173 Persistent \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u67e5\u770b Persistent \u7ae0\u8282\u3002","title":"\u6d88\u606f\u5b58\u50a8"},{"location":"user-guide/zh/cap/messaging/#_7","text":"\u91cd\u8bd5\u5728\u6574\u4e2aCAP\u67b6\u6784\u8bbe\u8ba1\u4e2d\u5177\u6709\u91cd\u8981\u4f5c\u7528\uff0cCAP \u4e2d\u4f1a\u9488\u5bf9\u53d1\u9001\u5931\u8d25\u6216\u8005\u6267\u884c\u5931\u8d25\u7684\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u3002\u5728\u6574\u4e2a CAP \u7684\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u6709\u4ee5\u4e0b\u51e0\u5904\u91c7\u7528\u7684\u91cd\u8bd5\u7b56\u7565\u3002 1\u3001 \u53d1\u9001\u91cd\u8bd5 \u5728\u6d88\u606f\u53d1\u9001\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u51fa\u73b0 Broker \u5b95\u673a\u6216\u8005\u8fde\u63a5\u5931\u8d25\u7684\u60c5\u51b5\u4ea6\u6216\u8005\u51fa\u73b0\u5f02\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65f6\u5019 CAP \u4f1a\u5bf9\u53d1\u9001\u7684\u91cd\u8bd5\uff0c\u7b2c\u4e00\u6b21\u91cd\u8bd5\u6b21\u6570\u4e3a 3\uff0c4\u5206\u949f\u540e\u4ee5\u540e\u6bcf\u5206\u949f\u91cd\u8bd5\u4e00\u6b21\uff0c\u8fdb\u884c\u6b21\u6570 +1\uff0c\u5f53\u603b\u6b21\u6570\u8fbe\u523050\u6b21\u540e\uff0cCAP\u5c06\u4e0d\u5bf9\u5176\u8fdb\u884c\u91cd\u8bd5\u3002 \u4f60\u53ef\u4ee5\u5728 CapOptions \u4e2d\u8bbe\u7f6e FailedRetryCount \u6765\u8c03\u6574\u9ed8\u8ba4\u91cd\u8bd5\u7684\u603b\u6b21\u6570\u3002 \u5f53\u5931\u8d25\u603b\u6b21\u6570\u8fbe\u5230\u9ed8\u8ba4\u5931\u8d25\u603b\u6b21\u6570\u540e\uff0c\u5c31\u4e0d\u4f1a\u8fdb\u884c\u91cd\u8bd5\u4e86\uff0c\u4f60\u53ef\u4ee5\u5728 Dashboard \u4e2d\u67e5\u770b\u6d88\u606f\u5931\u8d25\u7684\u539f\u56e0\uff0c\u7136\u540e\u8fdb\u884c\u4eba\u5de5\u91cd\u8bd5\u5904\u7406\u3002 2\u3001 \u6d88\u8d39\u91cd\u8bd5 \u5f53 Consumer \u63a5\u6536\u5230\u6d88\u606f\u65f6\uff0c\u4f1a\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\uff0c\u5728\u6267\u884c\u6d88\u8d39\u8005\u65b9\u6cd5\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u4f1a\u8fdb\u884c\u91cd\u8bd5\u3002\u8fd9\u4e2a\u91cd\u8bd5\u7b56\u7565\u548c\u4e0a\u9762\u7684 \u53d1\u9001\u91cd\u8bd5 \u662f\u76f8\u540c\u7684\u3002","title":"\u6d88\u606f\u91cd\u8bd5"},{"location":"user-guide/zh/cap/messaging/#_8","text":"\u6570\u636e\u5e93\u6d88\u606f\u8868\u4e2d\u5177\u6709\u4e00\u4e2a ExpiresAt \u5b57\u6bb5\u8868\u793a\u6d88\u606f\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u5f53\u6d88\u606f\u53d1\u9001\u6210\u529f\u6216\u8005\u6d88\u8d39\u6210\u529f\u540e\uff0cCAP\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Successed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 1\u5929 \u540e\u8fc7\u671f\uff0c\u4f1a\u5c06\u6d88\u606f\u72b6\u6001\u4e3a Failed \u7684 ExpiresAt \u8bbe\u7f6e\u4e3a 15\u5929 \u540e\u8fc7\u671f\uff08\u53ef\u901a\u8fc7 FailedMessageExpiredAfter \u914d\u7f6e)\u3002 CAP \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u6bcf\u9694**5\u5206\u949f**\u5c06\u6d88\u606f\u8868\u7684\u6570\u636e\u8fdb\u884c\u6e05\u7406\u5220\u9664\uff0c\u907f\u514d\u6570\u636e\u91cf\u8fc7\u591a\u5bfc\u81f4\u6027\u80fd\u7684\u964d\u4f4e\u3002\u6e05\u7406\u89c4\u5219\u4e3a ExpiresAt \u4e0d\u4e3a\u7a7a\u5e76\u4e14\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\u6570\u636e\u3002 \u4e5f\u5c31\u662f\u8bf4\u72b6\u6001\u4e3aFailed\u7684\u6d88\u606f\uff08\u6b63\u5e38\u60c5\u51b5\u4ed6\u4eec\u5df2\u7ecf\u88ab\u91cd\u8bd5\u4e86 50 \u6b21\uff09\uff0c\u5982\u679c\u4f6015\u5929\u6ca1\u6709\u4eba\u5de5\u4ecb\u5165\u5904\u7406\uff0c\u540c\u6837\u4f1a\u88ab\u6e05\u7406\u6389\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 CollectorCleaningInterval \u914d\u7f6e\u9879\u6765\u81ea\u5b9a\u4e49\u95f4\u9694\u65f6\u95f4\u3002","title":"\u6d88\u606f\u6570\u636e\u6e05\u7406"},{"location":"user-guide/zh/cap/serialization/","text":"\u5e8f\u5217\u5316 \u00b6 CAP \u63d0\u4f9b\u4e86 ISerializer \u63a5\u53e3\u6765\u652f\u6301\u5bf9\u6d88\u606f\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6211\u4eec\u4f7f\u7528 json \u6765\u5bf9\u6d88\u606f\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406\u5e76\u5b58\u50a8\u5230\u6570\u636e\u5e93\u4e2d\u3002 \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316 \u00b6 public class YourSerializer : ISerializer { Task < TransportMessage > SerializeAsync ( Message message ) { } Task < Message > DeserializeAsync ( TransportMessage transportMessage , Type valueType ) { } } \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d: //\u6ce8\u518c\u4f60\u7684\u81ea\u5b9a\u4e49\u5b9e\u73b0 services.AddSingleton<ISerializer, YourSerializer>(); // --- services.AddCap \u6d88\u606f\u9002\u914d\u5668 (v3.0\u79fb\u9664 ) \u00b6 \u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\uff0c\u6709\u65f6\u5019\u9700\u8981\u548c\u5176\u4ed6\u7cfb\u7edf\u8fdb\u884c\u901a\u8baf\uff0c\u4f46\u662f\u5176\u4ed6\u7cfb\u7edf\u4f7f\u7528\u7684\u6d88\u606f\u5bf9\u8c61\u53ef\u80fd\u548c CAP \u7684 \u5305\u88c5\u5668\u5bf9\u8c61 \u4e0d\u4e00\u6837\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u5bf9\u6d88\u606f\u8fdb\u884c\u81ea\u5b9a\u4e49\u9002\u914d\u3002 CAP \u63d0\u4f9b\u4e86 IMessagePacker \u63a5\u53e3\u7528\u4e8e\u5bf9 \u5305\u88c5\u5668\u5bf9\u8c61 \u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u81ea\u5b9a\u4e49\u7684 MessagePacker \u901a\u5e38\u662f\u5c06 CapMessage \u8fdb\u884c\u6253\u5305\u548c\u89e3\u5305\u64cd\u4f5c\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5df1\u7684\u4e1a\u52a1\u5bf9\u8c61\u3002 \u4f7f\u7528\u65b9\u6cd5\uff1a class MyMessagePacker : IMessagePacker { private readonly IContentSerializer _serializer ; public DefaultMessagePacker ( IContentSerializer serializer ) { _serializer = serializer ; } public string Pack ( CapMessage obj ) { var myStructure = new { Id = obj . Id , Body = obj . Content , Date = obj . Timestamp , Callback = obj . CallbackName }; return _serializer . Serialize ( myStructure ); } public CapMessage UnPack ( string packingMessage ) { var myStructure = _serializer . DeSerialize < MyStructure >( packingMessage ); return new CapMessageDto { Id = myStructure . Id , Timestamp = myStructure . Date , Content = myStructure . Body , CallbackName = myStructure . Callback }; } } \u63a5\u4e0b\u6765\uff0c\u914d\u7f6e\u81ea\u5b9a\u4e49\u7684 MyMessagePacker \u5230\u670d\u52a1\u4e2d\u3002 services . AddCap ( x =>{ }). AddMessagePacker < MyMessagePacker >();","title":"\u5e8f\u5217\u5316"},{"location":"user-guide/zh/cap/serialization/#_1","text":"CAP \u63d0\u4f9b\u4e86 ISerializer \u63a5\u53e3\u6765\u652f\u6301\u5bf9\u6d88\u606f\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6211\u4eec\u4f7f\u7528 json \u6765\u5bf9\u6d88\u606f\u8fdb\u884c\u5e8f\u5217\u5316\u5904\u7406\u5e76\u5b58\u50a8\u5230\u6570\u636e\u5e93\u4e2d\u3002","title":"\u5e8f\u5217\u5316"},{"location":"user-guide/zh/cap/serialization/#_2","text":"public class YourSerializer : ISerializer { Task < TransportMessage > SerializeAsync ( Message message ) { } Task < Message > DeserializeAsync ( TransportMessage transportMessage , Type valueType ) { } } \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d: //\u6ce8\u518c\u4f60\u7684\u81ea\u5b9a\u4e49\u5b9e\u73b0 services.AddSingleton<ISerializer, YourSerializer>(); // --- services.AddCap","title":"\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316"},{"location":"user-guide/zh/cap/serialization/#v30","text":"\u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\uff0c\u6709\u65f6\u5019\u9700\u8981\u548c\u5176\u4ed6\u7cfb\u7edf\u8fdb\u884c\u901a\u8baf\uff0c\u4f46\u662f\u5176\u4ed6\u7cfb\u7edf\u4f7f\u7528\u7684\u6d88\u606f\u5bf9\u8c61\u53ef\u80fd\u548c CAP \u7684 \u5305\u88c5\u5668\u5bf9\u8c61 \u4e0d\u4e00\u6837\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u5bf9\u6d88\u606f\u8fdb\u884c\u81ea\u5b9a\u4e49\u9002\u914d\u3002 CAP \u63d0\u4f9b\u4e86 IMessagePacker \u63a5\u53e3\u7528\u4e8e\u5bf9 \u5305\u88c5\u5668\u5bf9\u8c61 \u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u81ea\u5b9a\u4e49\u7684 MessagePacker \u901a\u5e38\u662f\u5c06 CapMessage \u8fdb\u884c\u6253\u5305\u548c\u89e3\u5305\u64cd\u4f5c\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5df1\u7684\u4e1a\u52a1\u5bf9\u8c61\u3002 \u4f7f\u7528\u65b9\u6cd5\uff1a class MyMessagePacker : IMessagePacker { private readonly IContentSerializer _serializer ; public DefaultMessagePacker ( IContentSerializer serializer ) { _serializer = serializer ; } public string Pack ( CapMessage obj ) { var myStructure = new { Id = obj . Id , Body = obj . Content , Date = obj . Timestamp , Callback = obj . CallbackName }; return _serializer . Serialize ( myStructure ); } public CapMessage UnPack ( string packingMessage ) { var myStructure = _serializer . DeSerialize < MyStructure >( packingMessage ); return new CapMessageDto { Id = myStructure . Id , Timestamp = myStructure . Date , Content = myStructure . Body , CallbackName = myStructure . Callback }; } } \u63a5\u4e0b\u6765\uff0c\u914d\u7f6e\u81ea\u5b9a\u4e49\u7684 MyMessagePacker \u5230\u670d\u52a1\u4e2d\u3002 services . AddCap ( x =>{ }). AddMessagePacker < MyMessagePacker >();","title":"\u6d88\u606f\u9002\u914d\u5668 (v3.0\u79fb\u9664 )"},{"location":"user-guide/zh/cap/transactions/","text":"\u4e8b\u52a1 \u00b6 \u5206\u5e03\u5f0f\u4e8b\u52a1? \u00b6 CAP \u4e0d\u76f4\u63a5\u63d0\u4f9b\u5f00\u7bb1\u5373\u7528\u7684\u57fa\u4e8e DTC \u6216\u8005 2PC \u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\uff0c\u76f8\u53cd\u6211\u4eec\u63d0\u4f9b\u4e00\u79cd\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u5728\u5206\u5e03\u5f0f\u4e8b\u52a1\u9047\u5230\u7684\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002 \u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u7531\u4e8e\u6d89\u53ca\u901a\u8baf\u7684\u5f00\u9500\uff0c\u4f7f\u7528\u57fa\u4e8e2PC\u6216DTC\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u5c06\u975e\u5e38\u6602\u8d35\uff0c\u5728\u6027\u80fd\u65b9\u9762\u4e5f\u540c\u6837\u5982\u6b64\u3002\u53e6\u5916\u7531\u4e8e\u57fa\u4e8e2PC\u6216DTC\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u540c\u6837\u53d7**CAP\u5b9a\u7406**\u7684\u7ea6\u675f\uff0c\u5f53\u53d1\u751f\u7f51\u7edc\u5206\u533a\u65f6\u5b83\u5c06\u4e0d\u5f97\u4e0d\u653e\u5f03\u53ef\u7528\u6027(CAP\u4e2d\u7684A)\u3002 \u9488\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0cCAP \u91c7\u7528\u7684\u662f\u201c\u5f02\u6b65\u786e\u4fdd\u201d\u8fd9\u79cd\u65b9\u6848\u3002 \u5f02\u6b65\u786e\u4fdd \u00b6 \u5f02\u6b65\u786e\u4fdd\u8fd9\u79cd\u65b9\u6848\u53c8\u53eb\u505a\u672c\u5730\u6d88\u606f\u8868\uff0c\u8fd9\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u65b9\u6848\uff0c\u65b9\u6848\u6700\u521d\u6765\u6e90\u4e8e eBay\uff0c\u53c2\u8003\u8d44\u6599\u89c1\u6bb5\u672b\u94fe\u63a5\u3002\u8fd9\u79cd\u65b9\u6848\u76ee\u524d\u4e5f\u662f\u4f01\u4e1a\u4e2d\u4f7f\u7528\u6700\u591a\u7684\u65b9\u6848\u4e4b\u4e00\u3002 \u76f8\u5bf9\u4e8e TCC \u6216\u8005 2PC/3PC \u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u6848\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u6765\u8bf4\u662f\u6700\u7b80\u5355\u7684\uff0c\u800c\u4e14\u5b83\u662f\u53bb\u4e2d\u5fc3\u5316\u7684\u3002\u5728TCC \u6216\u8005 2PC \u7684\u65b9\u6848\u4e2d\uff0c\u5fc5\u987b\u5177\u6709\u4e8b\u52a1\u534f\u8c03\u5668\u6765\u5904\u7406\u6bcf\u4e2a\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u7684\u72b6\u6001\uff0c\u800c\u6b64\u79cd\u65b9\u6848\u4e0d\u9700\u8981\u4e8b\u52a1\u534f\u8c03\u5668\u3002 \u53e6\u5916 2PC/TCC \u8fd9\u79cd\u65b9\u6848\u5982\u679c\u670d\u52a1\u4f9d\u8d56\u8fc7\u591a\uff0c\u4f1a\u5e26\u6765\u7ba1\u7406\u590d\u6742\u6027\u589e\u52a0\u548c\u7a33\u5b9a\u6027\u98ce\u9669\u589e\u5927\u7684\u95ee\u9898\u3002\u8bd5\u60f3\u5982\u679c\u6211\u4eec\u5f3a\u4f9d\u8d56 10 \u4e2a\u670d\u52a1\uff0c9 \u4e2a\u90fd\u6267\u884c\u6210\u529f\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u6267\u884c\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u524d\u9762 9 \u4e2a\u90fd\u8981\u56de\u6eda\u6389\uff1f\u8fd9\u4e2a\u6210\u672c\u8fd8\u662f\u975e\u5e38\u9ad8\u7684\u3002 \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4 2PC \u6216\u8005 TCC \u8fd9\u79cd\u65b9\u6848\u4e0d\u597d\uff0c\u56e0\u4e3a\u6bcf\u4e00\u79cd\u65b9\u6848\u90fd\u6709\u5176\u76f8\u5bf9\u4f18\u52bf\u7684\u4f7f\u7528\u573a\u666f\u548c\u4f18\u7f3a\u70b9\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u8fc7\u591a\u4ecb\u7ecd\u4e86\u3002 \u4e2d\u6587\uff1a http://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html \u82f1\u6587\uff1a http://queue.acm.org/detail.cfm?id=1394128","title":"\u4e8b\u52a1"},{"location":"user-guide/zh/cap/transactions/#_1","text":"","title":"\u4e8b\u52a1"},{"location":"user-guide/zh/cap/transactions/#_2","text":"CAP \u4e0d\u76f4\u63a5\u63d0\u4f9b\u5f00\u7bb1\u5373\u7528\u7684\u57fa\u4e8e DTC \u6216\u8005 2PC \u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\uff0c\u76f8\u53cd\u6211\u4eec\u63d0\u4f9b\u4e00\u79cd\u53ef\u4ee5\u7528\u4e8e\u89e3\u51b3\u5728\u5206\u5e03\u5f0f\u4e8b\u52a1\u9047\u5230\u7684\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002 \u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u7531\u4e8e\u6d89\u53ca\u901a\u8baf\u7684\u5f00\u9500\uff0c\u4f7f\u7528\u57fa\u4e8e2PC\u6216DTC\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u5c06\u975e\u5e38\u6602\u8d35\uff0c\u5728\u6027\u80fd\u65b9\u9762\u4e5f\u540c\u6837\u5982\u6b64\u3002\u53e6\u5916\u7531\u4e8e\u57fa\u4e8e2PC\u6216DTC\u7684\u5206\u5e03\u5f0f\u4e8b\u52a1\u540c\u6837\u53d7**CAP\u5b9a\u7406**\u7684\u7ea6\u675f\uff0c\u5f53\u53d1\u751f\u7f51\u7edc\u5206\u533a\u65f6\u5b83\u5c06\u4e0d\u5f97\u4e0d\u653e\u5f03\u53ef\u7528\u6027(CAP\u4e2d\u7684A)\u3002 \u9488\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u5904\u7406\uff0cCAP \u91c7\u7528\u7684\u662f\u201c\u5f02\u6b65\u786e\u4fdd\u201d\u8fd9\u79cd\u65b9\u6848\u3002","title":"\u5206\u5e03\u5f0f\u4e8b\u52a1?"},{"location":"user-guide/zh/cap/transactions/#_3","text":"\u5f02\u6b65\u786e\u4fdd\u8fd9\u79cd\u65b9\u6848\u53c8\u53eb\u505a\u672c\u5730\u6d88\u606f\u8868\uff0c\u8fd9\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u65b9\u6848\uff0c\u65b9\u6848\u6700\u521d\u6765\u6e90\u4e8e eBay\uff0c\u53c2\u8003\u8d44\u6599\u89c1\u6bb5\u672b\u94fe\u63a5\u3002\u8fd9\u79cd\u65b9\u6848\u76ee\u524d\u4e5f\u662f\u4f01\u4e1a\u4e2d\u4f7f\u7528\u6700\u591a\u7684\u65b9\u6848\u4e4b\u4e00\u3002 \u76f8\u5bf9\u4e8e TCC \u6216\u8005 2PC/3PC \u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u6848\u5bf9\u4e8e\u5206\u5e03\u5f0f\u4e8b\u52a1\u6765\u8bf4\u662f\u6700\u7b80\u5355\u7684\uff0c\u800c\u4e14\u5b83\u662f\u53bb\u4e2d\u5fc3\u5316\u7684\u3002\u5728TCC \u6216\u8005 2PC \u7684\u65b9\u6848\u4e2d\uff0c\u5fc5\u987b\u5177\u6709\u4e8b\u52a1\u534f\u8c03\u5668\u6765\u5904\u7406\u6bcf\u4e2a\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u7684\u72b6\u6001\uff0c\u800c\u6b64\u79cd\u65b9\u6848\u4e0d\u9700\u8981\u4e8b\u52a1\u534f\u8c03\u5668\u3002 \u53e6\u5916 2PC/TCC \u8fd9\u79cd\u65b9\u6848\u5982\u679c\u670d\u52a1\u4f9d\u8d56\u8fc7\u591a\uff0c\u4f1a\u5e26\u6765\u7ba1\u7406\u590d\u6742\u6027\u589e\u52a0\u548c\u7a33\u5b9a\u6027\u98ce\u9669\u589e\u5927\u7684\u95ee\u9898\u3002\u8bd5\u60f3\u5982\u679c\u6211\u4eec\u5f3a\u4f9d\u8d56 10 \u4e2a\u670d\u52a1\uff0c9 \u4e2a\u90fd\u6267\u884c\u6210\u529f\u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u6267\u884c\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u524d\u9762 9 \u4e2a\u90fd\u8981\u56de\u6eda\u6389\uff1f\u8fd9\u4e2a\u6210\u672c\u8fd8\u662f\u975e\u5e38\u9ad8\u7684\u3002 \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4 2PC \u6216\u8005 TCC \u8fd9\u79cd\u65b9\u6848\u4e0d\u597d\uff0c\u56e0\u4e3a\u6bcf\u4e00\u79cd\u65b9\u6848\u90fd\u6709\u5176\u76f8\u5bf9\u4f18\u52bf\u7684\u4f7f\u7528\u573a\u666f\u548c\u4f18\u7f3a\u70b9\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u8fc7\u591a\u4ecb\u7ecd\u4e86\u3002 \u4e2d\u6587\uff1a http://www.cnblogs.com/savorboard/p/base-an-acid-alternative.html \u82f1\u6587\uff1a http://queue.acm.org/detail.cfm?id=1394128","title":"\u5f02\u6b65\u786e\u4fdd"},{"location":"user-guide/zh/getting-started/contributing/","text":"\u8d21\u732e \u00b6 \u8d21\u732e\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u4e4b\u4e00\u5c31\u662f\u53c2\u4e0e\u8ba8\u8bba\u548cissue\u8ba8\u8bba\u3002 \u5982\u679c\u60a8\u6709\u4efb\u4f55\u7591\u95ee\u6216\u95ee\u9898\uff0c\u8bf7\u5728CAP\u4ed3\u5e93\u4e2d\u62a5\u544a\uff1a Report Issue Active Issues \u63d0\u4ea4\u66f4\u6539 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4ea4\u4ee3\u7801\u66f4\u6539PR\u6765\u505a\u51fa\u8d21\u732e\u3002 Pull requests \u53ef\u8ba9\u60a8\u544a\u8bc9\u5176\u4ed6\u4eba\u5df2\u63a8\u9001\u5230GitHub\u4e0a\u5b58\u50a8\u5e93\u7684\u66f4\u6539\u3002 \u6253\u5f00 Pull requests \u540e\uff0c\u60a8\u53ef\u4ee5\u4e0e\u534f\u4f5c\u8005\u8ba8\u8bba\u548c\u5ba1\u67e5\u505a\u51fa\u7684\u66f4\u6539\uff0c\u5e76\u5728\u66f4\u6539\u5408\u5e76\u5230\u5b58\u50a8\u5e93\u4e4b\u524d\u6dfb\u52a0\u540e\u7eed\u63d0\u4ea4\u3002 \u5176\u4ed6\u8d44\u6e90 \u00b6 issue \u548c pull requests \u4f7f\u7528\u641c\u7d22\u8fc7\u6ee4 issue \u548c pull requests","title":"\u8d21\u732e"},{"location":"user-guide/zh/getting-started/contributing/#_1","text":"\u8d21\u732e\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u4e4b\u4e00\u5c31\u662f\u53c2\u4e0e\u8ba8\u8bba\u548cissue\u8ba8\u8bba\u3002 \u5982\u679c\u60a8\u6709\u4efb\u4f55\u7591\u95ee\u6216\u95ee\u9898\uff0c\u8bf7\u5728CAP\u4ed3\u5e93\u4e2d\u62a5\u544a\uff1a Report Issue Active Issues","title":"\u8d21\u732e"},{"location":"user-guide/zh/getting-started/contributing/#_2","text":"\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4ea4\u4ee3\u7801\u66f4\u6539PR\u6765\u505a\u51fa\u8d21\u732e\u3002 Pull requests \u53ef\u8ba9\u60a8\u544a\u8bc9\u5176\u4ed6\u4eba\u5df2\u63a8\u9001\u5230GitHub\u4e0a\u5b58\u50a8\u5e93\u7684\u66f4\u6539\u3002 \u6253\u5f00 Pull requests \u540e\uff0c\u60a8\u53ef\u4ee5\u4e0e\u534f\u4f5c\u8005\u8ba8\u8bba\u548c\u5ba1\u67e5\u505a\u51fa\u7684\u66f4\u6539\uff0c\u5e76\u5728\u66f4\u6539\u5408\u5e76\u5230\u5b58\u50a8\u5e93\u4e4b\u524d\u6dfb\u52a0\u540e\u7eed\u63d0\u4ea4\u3002","title":"\u63d0\u4ea4\u66f4\u6539"},{"location":"user-guide/zh/getting-started/contributing/#_3","text":"issue \u548c pull requests \u4f7f\u7528\u641c\u7d22\u8fc7\u6ee4 issue \u548c pull requests","title":"\u5176\u4ed6\u8d44\u6e90"},{"location":"user-guide/zh/getting-started/introduction/","text":"\u4ecb\u7ecd \u00b6 CAP \u662f\u4e00\u4e2aEventBus\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u5728\u5fae\u670d\u52a1\u6216\u8005SOA\u7cfb\u7edf\u4e2d\u89e3\u51b3\u5206\u5e03\u5f0f\u4e8b\u52a1\u95ee\u9898\u7684\u4e00\u4e2a\u6846\u67b6\u3002\u5b83\u6709\u52a9\u4e8e\u521b\u5efa\u53ef\u6269\u5c55\uff0c\u53ef\u9760\u5e76\u4e14\u6613\u4e8e\u66f4\u6539\u7684\u5fae\u670d\u52a1\u7cfb\u7edf\u3002 \u5728\u5fae\u8f6f\u7684 eShopOnContainer \u5fae\u670d\u52a1\u793a\u4f8b\u9879\u76ee\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 CAP \u4f5c\u4e3a\u751f\u4ea7\u73af\u5883\u53ef\u7528\u7684 EventBus\u3002 \u4ec0\u4e48\u662f EventBus\uff1f \u4e8b\u4ef6\u603b\u7ebf\u662f\u4e00\u79cd\u673a\u5236\uff0c\u5b83\u5141\u8bb8\u4e0d\u540c\u7684\u7ec4\u4ef6\u5f7c\u6b64\u901a\u4fe1\u800c\u4e0d\u5f7c\u6b64\u4e86\u89e3\u3002 \u7ec4\u4ef6\u53ef\u4ee5\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230Eventbus\uff0c\u800c\u65e0\u9700\u77e5\u9053\u662f\u8c01\u6765\u63a5\u542c\u6216\u6709\u591a\u5c11\u5176\u4ed6\u4eba\u6765\u63a5\u542c\u3002 \u7ec4\u4ef6\u4e5f\u53ef\u4ee5\u4fa6\u542cEventbus\u4e0a\u7684\u4e8b\u4ef6\uff0c\u800c\u65e0\u9700\u77e5\u9053\u8c01\u53d1\u9001\u4e86\u4e8b\u4ef6\u3002 \u8fd9\u6837\uff0c\u7ec4\u4ef6\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u800c\u65e0\u9700\u76f8\u4e92\u4f9d\u8d56\u3002 \u540c\u6837\uff0c\u5f88\u5bb9\u6613\u66ff\u6362\u4e00\u4e2a\u7ec4\u4ef6\u3002 \u53ea\u8981\u65b0\u7ec4\u4ef6\u4e86\u89e3\u6b63\u5728\u53d1\u9001\u548c\u63a5\u6536\u7684\u4e8b\u4ef6\uff0c\u5176\u4ed6\u7ec4\u4ef6\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053. \u76f8\u5bf9\u4e8e\u5176\u4ed6\u7684 Service Bus \u6216\u8005 Event Bus\uff0c CAP \u62e5\u6709\u81ea\u5df1\u7684\u7279\u8272\uff0c\u5b83\u4e0d\u8981\u6c42\u4f7f\u7528\u8005\u53d1\u9001\u6d88\u606f\u6216\u8005\u5904\u7406\u6d88\u606f\u7684\u65f6\u5019\u5b9e\u73b0\u6216\u8005\u7ee7\u627f\u4efb\u4f55\u63a5\u53e3\uff0c\u62e5\u6709\u975e\u5e38\u9ad8\u7684\u7075\u6d3b\u6027\u3002\u6211\u4eec\u4e00\u76f4\u575a\u4fe1\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e\uff0c\u6240\u4ee5CAP\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u5bf9\u4e8e\u65b0\u624b\u975e\u5e38\u53cb\u597d\uff0c\u5e76\u4e14\u62e5\u6709\u8f7b\u91cf\u7ea7\u3002 CAP \u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u5177\u6709\u9ad8\u5ea6\u7684\u53ef\u6269\u5c55\u6027\u3002\u4f60\u6709\u8bb8\u591a\u9009\u9879\u53ef\u4ee5\u9009\u62e9\uff0c\u5305\u62ec\u6d88\u606f\u961f\u5217\uff0c\u5b58\u50a8\uff0c\u5e8f\u5217\u5316\u65b9\u5f0f\u7b49\uff0c\u7cfb\u7edf\u7684\u8bb8\u591a\u5143\u7d20\u5185\u5bb9\u53ef\u4ee5\u66ff\u6362\u4e3a\u81ea\u5b9a\u4e49\u5b9e\u73b0\u3002 \u76f8\u5173\u89c6\u9891 \u00b6 Video: bilibili \u6559\u7a0b Video: Youtube \u6559\u7a0b Video: \u817e\u8baf\u89c6\u9891\u6559\u7a0b \u76f8\u5173\u6587\u7ae0 \u00b6 Article: CAP \u4ecb\u7ecd\u53ca\u4f7f\u7528 Article: CAP 5.0 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 3.0 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 2.6 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 2.5 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 2.4 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 2.3 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027\u7528 Article: .NET Core Community \u9996\u4e2a\u5343\u661f\u9879\u76ee\u8bde\u751f\uff1aCAP","title":"\u4ecb\u7ecd"},{"location":"user-guide/zh/getting-started/introduction/#_1","text":"CAP \u662f\u4e00\u4e2aEventBus\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u5728\u5fae\u670d\u52a1\u6216\u8005SOA\u7cfb\u7edf\u4e2d\u89e3\u51b3\u5206\u5e03\u5f0f\u4e8b\u52a1\u95ee\u9898\u7684\u4e00\u4e2a\u6846\u67b6\u3002\u5b83\u6709\u52a9\u4e8e\u521b\u5efa\u53ef\u6269\u5c55\uff0c\u53ef\u9760\u5e76\u4e14\u6613\u4e8e\u66f4\u6539\u7684\u5fae\u670d\u52a1\u7cfb\u7edf\u3002 \u5728\u5fae\u8f6f\u7684 eShopOnContainer \u5fae\u670d\u52a1\u793a\u4f8b\u9879\u76ee\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 CAP \u4f5c\u4e3a\u751f\u4ea7\u73af\u5883\u53ef\u7528\u7684 EventBus\u3002 \u4ec0\u4e48\u662f EventBus\uff1f \u4e8b\u4ef6\u603b\u7ebf\u662f\u4e00\u79cd\u673a\u5236\uff0c\u5b83\u5141\u8bb8\u4e0d\u540c\u7684\u7ec4\u4ef6\u5f7c\u6b64\u901a\u4fe1\u800c\u4e0d\u5f7c\u6b64\u4e86\u89e3\u3002 \u7ec4\u4ef6\u53ef\u4ee5\u5c06\u4e8b\u4ef6\u53d1\u9001\u5230Eventbus\uff0c\u800c\u65e0\u9700\u77e5\u9053\u662f\u8c01\u6765\u63a5\u542c\u6216\u6709\u591a\u5c11\u5176\u4ed6\u4eba\u6765\u63a5\u542c\u3002 \u7ec4\u4ef6\u4e5f\u53ef\u4ee5\u4fa6\u542cEventbus\u4e0a\u7684\u4e8b\u4ef6\uff0c\u800c\u65e0\u9700\u77e5\u9053\u8c01\u53d1\u9001\u4e86\u4e8b\u4ef6\u3002 \u8fd9\u6837\uff0c\u7ec4\u4ef6\u53ef\u4ee5\u76f8\u4e92\u901a\u4fe1\u800c\u65e0\u9700\u76f8\u4e92\u4f9d\u8d56\u3002 \u540c\u6837\uff0c\u5f88\u5bb9\u6613\u66ff\u6362\u4e00\u4e2a\u7ec4\u4ef6\u3002 \u53ea\u8981\u65b0\u7ec4\u4ef6\u4e86\u89e3\u6b63\u5728\u53d1\u9001\u548c\u63a5\u6536\u7684\u4e8b\u4ef6\uff0c\u5176\u4ed6\u7ec4\u4ef6\u5c31\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053. \u76f8\u5bf9\u4e8e\u5176\u4ed6\u7684 Service Bus \u6216\u8005 Event Bus\uff0c CAP \u62e5\u6709\u81ea\u5df1\u7684\u7279\u8272\uff0c\u5b83\u4e0d\u8981\u6c42\u4f7f\u7528\u8005\u53d1\u9001\u6d88\u606f\u6216\u8005\u5904\u7406\u6d88\u606f\u7684\u65f6\u5019\u5b9e\u73b0\u6216\u8005\u7ee7\u627f\u4efb\u4f55\u63a5\u53e3\uff0c\u62e5\u6709\u975e\u5e38\u9ad8\u7684\u7075\u6d3b\u6027\u3002\u6211\u4eec\u4e00\u76f4\u575a\u4fe1\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e\uff0c\u6240\u4ee5CAP\u4f7f\u7528\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c\u5bf9\u4e8e\u65b0\u624b\u975e\u5e38\u53cb\u597d\uff0c\u5e76\u4e14\u62e5\u6709\u8f7b\u91cf\u7ea7\u3002 CAP \u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u5177\u6709\u9ad8\u5ea6\u7684\u53ef\u6269\u5c55\u6027\u3002\u4f60\u6709\u8bb8\u591a\u9009\u9879\u53ef\u4ee5\u9009\u62e9\uff0c\u5305\u62ec\u6d88\u606f\u961f\u5217\uff0c\u5b58\u50a8\uff0c\u5e8f\u5217\u5316\u65b9\u5f0f\u7b49\uff0c\u7cfb\u7edf\u7684\u8bb8\u591a\u5143\u7d20\u5185\u5bb9\u53ef\u4ee5\u66ff\u6362\u4e3a\u81ea\u5b9a\u4e49\u5b9e\u73b0\u3002","title":"\u4ecb\u7ecd"},{"location":"user-guide/zh/getting-started/introduction/#_2","text":"Video: bilibili \u6559\u7a0b Video: Youtube \u6559\u7a0b Video: \u817e\u8baf\u89c6\u9891\u6559\u7a0b","title":"\u76f8\u5173\u89c6\u9891"},{"location":"user-guide/zh/getting-started/introduction/#_3","text":"Article: CAP \u4ecb\u7ecd\u53ca\u4f7f\u7528 Article: CAP 5.0 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 3.0 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 2.6 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 2.5 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 2.4 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027 Article: CAP 2.3 \u7248\u672c\u4e2d\u7684\u65b0\u7279\u6027\u7528 Article: .NET Core Community \u9996\u4e2a\u5343\u661f\u9879\u76ee\u8bde\u751f\uff1aCAP","title":"\u76f8\u5173\u6587\u7ae0"},{"location":"user-guide/zh/getting-started/quick-start/","text":"\u5feb\u901f\u5f00\u59cb \u00b6 \u4e86\u89e3\u5982\u4f55\u4f7f\u7528 CAP \u6784\u5efa\u5fae\u670d\u52a1\u4e8b\u4ef6\u603b\u7ebf\u67b6\u6784\uff0c\u5b83\u6bd4\u76f4\u63a5\u96c6\u6210\u6d88\u606f\u961f\u5217\u63d0\u4f9b\u4e86\u54ea\u4e9b\u4f18\u52bf\uff0c\u5b83\u63d0\u4f9b\u4e86\u54ea\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u529f\u80fd\u3002 \u5b89\u88c5 \u00b6 PM > Install-Package DotNetCore . CAP \u5728 Asp.Net Core \u4e2d\u96c6\u6210 \u00b6 \u4ee5\u4fbf\u4e8e\u5feb\u901f\u542f\u52a8\uff0c\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u4e8b\u4ef6\u5b58\u50a8\u548c\u6d88\u606f\u961f\u5217\u3002 PM > Install-Package DotNetCore . CAP . InMemoryStorage PM > Install-Package Savorboard . CAP . InMemoryMessageQueue \u5728 Startup.cs \u4e2d\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x => { x . UseInMemoryStorage (); x . UseInMemoryMessageQueue (); }); } \u53d1\u9001\u6d88\u606f \u00b6 public class PublishController : Controller { [Route(\"~/send\")] public IActionResult SendMessage ([ FromServices ] ICapPublisher capBus ) { capBus . Publish ( \"test.show.time\" , DateTime . Now ); return Ok (); } } \u53d1\u9001\u5ef6\u8fdf\u6d88\u606f \u00b6 public class PublishController : Controller { [Route(\"~/send/delay\")] public IActionResult SendDelayMessage ([ FromServices ] ICapPublisher capBus ) { capBus . PublishDelay ( TimeSpan . FromSeconds ( 100 ), \"test.show.time\" , DateTime . Now ); return Ok (); } } \u53d1\u9001\u5305\u542b\u5934\u4fe1\u606f\u7684\u6d88\u606f \u00b6 var header = new Dictionary < string , string >() { [\"my.header.first\"] = \"first\" , [\"my.header.second\"] = \"second\" }; capBus . Publish ( \"test.show.time\" , DateTime . Now , header ); \u5904\u7406\u6d88\u606f \u00b6 public class ConsumerController : Controller { [NonAction] [CapSubscribe(\"test.show.time\")] public void ReceiveMessage ( DateTime time ) { Console . WriteLine ( \"message time is:\" + time ); } } \u5904\u7406\u5305\u542b\u5934\u4fe1\u606f\u7684\u6d88\u606f \u00b6 [CapSubscribe(\"test.show.time\")] public void ReceiveMessage ( DateTime time , [ FromCap ] CapHeader header ) { Console . WriteLine ( \"message time is:\" + time ); Console . WriteLine ( \"message firset header :\" + header [ \"my.header.first\" ]); Console . WriteLine ( \"message second header :\" + header [ \"my.header.second\" ]); } \u6458\u8981 \u00b6 \u76f8\u5bf9\u4e8e\u76f4\u63a5\u96c6\u6210\u6d88\u606f\u961f\u5217\uff0c\u5f02\u6b65\u6d88\u606f\u4f20\u9012\u6700\u5f3a\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u53ef\u9760\u6027\uff0c\u7cfb\u7edf\u7684\u4e00\u4e2a\u90e8\u5206\u4e2d\u7684\u6545\u969c\u4e0d\u4f1a\u4f20\u64ad\uff0c\u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u5d29\u6e83\u3002 \u5728 CAP \u5185\u90e8\u4f1a\u5c06\u6d88\u606f\u8fdb\u884c\u5b58\u50a8\uff0c\u4ee5\u4fdd\u8bc1\u6d88\u606f\u7684\u53ef\u9760\u6027\uff0c\u5e76\u914d\u5408\u91cd\u8bd5\u7b49\u7b56\u7565\u4ee5\u8fbe\u5230\u5404\u4e2a\u670d\u52a1\u4e4b\u95f4\u7684\u6570\u636e\u6700\u7ec8\u4e00\u81f4\u6027\u3002","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"user-guide/zh/getting-started/quick-start/#_1","text":"\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 CAP \u6784\u5efa\u5fae\u670d\u52a1\u4e8b\u4ef6\u603b\u7ebf\u67b6\u6784\uff0c\u5b83\u6bd4\u76f4\u63a5\u96c6\u6210\u6d88\u606f\u961f\u5217\u63d0\u4f9b\u4e86\u54ea\u4e9b\u4f18\u52bf\uff0c\u5b83\u63d0\u4f9b\u4e86\u54ea\u4e9b\u5f00\u7bb1\u5373\u7528\u7684\u529f\u80fd\u3002","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"user-guide/zh/getting-started/quick-start/#_2","text":"PM > Install-Package DotNetCore . CAP","title":"\u5b89\u88c5"},{"location":"user-guide/zh/getting-started/quick-start/#aspnet-core","text":"\u4ee5\u4fbf\u4e8e\u5feb\u901f\u542f\u52a8\uff0c\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u4e8b\u4ef6\u5b58\u50a8\u548c\u6d88\u606f\u961f\u5217\u3002 PM > Install-Package DotNetCore . CAP . InMemoryStorage PM > Install-Package Savorboard . CAP . InMemoryMessageQueue \u5728 Startup.cs \u4e2d\uff0c\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x => { x . UseInMemoryStorage (); x . UseInMemoryMessageQueue (); }); }","title":"\u5728 Asp.Net Core \u4e2d\u96c6\u6210"},{"location":"user-guide/zh/getting-started/quick-start/#_3","text":"public class PublishController : Controller { [Route(\"~/send\")] public IActionResult SendMessage ([ FromServices ] ICapPublisher capBus ) { capBus . Publish ( \"test.show.time\" , DateTime . Now ); return Ok (); } }","title":"\u53d1\u9001\u6d88\u606f"},{"location":"user-guide/zh/getting-started/quick-start/#_4","text":"public class PublishController : Controller { [Route(\"~/send/delay\")] public IActionResult SendDelayMessage ([ FromServices ] ICapPublisher capBus ) { capBus . PublishDelay ( TimeSpan . FromSeconds ( 100 ), \"test.show.time\" , DateTime . Now ); return Ok (); } }","title":"\u53d1\u9001\u5ef6\u8fdf\u6d88\u606f"},{"location":"user-guide/zh/getting-started/quick-start/#_5","text":"var header = new Dictionary < string , string >() { [\"my.header.first\"] = \"first\" , [\"my.header.second\"] = \"second\" }; capBus . Publish ( \"test.show.time\" , DateTime . Now , header );","title":"\u53d1\u9001\u5305\u542b\u5934\u4fe1\u606f\u7684\u6d88\u606f"},{"location":"user-guide/zh/getting-started/quick-start/#_6","text":"public class ConsumerController : Controller { [NonAction] [CapSubscribe(\"test.show.time\")] public void ReceiveMessage ( DateTime time ) { Console . WriteLine ( \"message time is:\" + time ); } }","title":"\u5904\u7406\u6d88\u606f"},{"location":"user-guide/zh/getting-started/quick-start/#_7","text":"[CapSubscribe(\"test.show.time\")] public void ReceiveMessage ( DateTime time , [ FromCap ] CapHeader header ) { Console . WriteLine ( \"message time is:\" + time ); Console . WriteLine ( \"message firset header :\" + header [ \"my.header.first\" ]); Console . WriteLine ( \"message second header :\" + header [ \"my.header.second\" ]); }","title":"\u5904\u7406\u5305\u542b\u5934\u4fe1\u606f\u7684\u6d88\u606f"},{"location":"user-guide/zh/getting-started/quick-start/#_8","text":"\u76f8\u5bf9\u4e8e\u76f4\u63a5\u96c6\u6210\u6d88\u606f\u961f\u5217\uff0c\u5f02\u6b65\u6d88\u606f\u4f20\u9012\u6700\u5f3a\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u53ef\u9760\u6027\uff0c\u7cfb\u7edf\u7684\u4e00\u4e2a\u90e8\u5206\u4e2d\u7684\u6545\u969c\u4e0d\u4f1a\u4f20\u64ad\uff0c\u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u6574\u4e2a\u7cfb\u7edf\u5d29\u6e83\u3002 \u5728 CAP \u5185\u90e8\u4f1a\u5c06\u6d88\u606f\u8fdb\u884c\u5b58\u50a8\uff0c\u4ee5\u4fdd\u8bc1\u6d88\u606f\u7684\u53ef\u9760\u6027\uff0c\u5e76\u914d\u5408\u91cd\u8bd5\u7b49\u7b56\u7565\u4ee5\u8fbe\u5230\u5404\u4e2a\u670d\u52a1\u4e4b\u95f4\u7684\u6570\u636e\u6700\u7ec8\u4e00\u81f4\u6027\u3002","title":"\u6458\u8981"},{"location":"user-guide/zh/monitoring/consul/","text":"Consul \u00b6 Consul \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u670d\u52a1\u7f51\u683c\uff0c\u7528\u4e8e\u8de8\u4efb\u4f55\u8fd0\u884c\u65f6\u5e73\u53f0\u548c\u516c\u5171\u6216\u79c1\u6709\u4e91\u8fde\u63a5\uff0c\u4fdd\u62a4\u548c\u914d\u7f6e\u670d\u52a1\u3002 Dashboard \u4e2d\u7684 Consul \u914d\u7f6e \u00b6 CAP\u7684 Dashboard \u4f7f\u7528 Consul \u4f5c\u4e3a\u670d\u52a1\u53d1\u73b0\u6765\u663e\u793a\u5176\u4ed6\u8282\u70b9\u7684\u6570\u636e\uff0c\u7136\u540e\u4f60\u5c31\u5728\u4efb\u610f\u8282\u70b9\u7684 Dashboard \u4e2d\u5207\u6362\u5230 Servers \u9875\u9762\u770b\u5230\u5176\u4ed6\u7684\u8282\u70b9\u3002 \u901a\u8fc7\u70b9\u51fb Switch \u6309\u94ae\u6765\u5207\u6362\u5230\u5176\u4ed6\u7684\u8282\u70b9\u770b\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6570\u636e\uff0c\u800c\u4e0d\u5fc5\u8bbf\u95ee\u5f88\u591a\u5730\u5740\u6765\u5206\u522b\u67e5\u770b\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u914d\u7f6e\u793a\u4f8b, \u4f60\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u914d\u7f6e\uff1a services . AddCap ( x => { x . UseMySql ( Configuration . GetValue < string >( \"ConnectionString\" )); x . UseRabbitMQ ( \"localhost\" ); x . UseDashboard (); x . UseDiscovery ( _ => { _ . DiscoveryServerHostName = \"localhost\" ; _ . DiscoveryServerPort = 8500 ; _ . CurrentNodeHostName = Configuration . GetValue < string >( \"ASPNETCORE_HOSTNAME\" ); _ . CurrentNodePort = Configuration . GetValue < int >( \"ASPNETCORE_PORT\" ); _ . NodeId = Configuration . GetValue < string >( \"NodeId\" ); _ . NodeName = Configuration . GetValue < string >( \"NodeName\" ); }); }); Consul 1.6.2: consul agent -dev Windows 10, ASP.NET Core 3.1: set ASPNETCORE_HOSTNAME = localhost && set ASPNETCORE_PORT = 5001 && dotnet run --urls = http://localhost:5001 NodeId = 1 NodeName = CAP-1 ConnectionString = \"Server=localhost;Database=aaa;UserId=xxx;Password=xxx;\" set ASPNETCORE_HOSTNAME = localhost && set ASPNETCORE_PORT = 5002 && dotnet run --urls = http://localhost:5002 NodeId = 2 NodeName = CAP-2 ConnectionString = \"Server=localhost;Database=bbb;UserId=xxx;Password=xxx;\"","title":"Consul"},{"location":"user-guide/zh/monitoring/consul/#consul","text":"Consul \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u670d\u52a1\u7f51\u683c\uff0c\u7528\u4e8e\u8de8\u4efb\u4f55\u8fd0\u884c\u65f6\u5e73\u53f0\u548c\u516c\u5171\u6216\u79c1\u6709\u4e91\u8fde\u63a5\uff0c\u4fdd\u62a4\u548c\u914d\u7f6e\u670d\u52a1\u3002","title":"Consul"},{"location":"user-guide/zh/monitoring/consul/#dashboard-consul","text":"CAP\u7684 Dashboard \u4f7f\u7528 Consul \u4f5c\u4e3a\u670d\u52a1\u53d1\u73b0\u6765\u663e\u793a\u5176\u4ed6\u8282\u70b9\u7684\u6570\u636e\uff0c\u7136\u540e\u4f60\u5c31\u5728\u4efb\u610f\u8282\u70b9\u7684 Dashboard \u4e2d\u5207\u6362\u5230 Servers \u9875\u9762\u770b\u5230\u5176\u4ed6\u7684\u8282\u70b9\u3002 \u901a\u8fc7\u70b9\u51fb Switch \u6309\u94ae\u6765\u5207\u6362\u5230\u5176\u4ed6\u7684\u8282\u70b9\u770b\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6570\u636e\uff0c\u800c\u4e0d\u5fc5\u8bbf\u95ee\u5f88\u591a\u5730\u5740\u6765\u5206\u522b\u67e5\u770b\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u914d\u7f6e\u793a\u4f8b, \u4f60\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u914d\u7f6e\uff1a services . AddCap ( x => { x . UseMySql ( Configuration . GetValue < string >( \"ConnectionString\" )); x . UseRabbitMQ ( \"localhost\" ); x . UseDashboard (); x . UseDiscovery ( _ => { _ . DiscoveryServerHostName = \"localhost\" ; _ . DiscoveryServerPort = 8500 ; _ . CurrentNodeHostName = Configuration . GetValue < string >( \"ASPNETCORE_HOSTNAME\" ); _ . CurrentNodePort = Configuration . GetValue < int >( \"ASPNETCORE_PORT\" ); _ . NodeId = Configuration . GetValue < string >( \"NodeId\" ); _ . NodeName = Configuration . GetValue < string >( \"NodeName\" ); }); }); Consul 1.6.2: consul agent -dev Windows 10, ASP.NET Core 3.1: set ASPNETCORE_HOSTNAME = localhost && set ASPNETCORE_PORT = 5001 && dotnet run --urls = http://localhost:5001 NodeId = 1 NodeName = CAP-1 ConnectionString = \"Server=localhost;Database=aaa;UserId=xxx;Password=xxx;\" set ASPNETCORE_HOSTNAME = localhost && set ASPNETCORE_PORT = 5002 && dotnet run --urls = http://localhost:5002 NodeId = 2 NodeName = CAP-2 ConnectionString = \"Server=localhost;Database=bbb;UserId=xxx;Password=xxx;\"","title":"Dashboard \u4e2d\u7684 Consul \u914d\u7f6e"},{"location":"user-guide/zh/monitoring/dashboard/","text":"Dashboard \u00b6 CAP \u539f\u751f\u63d0\u4f9b\u4e86 Dashboard \u4f9b\u67e5\u770b\u6d88\u606f\uff0c\u5229\u7528 Dashboard \u63d0\u4f9b\u7684\u529f\u80fd\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u67e5\u770b\u548c\u7ba1\u7406\u6d88\u606f\u3002 \u542f\u7528 Dashboard \u00b6 \u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5Dashboard\u7684 NuGet \u5305\u3002 PM > Install-Package DotNetCore . CAP . Dashboard \u7136\u540e\uff0c\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a services . AddCap ( x => { //... // Register Dashboard x . UseDashboard (); }); \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee http://localhost:xxx/cap \u8fd9\u4e2a\u5730\u5740\u6253\u5f00Dashboard\u3002 Dashboard \u914d\u7f6e\u9879 \u00b6 PathBase \u9ed8\u8ba4\u503c\uff1aN/A \u5f53\u4f4d\u4e8e\u4ee3\u7406\u540e\u65f6\uff0c\u901a\u8fc7\u914d\u7f6e\u6b64\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u4ee3\u7406\u8bf7\u6c42\u524d\u7f00\u3002 PathMatch \u9ed8\u8ba4\u503c\uff1a'/cap' \u4f60\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6b64\u914d\u7f6e\u9879\u6765\u66f4\u6539Dashboard\u7684\u8bbf\u95ee\u8def\u5f84\u3002 StatsPollingInterval \u9ed8\u8ba4\u503c\uff1a2000 \u6beb\u79d2 \u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6eDashboard \u524d\u7aef \u83b7\u53d6\u72b6\u6001\u63a5\u53e3(/stats)\u7684\u8f6e\u8be2\u65f6\u95f4 UseAuth \u9ed8\u8ba4\u503c\uff1afalse \u6307\u5b9a\u662f\u5426\u5f00\u542f\u6388\u6743 DefaultAuthenticationScheme \u6388\u6743\u9ed8\u8ba4\u4f7f\u7528\u7684 Scheme UseChallengeOnAuth \u9ed8\u8ba4\u503c\uff1afalse \u6388\u6743\u662f\u5426\u542f\u7528 Challenge DefaultChallengeScheme Challenge \u9ed8\u8ba4\u4f7f\u7528\u7684 Scheme \u81ea\u5b9a\u4e49\u8ba4\u8bc1 \u00b6 \u81ea 5.1.0 \u5f00\u59cb\uff0cCAP Dashboard \u6388\u6743\u9ed8\u8ba4\u4f7f\u7528 ASP.NET Core \u7684\u65b9\u5f0f\uff0c\u4e0d\u518d\u63d0\u4f9b\u81ea\u5b9a\u4e49\u6388\u6743\u8fc7\u6ee4\u5668\u3002 \u5728 Dashabord \u8ba4\u8bc1\u65f6\uff0c\u4f1a\u4ece HttpContext.User?.Identity?.IsAuthenticated \u4e2d\u53d6\u503c\uff0c\u5982\u679c\u53d6\u4e0d\u5230\u5219\u8ba4\u8bc1\u5931\u8d25\uff0c\u5e76\u8c03\u7528 Challenge Scheme(\u5982\u8fdb\u884c\u914d\u7f6e)\u3002 \u4f60\u53ef\u4ee5\u5728 Sample.Dashboard.Auth \u8fd9\u4e2a\u793a\u4f8b\u9879\u76ee\u4e2d\u67e5\u770b\u4f7f\u7528\u7ec6\u8282\u3002 services . AddAuthorization () . AddAuthentication ( options => { options . DefaultScheme = CookieAuthenticationDefaults . AuthenticationScheme ; options . DefaultChallengeScheme = OpenIdConnectDefaults . AuthenticationScheme ; }) . AddCookie () . AddOpenIdConnect ( options => { options . Authority = \"https://demo.identityserver.io/\" ; options . ClientId = \"interactive.confidential\" ; options . ClientSecret = \"secret\" ; options . ResponseType = \"code\" ; options . UsePkce = true ; options . Scope . Clear (); options . Scope . Add ( \"openid\" ); options . Scope . Add ( \"profile\" ); }) \u914d\u7f6e services . AddCap ( cap => { cap . UseDashboard ( d => { d . UseChallengeOnAuth = true ; d . DefaultChallengeScheme = OpenIdConnectDefaults . AuthenticationScheme ; }); }","title":"Dashboard"},{"location":"user-guide/zh/monitoring/dashboard/#dashboard","text":"CAP \u539f\u751f\u63d0\u4f9b\u4e86 Dashboard \u4f9b\u67e5\u770b\u6d88\u606f\uff0c\u5229\u7528 Dashboard \u63d0\u4f9b\u7684\u529f\u80fd\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u67e5\u770b\u548c\u7ba1\u7406\u6d88\u606f\u3002","title":"Dashboard"},{"location":"user-guide/zh/monitoring/dashboard/#dashboard_1","text":"\u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5Dashboard\u7684 NuGet \u5305\u3002 PM > Install-Package DotNetCore . CAP . Dashboard \u7136\u540e\uff0c\u5728\u914d\u7f6e\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a services . AddCap ( x => { //... // Register Dashboard x . UseDashboard (); }); \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee http://localhost:xxx/cap \u8fd9\u4e2a\u5730\u5740\u6253\u5f00Dashboard\u3002","title":"\u542f\u7528 Dashboard"},{"location":"user-guide/zh/monitoring/dashboard/#dashboard_2","text":"PathBase \u9ed8\u8ba4\u503c\uff1aN/A \u5f53\u4f4d\u4e8e\u4ee3\u7406\u540e\u65f6\uff0c\u901a\u8fc7\u914d\u7f6e\u6b64\u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u4ee3\u7406\u8bf7\u6c42\u524d\u7f00\u3002 PathMatch \u9ed8\u8ba4\u503c\uff1a'/cap' \u4f60\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6b64\u914d\u7f6e\u9879\u6765\u66f4\u6539Dashboard\u7684\u8bbf\u95ee\u8def\u5f84\u3002 StatsPollingInterval \u9ed8\u8ba4\u503c\uff1a2000 \u6beb\u79d2 \u6b64\u914d\u7f6e\u9879\u7528\u6765\u914d\u7f6eDashboard \u524d\u7aef \u83b7\u53d6\u72b6\u6001\u63a5\u53e3(/stats)\u7684\u8f6e\u8be2\u65f6\u95f4 UseAuth \u9ed8\u8ba4\u503c\uff1afalse \u6307\u5b9a\u662f\u5426\u5f00\u542f\u6388\u6743 DefaultAuthenticationScheme \u6388\u6743\u9ed8\u8ba4\u4f7f\u7528\u7684 Scheme UseChallengeOnAuth \u9ed8\u8ba4\u503c\uff1afalse \u6388\u6743\u662f\u5426\u542f\u7528 Challenge DefaultChallengeScheme Challenge \u9ed8\u8ba4\u4f7f\u7528\u7684 Scheme","title":"Dashboard \u914d\u7f6e\u9879"},{"location":"user-guide/zh/monitoring/dashboard/#_1","text":"\u81ea 5.1.0 \u5f00\u59cb\uff0cCAP Dashboard \u6388\u6743\u9ed8\u8ba4\u4f7f\u7528 ASP.NET Core \u7684\u65b9\u5f0f\uff0c\u4e0d\u518d\u63d0\u4f9b\u81ea\u5b9a\u4e49\u6388\u6743\u8fc7\u6ee4\u5668\u3002 \u5728 Dashabord \u8ba4\u8bc1\u65f6\uff0c\u4f1a\u4ece HttpContext.User?.Identity?.IsAuthenticated \u4e2d\u53d6\u503c\uff0c\u5982\u679c\u53d6\u4e0d\u5230\u5219\u8ba4\u8bc1\u5931\u8d25\uff0c\u5e76\u8c03\u7528 Challenge Scheme(\u5982\u8fdb\u884c\u914d\u7f6e)\u3002 \u4f60\u53ef\u4ee5\u5728 Sample.Dashboard.Auth \u8fd9\u4e2a\u793a\u4f8b\u9879\u76ee\u4e2d\u67e5\u770b\u4f7f\u7528\u7ec6\u8282\u3002 services . AddAuthorization () . AddAuthentication ( options => { options . DefaultScheme = CookieAuthenticationDefaults . AuthenticationScheme ; options . DefaultChallengeScheme = OpenIdConnectDefaults . AuthenticationScheme ; }) . AddCookie () . AddOpenIdConnect ( options => { options . Authority = \"https://demo.identityserver.io/\" ; options . ClientId = \"interactive.confidential\" ; options . ClientSecret = \"secret\" ; options . ResponseType = \"code\" ; options . UsePkce = true ; options . Scope . Clear (); options . Scope . Add ( \"openid\" ); options . Scope . Add ( \"profile\" ); }) \u914d\u7f6e services . AddCap ( cap => { cap . UseDashboard ( d => { d . UseChallengeOnAuth = true ; d . DefaultChallengeScheme = OpenIdConnectDefaults . AuthenticationScheme ; }); }","title":"\u81ea\u5b9a\u4e49\u8ba4\u8bc1"},{"location":"user-guide/zh/monitoring/diagnostics/","text":"\u8bca\u65ad(Diagnostics) \u00b6 Diagnostics \u63d0\u4f9b\u4e00\u7ec4\u529f\u80fd\u4f7f\u6211\u4eec\u80fd\u591f\u5f88\u65b9\u4fbf\u7684\u53ef\u4ee5\u8bb0\u5f55\u5728\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u53d1\u751f\u7684\u5173\u952e\u6027\u64cd\u4f5c\u4ee5\u53ca\u4ed6\u4eec\u7684\u6267\u884c\u65f6\u95f4\u7b49\uff0c\u4f7f\u7ba1\u7406\u5458\u53ef\u4ee5\u67e5\u627e\u7279\u522b\u662f\u751f\u4ea7\u73af\u5883\u4e2d\u51fa\u73b0\u95ee\u9898\u6240\u5728\u7684\u6839\u672c\u539f\u56e0\u3002 \u8ddf\u8e2a(Tracing) \u00b6 CAP \u5bf9 .NET DiagnosticSource \u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u76d1\u542c\u5668\u540d\u79f0\u4e3a CapDiagnosticListener \u3002 \u4f60\u53ef\u4ee5\u5728 DotNetCore.CAP.Diagnostics.CapDiagnosticListenerNames \u7c7b\u4e0b\u9762\u627e\u5230CAP\u5df2\u7ecf\u5b9a\u4e49\u7684\u4e8b\u4ef6\u540d\u79f0\u3002 Diagnostics \u63d0\u4f9b\u5bf9\u5916\u63d0\u4f9b\u7684\u4e8b\u4ef6\u4fe1\u606f\u6709\uff1a \u6d88\u606f\u6301\u4e45\u5316\u4e4b\u524d \u6d88\u606f\u6301\u4e45\u5316\u4e4b\u540e \u6d88\u606f\u6301\u4e45\u5316\u5f02\u5e38 \u6d88\u606f\u5411MQ\u53d1\u9001\u4e4b\u524d \u6d88\u606f\u5411MQ\u53d1\u9001\u4e4b\u540e \u6d88\u606f\u5411MQ\u53d1\u9001\u5f02\u5e38 \u6d88\u606f\u4eceMQ\u6d88\u8d39\u4fdd\u5b58\u4e4b\u524d \u6d88\u606f\u4eceMQ\u6d88\u8d39\u4fdd\u5b58\u4e4b\u540e \u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u4e4b\u524d \u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u4e4b\u540e \u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u5f02\u5e38 \u5728 Skywalking APM \u4e2d\u8ffd\u8e2a CAP \u4e8b\u4ef6 \u00b6 Skywalking \u7684 C# \u5ba2\u6237\u7aef\u63d0\u4f9b\u4e86\u5bf9 CAP Diagnostics \u7684\u652f\u6301\uff0c\u4f60\u53ef\u4ee5\u5229\u7528 SkyAPM-dotnet \u6765\u5b9e\u73b0\u5728 Skywalking \u4e2d\u8ffd\u8e2a\u4e8b\u4ef6\u3002 \u5c1d\u8bd5\u9605\u8bfbReadme\u6587\u6863\u6765\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u96c6\u6210\u5b83\u3002 \u5176\u4ed6 APM \u7684\u652f\u6301 \u00b6 \u76ee\u524d\u8fd8\u6ca1\u6709\u5b9e\u73b0\u5bf9\u9664\u4e86 Skywalking \u7684\u5176\u4ed6APM\u7684\u652f\u6301\uff0c\u5982\u679c\u4f60\u60f3\u5728\u5176\u4ed6 APM \u4e2d\u5b9e\u73b0\u5bf9 CAP \u8bca\u65ad\u4e8b\u4ef6\u7684\u652f\u6301\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc\u7684\u4ee3\u7801\u6765\u5b9e\u73b0\u5b83\uff1a https://github.com/SkyAPM/SkyAPM-dotnet/tree/master/src/SkyApm.Diagnostics.CAP \u5ea6\u91cf(Metrics) \u00b6 \u5ea6\u91cf\u662f\u6307\u5bf9\u4e8e\u4e00\u4e2a\u7269\u4f53\u6216\u662f\u4e8b\u4ef6\u7684\u67d0\u4e2a\u6027\u8d28\u7ed9\u4e88\u4e00\u4e2a\u6570\u5b57\uff0c\u4f7f\u5176\u53ef\u4ee5\u548c\u5176\u4ed6\u7269\u4f53\u6216\u662f\u4e8b\u4ef6\u7684\u76f8\u540c\u6027\u8d28\u6bd4\u8f83\u3002\u5ea6\u91cf\u53ef\u4ee5\u662f\u5bf9\u4e00\u7269\u7406\u91cf\uff08\u5982\u957f\u5ea6\u3001\u5c3a\u5bf8\u6216\u5bb9\u91cf\u7b49\uff09\u7684\u4f30\u8ba1\u6216\u6d4b\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u8f83\u62bd\u8c61\u7684\u7279\u8d28\u3002 CAP 7.0 \u5bf9 EventSource \u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u8ba1\u6570\u5668\u540d\u79f0\u4e3a DotNetCore.CAP.EventCounter \u3002 CAP \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u5ea6\u91cf\u6307\u6807\uff1a \u6bcf\u79d2\u53d1\u5e03\u901f\u5ea6 \u6bcf\u79d2\u6d88\u8d39\u901f\u5ea6 \u6bcf\u79d2\u8c03\u7528\u8ba2\u9605\u8005\u901f\u5ea6 \u6bcf\u79d2\u6267\u884c\u8ba2\u9605\u8005\u5e73\u5747\u8017\u65f6 \u4f7f\u7528 dotnet-counters \u67e5\u770b\u5ea6\u91cf \u00b6 dotnet-counters \u662f\u4e00\u4e2a\u6027\u80fd\u76d1\u89c6\u5de5\u5177\uff0c\u7528\u4e8e\u4e34\u65f6\u8fd0\u884c\u72b6\u51b5\u76d1\u89c6\u548c\u521d\u7ea7\u6027\u80fd\u8c03\u67e5\u3002 \u5b83\u53ef\u4ee5\u89c2\u5bdf\u901a\u8fc7 EventCounter API \u6216 Meter API \u53d1\u5e03\u7684\u6027\u80fd\u8ba1\u6570\u5668\u503c\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u76d1\u89c6CAP\u4e2d\u7684\u5ea6\u91cf\u6307\u6807\uff1a dotnet-counters ps dotnet-counters monitor --process-id=25496 --counters=DotNetCore.CAP.EventCounter \u5176\u4e2d process-id \u4e3a CAP \u6240\u5c5e\u7684\u8fdb\u7a0bId\u3002 \u5728 Dashboard \u4e2d\u67e5\u770b\u5ea6\u91cf \u00b6 \u4f60\u53ef\u4ee5\u914d\u7f6e x.UserDashboard() \u6765\u5f00\u542f\u4eea\u8868\u76d8\u4ee5\u56fe\u8868\u7684\u5f62\u5f0f\u67e5\u770b Metrics \u6307\u6807\u3002 \u5982\u4e0b\u56fe\uff1a \u5728 Realtime Metric Graph \u4e2d\uff0c\u65f6\u95f4\u8f74\u4f1a\u968f\u7740\u65f6\u95f4\u5b9e\u65f6\u6eda\u52a8\u4ece\u800c\u53ef\u4ee5\u770b\u5230\u53d1\u5e03\u548c\u6d88\u8d39\u6d88\u606f\u6bcf\u79d2\u7684\u901f\u7387\uff0c\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6d88\u8d39\u8005\u6267\u884c\u8017\u65f6\u4ee5\u201c\u6253\u70b9\u201d\u7684\u65b9\u5f0f\u5728 Y1 \u8f74\u4e0a\uff08Y0\u8f74\u4e3a\u901f\u7387\uff0cY1\u8f74\u4e3a\u6267\u884c\u8017\u65f6\uff09\u3002","title":"Diagnostics"},{"location":"user-guide/zh/monitoring/diagnostics/#diagnostics","text":"Diagnostics \u63d0\u4f9b\u4e00\u7ec4\u529f\u80fd\u4f7f\u6211\u4eec\u80fd\u591f\u5f88\u65b9\u4fbf\u7684\u53ef\u4ee5\u8bb0\u5f55\u5728\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u53d1\u751f\u7684\u5173\u952e\u6027\u64cd\u4f5c\u4ee5\u53ca\u4ed6\u4eec\u7684\u6267\u884c\u65f6\u95f4\u7b49\uff0c\u4f7f\u7ba1\u7406\u5458\u53ef\u4ee5\u67e5\u627e\u7279\u522b\u662f\u751f\u4ea7\u73af\u5883\u4e2d\u51fa\u73b0\u95ee\u9898\u6240\u5728\u7684\u6839\u672c\u539f\u56e0\u3002","title":"\u8bca\u65ad(Diagnostics)"},{"location":"user-guide/zh/monitoring/diagnostics/#tracing","text":"CAP \u5bf9 .NET DiagnosticSource \u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u76d1\u542c\u5668\u540d\u79f0\u4e3a CapDiagnosticListener \u3002 \u4f60\u53ef\u4ee5\u5728 DotNetCore.CAP.Diagnostics.CapDiagnosticListenerNames \u7c7b\u4e0b\u9762\u627e\u5230CAP\u5df2\u7ecf\u5b9a\u4e49\u7684\u4e8b\u4ef6\u540d\u79f0\u3002 Diagnostics \u63d0\u4f9b\u5bf9\u5916\u63d0\u4f9b\u7684\u4e8b\u4ef6\u4fe1\u606f\u6709\uff1a \u6d88\u606f\u6301\u4e45\u5316\u4e4b\u524d \u6d88\u606f\u6301\u4e45\u5316\u4e4b\u540e \u6d88\u606f\u6301\u4e45\u5316\u5f02\u5e38 \u6d88\u606f\u5411MQ\u53d1\u9001\u4e4b\u524d \u6d88\u606f\u5411MQ\u53d1\u9001\u4e4b\u540e \u6d88\u606f\u5411MQ\u53d1\u9001\u5f02\u5e38 \u6d88\u606f\u4eceMQ\u6d88\u8d39\u4fdd\u5b58\u4e4b\u524d \u6d88\u606f\u4eceMQ\u6d88\u8d39\u4fdd\u5b58\u4e4b\u540e \u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u4e4b\u524d \u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u4e4b\u540e \u8ba2\u9605\u8005\u65b9\u6cd5\u6267\u884c\u5f02\u5e38","title":"\u8ddf\u8e2a(Tracing)"},{"location":"user-guide/zh/monitoring/diagnostics/#skywalking-apm-cap","text":"Skywalking \u7684 C# \u5ba2\u6237\u7aef\u63d0\u4f9b\u4e86\u5bf9 CAP Diagnostics \u7684\u652f\u6301\uff0c\u4f60\u53ef\u4ee5\u5229\u7528 SkyAPM-dotnet \u6765\u5b9e\u73b0\u5728 Skywalking \u4e2d\u8ffd\u8e2a\u4e8b\u4ef6\u3002 \u5c1d\u8bd5\u9605\u8bfbReadme\u6587\u6863\u6765\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u96c6\u6210\u5b83\u3002","title":"\u5728 Skywalking APM \u4e2d\u8ffd\u8e2a CAP \u4e8b\u4ef6"},{"location":"user-guide/zh/monitoring/diagnostics/#apm","text":"\u76ee\u524d\u8fd8\u6ca1\u6709\u5b9e\u73b0\u5bf9\u9664\u4e86 Skywalking \u7684\u5176\u4ed6APM\u7684\u652f\u6301\uff0c\u5982\u679c\u4f60\u60f3\u5728\u5176\u4ed6 APM \u4e2d\u5b9e\u73b0\u5bf9 CAP \u8bca\u65ad\u4e8b\u4ef6\u7684\u652f\u6301\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc\u7684\u4ee3\u7801\u6765\u5b9e\u73b0\u5b83\uff1a https://github.com/SkyAPM/SkyAPM-dotnet/tree/master/src/SkyApm.Diagnostics.CAP","title":"\u5176\u4ed6 APM \u7684\u652f\u6301"},{"location":"user-guide/zh/monitoring/diagnostics/#metrics","text":"\u5ea6\u91cf\u662f\u6307\u5bf9\u4e8e\u4e00\u4e2a\u7269\u4f53\u6216\u662f\u4e8b\u4ef6\u7684\u67d0\u4e2a\u6027\u8d28\u7ed9\u4e88\u4e00\u4e2a\u6570\u5b57\uff0c\u4f7f\u5176\u53ef\u4ee5\u548c\u5176\u4ed6\u7269\u4f53\u6216\u662f\u4e8b\u4ef6\u7684\u76f8\u540c\u6027\u8d28\u6bd4\u8f83\u3002\u5ea6\u91cf\u53ef\u4ee5\u662f\u5bf9\u4e00\u7269\u7406\u91cf\uff08\u5982\u957f\u5ea6\u3001\u5c3a\u5bf8\u6216\u5bb9\u91cf\u7b49\uff09\u7684\u4f30\u8ba1\u6216\u6d4b\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u8f83\u62bd\u8c61\u7684\u7279\u8d28\u3002 CAP 7.0 \u5bf9 EventSource \u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u8ba1\u6570\u5668\u540d\u79f0\u4e3a DotNetCore.CAP.EventCounter \u3002 CAP \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u51e0\u4e2a\u5ea6\u91cf\u6307\u6807\uff1a \u6bcf\u79d2\u53d1\u5e03\u901f\u5ea6 \u6bcf\u79d2\u6d88\u8d39\u901f\u5ea6 \u6bcf\u79d2\u8c03\u7528\u8ba2\u9605\u8005\u901f\u5ea6 \u6bcf\u79d2\u6267\u884c\u8ba2\u9605\u8005\u5e73\u5747\u8017\u65f6","title":"\u5ea6\u91cf(Metrics)"},{"location":"user-guide/zh/monitoring/diagnostics/#dotnet-counters","text":"dotnet-counters \u662f\u4e00\u4e2a\u6027\u80fd\u76d1\u89c6\u5de5\u5177\uff0c\u7528\u4e8e\u4e34\u65f6\u8fd0\u884c\u72b6\u51b5\u76d1\u89c6\u548c\u521d\u7ea7\u6027\u80fd\u8c03\u67e5\u3002 \u5b83\u53ef\u4ee5\u89c2\u5bdf\u901a\u8fc7 EventCounter API \u6216 Meter API \u53d1\u5e03\u7684\u6027\u80fd\u8ba1\u6570\u5668\u503c\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u76d1\u89c6CAP\u4e2d\u7684\u5ea6\u91cf\u6307\u6807\uff1a dotnet-counters ps dotnet-counters monitor --process-id=25496 --counters=DotNetCore.CAP.EventCounter \u5176\u4e2d process-id \u4e3a CAP \u6240\u5c5e\u7684\u8fdb\u7a0bId\u3002","title":"\u4f7f\u7528 dotnet-counters \u67e5\u770b\u5ea6\u91cf"},{"location":"user-guide/zh/monitoring/diagnostics/#dashboard","text":"\u4f60\u53ef\u4ee5\u914d\u7f6e x.UserDashboard() \u6765\u5f00\u542f\u4eea\u8868\u76d8\u4ee5\u56fe\u8868\u7684\u5f62\u5f0f\u67e5\u770b Metrics \u6307\u6807\u3002 \u5982\u4e0b\u56fe\uff1a \u5728 Realtime Metric Graph \u4e2d\uff0c\u65f6\u95f4\u8f74\u4f1a\u968f\u7740\u65f6\u95f4\u5b9e\u65f6\u6eda\u52a8\u4ece\u800c\u53ef\u4ee5\u770b\u5230\u53d1\u5e03\u548c\u6d88\u8d39\u6d88\u606f\u6bcf\u79d2\u7684\u901f\u7387\uff0c\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6d88\u8d39\u8005\u6267\u884c\u8017\u65f6\u4ee5\u201c\u6253\u70b9\u201d\u7684\u65b9\u5f0f\u5728 Y1 \u8f74\u4e0a\uff08Y0\u8f74\u4e3a\u901f\u7387\uff0cY1\u8f74\u4e3a\u6267\u884c\u8017\u65f6\uff09\u3002","title":"\u5728 Dashboard \u4e2d\u67e5\u770b\u5ea6\u91cf"},{"location":"user-guide/zh/monitoring/opentelemetry/","text":"OpenTelemetry \u00b6 https://opentelemetry.io/ OpenTelemetry\u662f\u5de5\u5177\u3001api\u548csdk\u7684\u96c6\u5408\u3002 \u4f7f\u7528\u5b83\u6765\u68c0\u6d4b\u3001\u751f\u6210\u3001\u6536\u96c6\u548c\u5bfc\u51fa\u9065\u6d4b\u6570\u636e(\u5ea6\u91cf\u3001\u65e5\u5fd7\u548c\u8ddf\u8e2a)\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5206\u6790\u8f6f\u4ef6\u7684\u6027\u80fd\u548c\u884c\u4e3a\u3002 \u96c6\u6210 \u00b6 \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u5173\u4e8e\u5982\u4f55\u5728\u63a7\u5236\u53f0\u5e94\u7528\u6216ASP.NET Core \u4e2d\u4f7f\u7528OpenTelemetry\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u63cf\u8ff0\u5982\u4f55\u5c06CAP\u96c6\u6210\u5230OpenTelemetry\u4e2d\u3002 \u914d\u7f6e \u00b6 \u5b89\u88c5CAP\u7684OpenTelemetry\u5305\u5230\u9879\u76ee\u4e2d\u3002 dotnet add package DotNetCore . Cap . OpenTelemetry OpenTelemetry \u7684\u8ddf\u8e2a\u6570\u636e\u6765\u81ea\u4e8e Diagnostics \u53d1\u9001\u7684\u8bca\u65ad\u6570\u636e\uff0c\u6dfb\u52a0 CAP Instrumentation \u5230 OpenTelemetry\u7684\u6269\u5c55\u914d\u7f6e\u4e2d\u4f1a\u8fdb\u884c\u81ea\u52a8\u6536\u96c6\u3002 services . AddOpenTelemetryTracing (( builder ) => builder . AddAspNetCoreInstrumentation () . AddCapInstrumentation () // <-- \u6dfb\u52a0\u8fd9\u884c . AddZipkinExporter () ); \u4ee5\u4e0b\u662fCAP\u7684\u8ddf\u8e2a\u6570\u636e\u5728 Zipkin \u4e2d\u7684\u4e00\u4e2a\u793a\u610f\u56fe\uff1a","title":"OpenTelemetry"},{"location":"user-guide/zh/monitoring/opentelemetry/#opentelemetry","text":"https://opentelemetry.io/ OpenTelemetry\u662f\u5de5\u5177\u3001api\u548csdk\u7684\u96c6\u5408\u3002 \u4f7f\u7528\u5b83\u6765\u68c0\u6d4b\u3001\u751f\u6210\u3001\u6536\u96c6\u548c\u5bfc\u51fa\u9065\u6d4b\u6570\u636e(\u5ea6\u91cf\u3001\u65e5\u5fd7\u548c\u8ddf\u8e2a)\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5206\u6790\u8f6f\u4ef6\u7684\u6027\u80fd\u548c\u884c\u4e3a\u3002","title":"OpenTelemetry"},{"location":"user-guide/zh/monitoring/opentelemetry/#_1","text":"\u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u5173\u4e8e\u5982\u4f55\u5728\u63a7\u5236\u53f0\u5e94\u7528\u6216ASP.NET Core \u4e2d\u4f7f\u7528OpenTelemetry\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u63cf\u8ff0\u5982\u4f55\u5c06CAP\u96c6\u6210\u5230OpenTelemetry\u4e2d\u3002","title":"\u96c6\u6210"},{"location":"user-guide/zh/monitoring/opentelemetry/#_2","text":"\u5b89\u88c5CAP\u7684OpenTelemetry\u5305\u5230\u9879\u76ee\u4e2d\u3002 dotnet add package DotNetCore . Cap . OpenTelemetry OpenTelemetry \u7684\u8ddf\u8e2a\u6570\u636e\u6765\u81ea\u4e8e Diagnostics \u53d1\u9001\u7684\u8bca\u65ad\u6570\u636e\uff0c\u6dfb\u52a0 CAP Instrumentation \u5230 OpenTelemetry\u7684\u6269\u5c55\u914d\u7f6e\u4e2d\u4f1a\u8fdb\u884c\u81ea\u52a8\u6536\u96c6\u3002 services . AddOpenTelemetryTracing (( builder ) => builder . AddAspNetCoreInstrumentation () . AddCapInstrumentation () // <-- \u6dfb\u52a0\u8fd9\u884c . AddZipkinExporter () ); \u4ee5\u4e0b\u662fCAP\u7684\u8ddf\u8e2a\u6570\u636e\u5728 Zipkin \u4e2d\u7684\u4e00\u4e2a\u793a\u610f\u56fe\uff1a","title":"\u914d\u7f6e"},{"location":"user-guide/zh/samples/castle.dynamicproxy/","text":"\u548c Castle DynamicProxy \u96c6\u6210 \u00b6 Castle DynamicProxy \u662f\u4e00\u4e2a\u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u751f\u6210\u8f7b\u91cf\u7ea7.NET\u4ee3\u7406\u7684\u5e93\u3002\u4ee3\u7406\u5bf9\u8c61\u5141\u8bb8\u5728\u4e0d\u4fee\u6539\u7c7b\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u622a\u53d6\u5bf9\u5bf9\u8c61\u6210\u5458\u7684\u8c03\u7528\u3002\u53ef\u4ee5\u4ee3\u7406\u7c7b\u548c\u63a5\u53e3\uff0c\u4f46\u662f\u53ea\u80fd\u62e6\u622a\u865a\u62df\u6210\u5458\u3002 Castle.DynamicProxy \u53ef\u4ee5\u5e2e\u52a9\u4f60\u65b9\u4fbf\u7684\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\uff0c\u4ee3\u7406\u5bf9\u8c61\u53ef\u4ee5\u5e2e\u52a9\u6784\u5efa\u7075\u6d3b\u7684\u5e94\u7528\u7a0b\u5e8f\u4f53\u7cfb\u7ed3\u6784\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u5c06\u529f\u80fd\u900f\u660e\u5730\u6dfb\u52a0\u5230\u4ee3\u7801\u4e2d\uff0c\u800c\u65e0\u9700\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4ee3\u7406\u4e00\u4e2a\u7c7b\u6765\u6dfb\u52a0\u65e5\u5fd7\u8bb0\u5f55\u6216\u5b89\u5168\u68c0\u67e5\uff0c\u800c\u65e0\u9700\u4f7f\u4ee3\u7801\u77e5\u9053\u5df2\u6dfb\u52a0\u6b64\u529f\u80fd\u3002 \u4e0b\u9762\u53ef\u4ee5\u770b\u5230\u5982\u4f55\u5728 CAP \u4e2d\u96c6\u6210\u4f7f\u7528 Castle.DynamicProxy\u3002 1\u3001\u5b89\u88c5 NuGet \u5305 \u00b6 \u5728 \u96c6\u6210\u4e86 CAP \u7684\u9879\u76ee\u4e2d\u5b89\u88c5\u5305\uff0c\u6709\u5173\u5982\u4f55\u96c6\u6210 CAP \u7684\u6587\u6863\u8bf7\u770b \u8fd9\u91cc \u3002 \u6ce8\u610f\uff0c Castle.DynamicProxy \u8fd9\u4e2a\u5305\u5df2\u7ecf\u88ab\u5e9f\u5f03\uff0c\u8bf7\u4f7f\u7528\u6700\u65b0\u7684 Castle.Core \u5305\u3002 <PackageReference Include= \"Castle.Core\" Version= \"4.4.1\" /> 2\u3001\u521b\u5efa\u4e00\u4e2a Castle \u5207\u9762\u62e6\u622a\u5668 \u00b6 \u53ef\u4ee5\u5728\u8fd9\u91cc dynamicproxy.md \u627e\u5230\u76f8\u5173\u7684\u6587\u6863\u3002 \u4e0b\u9762\u4e3a\u793a\u4f8b\u4ee3\u7801\uff0c\u7ee7\u627f Castle \u63d0\u4f9b\u7684 IInterceptor \u63a5\u53e3\u5373\u53ef\uff1a [Serializable] public class MyInterceptor : IInterceptor { public void Intercept(IInvocation invocation) { Console.WriteLine(\"Before target call\"); try { invocation.Proceed(); } catch (Exception) { Console.WriteLine(\"Target threw an exception!\"); throw; } finally { Console.WriteLine(\"After target call\"); } } } \u62e6\u622a\u5668\u6b64\u5904\u547d\u540d\u4e3a MyInterceptor \uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u5904\u7406\u4f60\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6bd4\u5982\u6dfb\u52a0\u65e5\u5fd7\u6216\u5176\u4ed6\u7684\u4e00\u4e9b\u884c\u4e3a\u3002 3\u3001\u521b\u5efa IServiceCollection \u7684\u6269\u5c55\u7c7b \u00b6 \u4e3a IServiceCollection \u521b\u5efa\u6269\u5c55\uff0c\u65b9\u9762\u540e\u7eed\u8c03\u7528\u3002 using Castle.DynamicProxy ; public static class ServicesExtensions { public static void AddProxiedSingleton < TImplementation >( this IServiceCollection services ) where TImplementation : class { services . AddSingleton ( serviceProvider => { var proxyGenerator = serviceProvider . GetRequiredService < ProxyGenerator >(); var interceptors = serviceProvider . GetServices < IInterceptor >(). ToArray (); return proxyGenerator . CreateClassProxy < TImplementation >( interceptors ); }); } } \u6b64\u5904\u6211\u521b\u5efa\u4e86\u4e00\u4e2a Singleton \u58f0\u660e\u5468\u671f\u7684\u6269\u5c55\u65b9\u6cd5\uff0c\u5efa\u8bae\u6240\u6709 CAP \u7684\u8ba2\u9605\u8005\u90fd\u521b\u5efa\u4e3a Singleton \u5373\u53ef\uff0c\u56e0\u4e3a\u5728 CAP \u5185\u90e8\u5b9e\u9645\u6267\u884c\u7684\u65f6\u5019\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a scope \u6765\u6267\u884c\uff0c\u6240\u4ee5\u65e0\u9700\u62c5\u5fc3\u8d44\u6e90\u91ca\u653e\u95ee\u9898\u3002 4\u3001\u521b\u5efa CAP \u8ba2\u9605\u670d\u52a1 \u00b6 \u521b\u5efa\u4e00\u4e2a CAP \u8ba2\u9605\u7c7b\uff0c\u6ce8\u610f\u4e0d\u80fd\u653e\u5728 Controller \u4e2d\u4e86\u3002 \u6ce8\u610f\uff1a\u65b9\u6cd5\u9700\u8981\u4e3a\u865a\u65b9\u6cd5 virtual\uff0c\u624d\u80fd\u88ab Castle \u91cd\u5199\uff0c\u522b\u641e\u5fd8\u4e86\u52a0\uff01\uff01\uff01 public class CapSubscribeService : ICapSubscribe { [CapSubscribe(\"sample.rabbitmq.mysql\")] public virtual void Subscriber ( DateTime p ) { Console . WriteLine ( $ @\"{DateTime.Now} Subscriber invoked, Info: {p}\" ); } } 5\u3001\u5728 Startup \u4e2d\u96c6\u6210 \u00b6 public void ConfigureServices ( IServiceCollection services ) { // \u6dfb\u52a0 Castle \u7684\u4ee3\u7406\u751f\u6210\u5668 services . AddSingleton ( new ProxyGenerator ()); // \u6dfb\u52a0\u7b2c2\u6b65\u7684\u81ea\u5b9a\u4e49\u7684\u62e6\u622a\u7c7b\uff0c\u58f0\u660e\u5468\u671f\u4e3a services . AddSingleton < IInterceptor , MyInterceptor >(); // \u6b64\u5904\u4e3a\u4e0a\u9762\u7684\u6269\u5c55\u65b9\u6cd5\uff0c \u6dfb\u52a0 CAP \u8ba2\u9605 Service services . AddProxiedSingleton < CapSubscribeService >(); services . AddCap ( x => { x . UseMySql ( \"\" ); x . UseRabbitMQ ( \"\" ); x . UseDashboard (); }); // ... } \u4ee5\u4e0a\u5c31\u5b8c\u6210\u4e86\u6240\u6709\u7684\u96c6\u6210\u5de5\u4f5c\uff0c\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u6d4b\u8bd5\u4e86\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u5230 Github issue \u53cd\u9988\u3002 \u6ce8\u610f\uff1a CAP \u9700\u8981\u4f7f\u7528 5.0 + \u7248\u672c\uff0c\u76ee\u524d(2021\u5e741\u67086\u65e5)\u53ea\u6709 preview \u7248\u672c\u3002","title":"Castle DynamicProxy"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#castle-dynamicproxy","text":"Castle DynamicProxy \u662f\u4e00\u4e2a\u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u751f\u6210\u8f7b\u91cf\u7ea7.NET\u4ee3\u7406\u7684\u5e93\u3002\u4ee3\u7406\u5bf9\u8c61\u5141\u8bb8\u5728\u4e0d\u4fee\u6539\u7c7b\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u622a\u53d6\u5bf9\u5bf9\u8c61\u6210\u5458\u7684\u8c03\u7528\u3002\u53ef\u4ee5\u4ee3\u7406\u7c7b\u548c\u63a5\u53e3\uff0c\u4f46\u662f\u53ea\u80fd\u62e6\u622a\u865a\u62df\u6210\u5458\u3002 Castle.DynamicProxy \u53ef\u4ee5\u5e2e\u52a9\u4f60\u65b9\u4fbf\u7684\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61\uff0c\u4ee3\u7406\u5bf9\u8c61\u53ef\u4ee5\u5e2e\u52a9\u6784\u5efa\u7075\u6d3b\u7684\u5e94\u7528\u7a0b\u5e8f\u4f53\u7cfb\u7ed3\u6784\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u5c06\u529f\u80fd\u900f\u660e\u5730\u6dfb\u52a0\u5230\u4ee3\u7801\u4e2d\uff0c\u800c\u65e0\u9700\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4ee3\u7406\u4e00\u4e2a\u7c7b\u6765\u6dfb\u52a0\u65e5\u5fd7\u8bb0\u5f55\u6216\u5b89\u5168\u68c0\u67e5\uff0c\u800c\u65e0\u9700\u4f7f\u4ee3\u7801\u77e5\u9053\u5df2\u6dfb\u52a0\u6b64\u529f\u80fd\u3002 \u4e0b\u9762\u53ef\u4ee5\u770b\u5230\u5982\u4f55\u5728 CAP \u4e2d\u96c6\u6210\u4f7f\u7528 Castle.DynamicProxy\u3002","title":"\u548c Castle DynamicProxy \u96c6\u6210"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#1-nuget","text":"\u5728 \u96c6\u6210\u4e86 CAP \u7684\u9879\u76ee\u4e2d\u5b89\u88c5\u5305\uff0c\u6709\u5173\u5982\u4f55\u96c6\u6210 CAP \u7684\u6587\u6863\u8bf7\u770b \u8fd9\u91cc \u3002 \u6ce8\u610f\uff0c Castle.DynamicProxy \u8fd9\u4e2a\u5305\u5df2\u7ecf\u88ab\u5e9f\u5f03\uff0c\u8bf7\u4f7f\u7528\u6700\u65b0\u7684 Castle.Core \u5305\u3002 <PackageReference Include= \"Castle.Core\" Version= \"4.4.1\" />","title":"1\u3001\u5b89\u88c5 NuGet \u5305"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#2-castle","text":"\u53ef\u4ee5\u5728\u8fd9\u91cc dynamicproxy.md \u627e\u5230\u76f8\u5173\u7684\u6587\u6863\u3002 \u4e0b\u9762\u4e3a\u793a\u4f8b\u4ee3\u7801\uff0c\u7ee7\u627f Castle \u63d0\u4f9b\u7684 IInterceptor \u63a5\u53e3\u5373\u53ef\uff1a [Serializable] public class MyInterceptor : IInterceptor { public void Intercept(IInvocation invocation) { Console.WriteLine(\"Before target call\"); try { invocation.Proceed(); } catch (Exception) { Console.WriteLine(\"Target threw an exception!\"); throw; } finally { Console.WriteLine(\"After target call\"); } } } \u62e6\u622a\u5668\u6b64\u5904\u547d\u540d\u4e3a MyInterceptor \uff0c\u4f60\u53ef\u4ee5\u5728\u5176\u4e2d\u5904\u7406\u4f60\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6bd4\u5982\u6dfb\u52a0\u65e5\u5fd7\u6216\u5176\u4ed6\u7684\u4e00\u4e9b\u884c\u4e3a\u3002","title":"2\u3001\u521b\u5efa\u4e00\u4e2a Castle \u5207\u9762\u62e6\u622a\u5668"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#3-iservicecollection","text":"\u4e3a IServiceCollection \u521b\u5efa\u6269\u5c55\uff0c\u65b9\u9762\u540e\u7eed\u8c03\u7528\u3002 using Castle.DynamicProxy ; public static class ServicesExtensions { public static void AddProxiedSingleton < TImplementation >( this IServiceCollection services ) where TImplementation : class { services . AddSingleton ( serviceProvider => { var proxyGenerator = serviceProvider . GetRequiredService < ProxyGenerator >(); var interceptors = serviceProvider . GetServices < IInterceptor >(). ToArray (); return proxyGenerator . CreateClassProxy < TImplementation >( interceptors ); }); } } \u6b64\u5904\u6211\u521b\u5efa\u4e86\u4e00\u4e2a Singleton \u58f0\u660e\u5468\u671f\u7684\u6269\u5c55\u65b9\u6cd5\uff0c\u5efa\u8bae\u6240\u6709 CAP \u7684\u8ba2\u9605\u8005\u90fd\u521b\u5efa\u4e3a Singleton \u5373\u53ef\uff0c\u56e0\u4e3a\u5728 CAP \u5185\u90e8\u5b9e\u9645\u6267\u884c\u7684\u65f6\u5019\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a scope \u6765\u6267\u884c\uff0c\u6240\u4ee5\u65e0\u9700\u62c5\u5fc3\u8d44\u6e90\u91ca\u653e\u95ee\u9898\u3002","title":"3\u3001\u521b\u5efa IServiceCollection \u7684\u6269\u5c55\u7c7b"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#4-cap","text":"\u521b\u5efa\u4e00\u4e2a CAP \u8ba2\u9605\u7c7b\uff0c\u6ce8\u610f\u4e0d\u80fd\u653e\u5728 Controller \u4e2d\u4e86\u3002 \u6ce8\u610f\uff1a\u65b9\u6cd5\u9700\u8981\u4e3a\u865a\u65b9\u6cd5 virtual\uff0c\u624d\u80fd\u88ab Castle \u91cd\u5199\uff0c\u522b\u641e\u5fd8\u4e86\u52a0\uff01\uff01\uff01 public class CapSubscribeService : ICapSubscribe { [CapSubscribe(\"sample.rabbitmq.mysql\")] public virtual void Subscriber ( DateTime p ) { Console . WriteLine ( $ @\"{DateTime.Now} Subscriber invoked, Info: {p}\" ); } }","title":"4\u3001\u521b\u5efa CAP \u8ba2\u9605\u670d\u52a1"},{"location":"user-guide/zh/samples/castle.dynamicproxy/#5-startup","text":"public void ConfigureServices ( IServiceCollection services ) { // \u6dfb\u52a0 Castle \u7684\u4ee3\u7406\u751f\u6210\u5668 services . AddSingleton ( new ProxyGenerator ()); // \u6dfb\u52a0\u7b2c2\u6b65\u7684\u81ea\u5b9a\u4e49\u7684\u62e6\u622a\u7c7b\uff0c\u58f0\u660e\u5468\u671f\u4e3a services . AddSingleton < IInterceptor , MyInterceptor >(); // \u6b64\u5904\u4e3a\u4e0a\u9762\u7684\u6269\u5c55\u65b9\u6cd5\uff0c \u6dfb\u52a0 CAP \u8ba2\u9605 Service services . AddProxiedSingleton < CapSubscribeService >(); services . AddCap ( x => { x . UseMySql ( \"\" ); x . UseRabbitMQ ( \"\" ); x . UseDashboard (); }); // ... } \u4ee5\u4e0a\u5c31\u5b8c\u6210\u4e86\u6240\u6709\u7684\u96c6\u6210\u5de5\u4f5c\uff0c\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u6d4b\u8bd5\u4e86\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u5230 Github issue \u53cd\u9988\u3002 \u6ce8\u610f\uff1a CAP \u9700\u8981\u4f7f\u7528 5.0 + \u7248\u672c\uff0c\u76ee\u524d(2021\u5e741\u67086\u65e5)\u53ea\u6709 preview \u7248\u672c\u3002","title":"5\u3001\u5728 Startup \u4e2d\u96c6\u6210"},{"location":"user-guide/zh/samples/eshoponcontainers/","text":"eShopOnContainers \u00b6 eShopOnContainers is a sample application written in C# running on .NET Core using a microservice architecture, Domain Driven Design. .NET Core reference application, powered by Microsoft, based on a simplified microservices architecture and Docker containers. This reference application is cross-platform at the server and client side, thanks to .NET Core services capable of running on Linux or Windows containers depending on your Docker host, and to Xamarin for mobile apps running on Android, iOS or Windows/UWP plus any browser for the client web apps. The architecture proposes a microservice oriented architecture implementation with multiple autonomous microservices (each one owning its own data/db) and implementing different approaches within each microservice (simple CRUD vs. DDD/CQRS patterns) using Http as the communication protocol between the client apps and the microservices and supports asynchronous communication for data updates propagation across multiple services based on Integration Events and an Event Bus (a light message broker, to choose between RabbitMQ or Azure Service Bus, underneath) plus other features defined at the roadmap. eShopOnContainers with CAP \u00b6 \u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u5730\u5740\u770b\u5230\u5982\u4f55\u5728 eShopOnContainers \u4e2d\u4f7f\u7528 CAP\u3002 https://github.com/yang-xiaodong/eShopOnContainers","title":"eShopOnContainers"},{"location":"user-guide/zh/samples/eshoponcontainers/#eshoponcontainers","text":"eShopOnContainers is a sample application written in C# running on .NET Core using a microservice architecture, Domain Driven Design. .NET Core reference application, powered by Microsoft, based on a simplified microservices architecture and Docker containers. This reference application is cross-platform at the server and client side, thanks to .NET Core services capable of running on Linux or Windows containers depending on your Docker host, and to Xamarin for mobile apps running on Android, iOS or Windows/UWP plus any browser for the client web apps. The architecture proposes a microservice oriented architecture implementation with multiple autonomous microservices (each one owning its own data/db) and implementing different approaches within each microservice (simple CRUD vs. DDD/CQRS patterns) using Http as the communication protocol between the client apps and the microservices and supports asynchronous communication for data updates propagation across multiple services based on Integration Events and an Event Bus (a light message broker, to choose between RabbitMQ or Azure Service Bus, underneath) plus other features defined at the roadmap.","title":"eShopOnContainers"},{"location":"user-guide/zh/samples/eshoponcontainers/#eshoponcontainers-with-cap","text":"\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u5730\u5740\u770b\u5230\u5982\u4f55\u5728 eShopOnContainers \u4e2d\u4f7f\u7528 CAP\u3002 https://github.com/yang-xiaodong/eShopOnContainers","title":"eShopOnContainers with CAP"},{"location":"user-guide/zh/samples/faq/","text":"FAQ \u00b6 Any IM group(e.g Tencent QQ group) to learn and chat about CAP? None of that. Better than wasting much time in IM group, I hope developers could be capable of independent thinking more, and solve problems yourselves with referenced documents, even create issues or send emails when errors are remaining present. Does it require different databases, one each for producer and consumer in CAP? No difference necessary, a recommendation is to use a dedicated database for each program. Otherwise, look at Q&A below. How to use the same database for different applications? Define a table prefix name in ConfigureServices method. Code example\uff1a public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x => { x . UseKafka ( \"\" ); x . UseMySql ( opt => { opt . ConnectionString = \"connection string\" ; opt . TableNamePrefix = \"appone\" ; // different table name prefix here }); }); } Can CAP not use the database as event storage? I just want to send the message Not yet. The purpose of CAP is that ensure consistency principle right in microservice or SOA architectures. The solution is based on ACID features of database, there is no sense about a single client wapper of message queue without database. If the consumer is abnormal, can I roll back the database executed sql that the producer has executed? Can't roll back, CAP is the ultimate consistency solution. You can imagine your scenario is to call a third party payment. If you are doing a third-party payment operation, after calling Alipay's interface successfully, and your own code is wrong, will Alipay roll back? If you don't roll back, what should you do? The same is true here.","title":"FAQ"},{"location":"user-guide/zh/samples/faq/#faq","text":"Any IM group(e.g Tencent QQ group) to learn and chat about CAP? None of that. Better than wasting much time in IM group, I hope developers could be capable of independent thinking more, and solve problems yourselves with referenced documents, even create issues or send emails when errors are remaining present. Does it require different databases, one each for producer and consumer in CAP? No difference necessary, a recommendation is to use a dedicated database for each program. Otherwise, look at Q&A below. How to use the same database for different applications? Define a table prefix name in ConfigureServices method. Code example\uff1a public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( x => { x . UseKafka ( \"\" ); x . UseMySql ( opt => { opt . ConnectionString = \"connection string\" ; opt . TableNamePrefix = \"appone\" ; // different table name prefix here }); }); } Can CAP not use the database as event storage? I just want to send the message Not yet. The purpose of CAP is that ensure consistency principle right in microservice or SOA architectures. The solution is based on ACID features of database, there is no sense about a single client wapper of message queue without database. If the consumer is abnormal, can I roll back the database executed sql that the producer has executed? Can't roll back, CAP is the ultimate consistency solution. You can imagine your scenario is to call a third party payment. If you are doing a third-party payment operation, after calling Alipay's interface successfully, and your own code is wrong, will Alipay roll back? If you don't roll back, what should you do? The same is true here.","title":"FAQ"},{"location":"user-guide/zh/samples/github/","text":"Github \u4e0a\u7684\u793a\u4f8b \u00b6 \u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u5730\u5740\u627e\u5230\u76f8\u5173\u793a\u4f8b\u4ee3\u7801\uff1a https://github.com/dotnetcore/CAP/tree/master/samples","title":"Github"},{"location":"user-guide/zh/samples/github/#github","text":"\u4f60\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u5730\u5740\u627e\u5230\u76f8\u5173\u793a\u4f8b\u4ee3\u7801\uff1a https://github.com/dotnetcore/CAP/tree/master/samples","title":"Github \u4e0a\u7684\u793a\u4f8b"},{"location":"user-guide/zh/storage/general/","text":"\u57fa\u672c \u00b6 CAP \u9700\u8981\u4f7f\u7528\u5177\u6709\u6301\u4e45\u5316\u529f\u80fd\u7684\u5b58\u50a8\u4ecb\u8d28\u6765\u5b58\u50a8\u4e8b\u4ef6\u6d88\u606f\uff0c\u4f8b\u5982\u901a\u8fc7\u6570\u636e\u5e93\u6216\u8005\u5176\u4ed6NoSql\u8bbe\u65bd\u3002CAP \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5e94\u5bf9\u4e00\u5207\u73af\u5883\u6216\u8005\u7f51\u7edc\u5f02\u5e38\u5bfc\u81f4\u6d88\u606f\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u6d88\u606f\u7684\u53ef\u9760\u6027\u662f\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u57fa\u77f3\uff0c\u6240\u4ee5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u6d88\u606f\u90fd\u4e0d\u80fd\u4e22\u5931\u3002 \u6301\u4e45\u5316 \u00b6 \u53d1\u9001\u524d \u00b6 \u5728\u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u524d\uff0cCAP\u4f7f\u7528\u672c\u5730\u6570\u636e\u5e93\u8868\u5bf9\u6d88\u606f\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u6d88\u606f\u961f\u5217\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u7f51\u7edc\u9519\u8bef\u65f6\u5019\u6d88\u606f\u662f\u6ca1\u6709\u4e22\u5931\u7684\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u79cd\u673a\u5236\u7684\u53ef\u9760\u6027\uff0cCAP\u4f7f\u7528\u548c\u4e1a\u52a1\u4ee3\u7801\u76f8\u540c\u7684\u6570\u636e\u5e93\u4e8b\u52a1\u6765\u4fdd\u8bc1\u4e1a\u52a1\u64cd\u4f5c\u548cCAP\u7684\u6d88\u606f\u5728\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\u662f\u5f3a\u4e00\u81f4\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u8fdb\u884c\u6d88\u606f\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u4e00\u65b9\u53d1\u751f\u5f02\u5e38\u60c5\u51b5\u6570\u636e\u5e93\u90fd\u4f1a\u8fdb\u884c\u56de\u6eda\u64cd\u4f5c\u3002 \u53d1\u9001\u540e \u00b6 \u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\uff0cCAP\u4f1a\u542f\u52a8\u6d88\u606f\u961f\u5217\u7684\u6301\u4e45\u5316\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u5728 RabbitMQ \u548c Kafka \u4e2dCAP\u7684\u6d88\u606f\u662f\u5982\u4f55\u6301\u4e45\u5316\u7684\u3002 \u9488\u5bf9\u4e8e RabbitMQ \u4e2d\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0cCAP \u4f7f\u7528\u7684\u662f\u5177\u6709\u6d88\u606f\u6301\u4e45\u5316\u529f\u80fd\u7684\u6d88\u8d39\u8005\u961f\u5217\uff0c\u4f46\u662f\u8fd9\u91cc\u9762\u53ef\u80fd\u6709\u4f8b\u5916\u60c5\u51b5\uff0c\u53c2\u52a0 2.2.1 \u7ae0\u8282\u3002 \u7531\u4e8e Kafka \u5929\u751f\u8bbe\u8ba1\u7684\u5c31\u662f\u4f7f\u7528\u6587\u4ef6\u8fdb\u884c\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0c\u5728\u6240\u4ee5\u5728\u6d88\u606f\u8fdb\u5165\u5230Kafka\u4e4b\u540e\uff0cKafka\u4f1a\u4fdd\u8bc1\u6d88\u606f\u80fd\u591f\u6b63\u786e\u88ab\u6301\u4e45\u5316\u800c\u4e0d\u4e22\u5931\u3002 \u6d88\u606f\u5b58\u50a8 \u00b6 \u652f\u6301\u7684\u5b58\u50a8 \u00b6 CAP \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u5177\u6709\u4e8b\u52a1\u652f\u6301\u7684\u6570\u636e\u5e93\u505a\u4e3a\u5b58\u50a8\uff1a SQL Server MySQL PostgreSql MongoDB In-Memory Storage \u5728 CAP \u542f\u52a8\u540e\uff0c\u4f1a\u5411\u6301\u4e45\u5316\u4ecb\u8d28\u4e2d\u751f\u6210\u4e24\u4e2a\u8868\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u540d\u79f0\u4e3a\uff1a Cap.Published Cap.Received \u3002 \u5b58\u50a8\u683c\u5f0f \u00b6 Published \u8868\u7ed3\u6784\uff1a NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string Received \u8868\u7ed3\u6784\uff1a NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Group Group Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string \u5305\u88c5\u5668\u5bf9\u8c61 \u00b6 CAP \u5728\u8fdb\u884c\u6d88\u606f\u53d1\u9001\u5230\u65f6\u5019\uff0c\u4f1a\u5bf9\u539f\u59cb\u6d88\u606f\u5bf9\u8c61\u8fdb\u884c\u4e00\u4e2a\u4e8c\u6b21\u5305\u88c5\u5b58\u50a8\u5230 Content \u5b57\u6bb5\u4e2d\uff0c\u4ee5\u4e0b\u4e3a\u5305\u88c5 Content \u7684 Message \u5bf9\u8c61\u6570\u636e\u7ed3\u6784\uff1a NAME DESCRIPTION TYPE Id CAP\u751f\u6210\u7684\u6d88\u606f\u7f16\u53f7 string Timestamp \u6d88\u606f\u521b\u5efa\u65f6\u95f4 string Content \u5185\u5bb9 string CallbackName \u56de\u8c03\u7684\u8ba2\u9605\u8005\u540d\u79f0 string \u5176\u4e2d Id \u5b57\u6bb5\uff0cCAP \u91c7\u7528\u7684 MongoDB \u4e2d\u7684 ObjectId \u5206\u5e03\u5f0fId\u751f\u6210\u7b97\u6cd5\u751f\u6210\u3002 \u793e\u533a\u652f\u6301\u7684\u6301\u4e45\u5316 \u00b6 \u611f\u8c22\u793e\u533a\u5bf9CAP\u7684\u652f\u6301\uff0c\u4ee5\u4e0b\u662f\u793e\u533a\u652f\u6301\u7684\u6301\u4e45\u5316\u7684\u5b9e\u73b0 SQLite ( @colinin ) \uff1a https://github.com/colinin/DotNetCore.CAP.Sqlite LiteDB ( @maikebing ) \uff1a https://github.com/maikebing/CAP.Extensions SQLite & Oracle ( @cocosip ) \uff1a https://github.com/cocosip/CAP-Extensions SmartSql ( @xiangxiren ) \uff1a https://github.com/xiangxiren/SmartSql.CAP","title":"\u7b80\u4ecb"},{"location":"user-guide/zh/storage/general/#_1","text":"CAP \u9700\u8981\u4f7f\u7528\u5177\u6709\u6301\u4e45\u5316\u529f\u80fd\u7684\u5b58\u50a8\u4ecb\u8d28\u6765\u5b58\u50a8\u4e8b\u4ef6\u6d88\u606f\uff0c\u4f8b\u5982\u901a\u8fc7\u6570\u636e\u5e93\u6216\u8005\u5176\u4ed6NoSql\u8bbe\u65bd\u3002CAP \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5e94\u5bf9\u4e00\u5207\u73af\u5883\u6216\u8005\u7f51\u7edc\u5f02\u5e38\u5bfc\u81f4\u6d88\u606f\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u6d88\u606f\u7684\u53ef\u9760\u6027\u662f\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u57fa\u77f3\uff0c\u6240\u4ee5\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u6d88\u606f\u90fd\u4e0d\u80fd\u4e22\u5931\u3002","title":"\u57fa\u672c"},{"location":"user-guide/zh/storage/general/#_2","text":"","title":"\u6301\u4e45\u5316"},{"location":"user-guide/zh/storage/general/#_3","text":"\u5728\u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u524d\uff0cCAP\u4f7f\u7528\u672c\u5730\u6570\u636e\u5e93\u8868\u5bf9\u6d88\u606f\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u6d88\u606f\u961f\u5217\u51fa\u73b0\u5f02\u5e38\u6216\u8005\u7f51\u7edc\u9519\u8bef\u65f6\u5019\u6d88\u606f\u662f\u6ca1\u6709\u4e22\u5931\u7684\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u79cd\u673a\u5236\u7684\u53ef\u9760\u6027\uff0cCAP\u4f7f\u7528\u548c\u4e1a\u52a1\u4ee3\u7801\u76f8\u540c\u7684\u6570\u636e\u5e93\u4e8b\u52a1\u6765\u4fdd\u8bc1\u4e1a\u52a1\u64cd\u4f5c\u548cCAP\u7684\u6d88\u606f\u5728\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\u662f\u5f3a\u4e00\u81f4\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u5728\u8fdb\u884c\u6d88\u606f\u6301\u4e45\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u4e00\u65b9\u53d1\u751f\u5f02\u5e38\u60c5\u51b5\u6570\u636e\u5e93\u90fd\u4f1a\u8fdb\u884c\u56de\u6eda\u64cd\u4f5c\u3002","title":"\u53d1\u9001\u524d"},{"location":"user-guide/zh/storage/general/#_4","text":"\u6d88\u606f\u8fdb\u5165\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\uff0cCAP\u4f1a\u542f\u52a8\u6d88\u606f\u961f\u5217\u7684\u6301\u4e45\u5316\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u5728 RabbitMQ \u548c Kafka \u4e2dCAP\u7684\u6d88\u606f\u662f\u5982\u4f55\u6301\u4e45\u5316\u7684\u3002 \u9488\u5bf9\u4e8e RabbitMQ \u4e2d\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0cCAP \u4f7f\u7528\u7684\u662f\u5177\u6709\u6d88\u606f\u6301\u4e45\u5316\u529f\u80fd\u7684\u6d88\u8d39\u8005\u961f\u5217\uff0c\u4f46\u662f\u8fd9\u91cc\u9762\u53ef\u80fd\u6709\u4f8b\u5916\u60c5\u51b5\uff0c\u53c2\u52a0 2.2.1 \u7ae0\u8282\u3002 \u7531\u4e8e Kafka \u5929\u751f\u8bbe\u8ba1\u7684\u5c31\u662f\u4f7f\u7528\u6587\u4ef6\u8fdb\u884c\u7684\u6d88\u606f\u6301\u4e45\u5316\uff0c\u5728\u6240\u4ee5\u5728\u6d88\u606f\u8fdb\u5165\u5230Kafka\u4e4b\u540e\uff0cKafka\u4f1a\u4fdd\u8bc1\u6d88\u606f\u80fd\u591f\u6b63\u786e\u88ab\u6301\u4e45\u5316\u800c\u4e0d\u4e22\u5931\u3002","title":"\u53d1\u9001\u540e"},{"location":"user-guide/zh/storage/general/#_5","text":"","title":"\u6d88\u606f\u5b58\u50a8"},{"location":"user-guide/zh/storage/general/#_6","text":"CAP \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u5177\u6709\u4e8b\u52a1\u652f\u6301\u7684\u6570\u636e\u5e93\u505a\u4e3a\u5b58\u50a8\uff1a SQL Server MySQL PostgreSql MongoDB In-Memory Storage \u5728 CAP \u542f\u52a8\u540e\uff0c\u4f1a\u5411\u6301\u4e45\u5316\u4ecb\u8d28\u4e2d\u751f\u6210\u4e24\u4e2a\u8868\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u540d\u79f0\u4e3a\uff1a Cap.Published Cap.Received \u3002","title":"\u652f\u6301\u7684\u5b58\u50a8"},{"location":"user-guide/zh/storage/general/#_7","text":"Published \u8868\u7ed3\u6784\uff1a NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string Received \u8868\u7ed3\u6784\uff1a NAME DESCRIPTION TYPE Id Message Id int Version Message Version string Name Topic Name string Group Group Name string Content Json Content string Added Added Time DateTime ExpiresAt Expire time DateTime Retries Retry times int StatusName Status Name string","title":"\u5b58\u50a8\u683c\u5f0f"},{"location":"user-guide/zh/storage/general/#_8","text":"CAP \u5728\u8fdb\u884c\u6d88\u606f\u53d1\u9001\u5230\u65f6\u5019\uff0c\u4f1a\u5bf9\u539f\u59cb\u6d88\u606f\u5bf9\u8c61\u8fdb\u884c\u4e00\u4e2a\u4e8c\u6b21\u5305\u88c5\u5b58\u50a8\u5230 Content \u5b57\u6bb5\u4e2d\uff0c\u4ee5\u4e0b\u4e3a\u5305\u88c5 Content \u7684 Message \u5bf9\u8c61\u6570\u636e\u7ed3\u6784\uff1a NAME DESCRIPTION TYPE Id CAP\u751f\u6210\u7684\u6d88\u606f\u7f16\u53f7 string Timestamp \u6d88\u606f\u521b\u5efa\u65f6\u95f4 string Content \u5185\u5bb9 string CallbackName \u56de\u8c03\u7684\u8ba2\u9605\u8005\u540d\u79f0 string \u5176\u4e2d Id \u5b57\u6bb5\uff0cCAP \u91c7\u7528\u7684 MongoDB \u4e2d\u7684 ObjectId \u5206\u5e03\u5f0fId\u751f\u6210\u7b97\u6cd5\u751f\u6210\u3002","title":"\u5305\u88c5\u5668\u5bf9\u8c61"},{"location":"user-guide/zh/storage/general/#_9","text":"\u611f\u8c22\u793e\u533a\u5bf9CAP\u7684\u652f\u6301\uff0c\u4ee5\u4e0b\u662f\u793e\u533a\u652f\u6301\u7684\u6301\u4e45\u5316\u7684\u5b9e\u73b0 SQLite ( @colinin ) \uff1a https://github.com/colinin/DotNetCore.CAP.Sqlite LiteDB ( @maikebing ) \uff1a https://github.com/maikebing/CAP.Extensions SQLite & Oracle ( @cocosip ) \uff1a https://github.com/cocosip/CAP-Extensions SmartSql ( @xiangxiren ) \uff1a https://github.com/xiangxiren/SmartSql.CAP","title":"\u793e\u533a\u652f\u6301\u7684\u6301\u4e45\u5316"},{"location":"user-guide/zh/storage/in-memory-storage/","text":"In-Memory Storage \u00b6 \u5185\u5b58\u6d88\u606f\u7684\u6301\u4e45\u5316\u5b58\u50a8\u5e38\u7528\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\uff0c\u5982\u679c\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u5b58\u50a8\u5219\u4f60\u4f1a\u5931\u53bb\u672c\u5730\u4e8b\u52a1\u6d88\u606f\u53ef\u9760\u6027\u4fdd\u8bc1\u3002 \u914d\u7f6e \u00b6 \u5982\u679c\u8981\u4f7f\u7528\u5185\u5b58\u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.InMemoryStorage \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseInMemoryStorage (); // x.UseXXX ... }); } \u5185\u5b58\u4e2d\u7684\u53d1\u9001\u6210\u529f\u6d88\u606f\uff0cCAP \u5c06\u4f1a\u6bcf 5\u5206\u949f \u8fdb\u884c\u4e00\u6b21\u6e05\u7406\u3002 Publish with transaction \u00b6 In-Memory \u5b58\u50a8 \u4e0d\u652f\u6301 \u4e8b\u52a1\u65b9\u5f0f\u53d1\u9001\u6d88\u606f\u3002","title":"In-Memory"},{"location":"user-guide/zh/storage/in-memory-storage/#in-memory-storage","text":"\u5185\u5b58\u6d88\u606f\u7684\u6301\u4e45\u5316\u5b58\u50a8\u5e38\u7528\u4e8e\u5f00\u53d1\u548c\u6d4b\u8bd5\u73af\u5883\uff0c\u5982\u679c\u4f7f\u7528\u57fa\u4e8e\u5185\u5b58\u7684\u5b58\u50a8\u5219\u4f60\u4f1a\u5931\u53bb\u672c\u5730\u4e8b\u52a1\u6d88\u606f\u53ef\u9760\u6027\u4fdd\u8bc1\u3002","title":"In-Memory Storage"},{"location":"user-guide/zh/storage/in-memory-storage/#_1","text":"\u5982\u679c\u8981\u4f7f\u7528\u5185\u5b58\u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.InMemoryStorage \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseInMemoryStorage (); // x.UseXXX ... }); } \u5185\u5b58\u4e2d\u7684\u53d1\u9001\u6210\u529f\u6d88\u606f\uff0cCAP \u5c06\u4f1a\u6bcf 5\u5206\u949f \u8fdb\u884c\u4e00\u6b21\u6e05\u7406\u3002","title":"\u914d\u7f6e"},{"location":"user-guide/zh/storage/in-memory-storage/#publish-with-transaction","text":"In-Memory \u5b58\u50a8 \u4e0d\u652f\u6301 \u4e8b\u52a1\u65b9\u5f0f\u53d1\u9001\u6d88\u606f\u3002","title":"Publish with transaction"},{"location":"user-guide/zh/storage/mongodb/","text":"MongoDB \u00b6 MongoDB \u662f\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684\u9762\u5411\u6587\u6863\u578b\u7684\u6570\u636e\u5e93\u7a0b\u5e8f\uff0c\u5b83\u88ab\u5f52\u4e3a NOSQL \u6570\u636e\u5e93\uff0cCAP \u4ece 2.3 \u7248\u672c\u5f00\u59cb\u652f\u6301 MongoDB \u4f5c\u4e3a\u6d88\u606f\u5b58\u50a8\u3002 MongoDB \u4ece 4.0 \u7248\u672c\u5f00\u59cb\u652f\u6301 ACID \u4e8b\u52a1\uff0c\u6240\u4ee5 CAP \u4e5f\u53ea\u652f\u6301 4.0 \u4ee5\u4e0a\u7684 MongoDB\uff0c\u5e76\u4e14 MongoDB \u9700\u8981\u90e8\u7f72\u4e3a\u96c6\u7fa4\uff0c\u56e0\u4e3a MongoDB \u7684 ACID \u4e8b\u52a1\u9700\u8981\u96c6\u7fa4\u624d\u53ef\u4ee5\u4f7f\u7528\u3002 \u6709\u5173\u5f00\u53d1\u73af\u5883\u5982\u4f55\u5feb\u901f\u642d\u5efa MongoDB 4.0+ \u96c6\u7fa4\uff0c\u4f60\u53ef\u4ee5\u6211\u7684\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528 MongoDB \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.MongoDB \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseMongoDB ( opt =>{ //MongoDBOptions }); // x.UseXXX ... }); } \u914d\u7f6e\u9879 \u00b6 NAME DESCRIPTION TYPE DEFAULT DatabaseName \u6570\u636e\u5e93\u540d\u79f0 string cap DatabaseConnection \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string mongodb://localhost:27017 ReceivedCollection \u63a5\u6536\u6d88\u606f\u96c6\u5408\u540d\u79f0 string cap.received PublishedCollection \u53d1\u9001\u6d88\u606f\u96c6\u5408\u540d\u79f0 string cap.published \u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528 CAP \u548c MongoDB \u8fdb\u884c\u672c\u5730\u4e8b\u52a1\u96c6\u6210\u3002 //NOTE: before your test, your need to create database and collection at first //\u6ce8\u610f\uff1aMongoDB \u4e0d\u80fd\u5728\u4e8b\u52a1\u4e2d\u521b\u5efa\u6570\u636e\u5e93\u548c\u96c6\u5408\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5355\u72ec\u521b\u5efa\u5b83\u4eec\uff0c\u6a21\u62df\u4e00\u6761\u8bb0\u5f55\u63d2\u5165\u5219\u4f1a\u81ea\u52a8\u521b\u5efa //var mycollection = _client.GetDatabase(\"test\").GetCollection<BsonDocument>(\"test.collection\"); //mycollection.InsertOne(new BsonDocument { { \"test\", \"test\" } }); using ( var session = _client . StartTransaction ( _capBus , autoCommit : false )) { var collection = _client . GetDatabase ( \"test\" ). GetCollection < BsonDocument >( \"test.collection\" ); collection . InsertOne ( session , new BsonDocument { { \"hello\" , \"world\" } }); _capBus . Publish ( \"sample.rabbitmq.mongodb\" , DateTime . Now ); session . CommitTransaction (); }","title":"MongoDB"},{"location":"user-guide/zh/storage/mongodb/#mongodb","text":"MongoDB \u662f\u4e00\u4e2a\u8de8\u5e73\u53f0\u7684\u9762\u5411\u6587\u6863\u578b\u7684\u6570\u636e\u5e93\u7a0b\u5e8f\uff0c\u5b83\u88ab\u5f52\u4e3a NOSQL \u6570\u636e\u5e93\uff0cCAP \u4ece 2.3 \u7248\u672c\u5f00\u59cb\u652f\u6301 MongoDB \u4f5c\u4e3a\u6d88\u606f\u5b58\u50a8\u3002 MongoDB \u4ece 4.0 \u7248\u672c\u5f00\u59cb\u652f\u6301 ACID \u4e8b\u52a1\uff0c\u6240\u4ee5 CAP \u4e5f\u53ea\u652f\u6301 4.0 \u4ee5\u4e0a\u7684 MongoDB\uff0c\u5e76\u4e14 MongoDB \u9700\u8981\u90e8\u7f72\u4e3a\u96c6\u7fa4\uff0c\u56e0\u4e3a MongoDB \u7684 ACID \u4e8b\u52a1\u9700\u8981\u96c6\u7fa4\u624d\u53ef\u4ee5\u4f7f\u7528\u3002 \u6709\u5173\u5f00\u53d1\u73af\u5883\u5982\u4f55\u5feb\u901f\u642d\u5efa MongoDB 4.0+ \u96c6\u7fa4\uff0c\u4f60\u53ef\u4ee5\u6211\u7684\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u3002","title":"MongoDB"},{"location":"user-guide/zh/storage/mongodb/#_1","text":"\u8981\u4f7f\u7528 MongoDB \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.MongoDB \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseMongoDB ( opt =>{ //MongoDBOptions }); // x.UseXXX ... }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/storage/mongodb/#_2","text":"NAME DESCRIPTION TYPE DEFAULT DatabaseName \u6570\u636e\u5e93\u540d\u79f0 string cap DatabaseConnection \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string mongodb://localhost:27017 ReceivedCollection \u63a5\u6536\u6d88\u606f\u96c6\u5408\u540d\u79f0 string cap.received PublishedCollection \u53d1\u9001\u6d88\u606f\u96c6\u5408\u540d\u79f0 string cap.published","title":"\u914d\u7f6e\u9879"},{"location":"user-guide/zh/storage/mongodb/#_3","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528 CAP \u548c MongoDB \u8fdb\u884c\u672c\u5730\u4e8b\u52a1\u96c6\u6210\u3002 //NOTE: before your test, your need to create database and collection at first //\u6ce8\u610f\uff1aMongoDB \u4e0d\u80fd\u5728\u4e8b\u52a1\u4e2d\u521b\u5efa\u6570\u636e\u5e93\u548c\u96c6\u5408\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5355\u72ec\u521b\u5efa\u5b83\u4eec\uff0c\u6a21\u62df\u4e00\u6761\u8bb0\u5f55\u63d2\u5165\u5219\u4f1a\u81ea\u52a8\u521b\u5efa //var mycollection = _client.GetDatabase(\"test\").GetCollection<BsonDocument>(\"test.collection\"); //mycollection.InsertOne(new BsonDocument { { \"test\", \"test\" } }); using ( var session = _client . StartTransaction ( _capBus , autoCommit : false )) { var collection = _client . GetDatabase ( \"test\" ). GetCollection < BsonDocument >( \"test.collection\" ); collection . InsertOne ( session , new BsonDocument { { \"hello\" , \"world\" } }); _capBus . Publish ( \"sample.rabbitmq.mongodb\" , DateTime . Now ); session . CommitTransaction (); }","title":"\u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f"},{"location":"user-guide/zh/storage/mysql/","text":"MySQL \u00b6 MySQL \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528 MySQL \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.MySql \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseMySql ( opt =>{ //MySqlOptions }); // x.UseXXX ... }); } \u914d\u7f6e\u9879 \u00b6 NAME DESCRIPTION TYPE DEFAULT TableNamePrefix Cap\u8868\u540d\u524d\u7f00 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null \u81ea\u5b9a\u4e49\u8868\u540d\u79f0 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 IStorageInitializer \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \u793a\u4f8b\u4ee3\u7801\uff1a public class MyTableInitializer : MySqlStorageInitializer { public override string GetPublishedTableName () { //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0 } public override string GetReceivedTableName () { //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0 } } \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d services.AddSingleton<IStorageInitializer, MyTableInitializer>(); \u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f \u00b6 ADO.NET \u00b6 private readonly ICapPublisher _capBus ; using ( var connection = new MySqlConnection ( AppDbContext . ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } } EntityFramework \u00b6 private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"MySQL"},{"location":"user-guide/zh/storage/mysql/#mysql","text":"MySQL \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 MySQL \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002","title":"MySQL"},{"location":"user-guide/zh/storage/mysql/#_1","text":"\u8981\u4f7f\u7528 MySQL \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.MySql \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseMySql ( opt =>{ //MySqlOptions }); // x.UseXXX ... }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/storage/mysql/#_2","text":"NAME DESCRIPTION TYPE DEFAULT TableNamePrefix Cap\u8868\u540d\u524d\u7f00 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string null","title":"\u914d\u7f6e\u9879"},{"location":"user-guide/zh/storage/mysql/#_3","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 IStorageInitializer \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \u793a\u4f8b\u4ee3\u7801\uff1a public class MyTableInitializer : MySqlStorageInitializer { public override string GetPublishedTableName () { //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0 } public override string GetReceivedTableName () { //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0 } } \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d services.AddSingleton<IStorageInitializer, MyTableInitializer>();","title":"\u81ea\u5b9a\u4e49\u8868\u540d\u79f0"},{"location":"user-guide/zh/storage/mysql/#_4","text":"","title":"\u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f"},{"location":"user-guide/zh/storage/mysql/#adonet","text":"private readonly ICapPublisher _capBus ; using ( var connection = new MySqlConnection ( AppDbContext . ConnectionString )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } }","title":"ADO.NET"},{"location":"user-guide/zh/storage/mysql/#entityframework","text":"private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"EntityFramework"},{"location":"user-guide/zh/storage/postgresql/","text":"Postgre SQL \u00b6 PostgreSQL \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u5b83\u5df2\u7ecf\u53d8\u5f97\u8d8a\u6765\u8d8a\u6d41\u884c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Postgre SQL \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528 PostgreSQL \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.PostgreSql \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UsePostgreSql ( opt =>{ //PostgreSqlOptions }); // x.UseXXX ... }); } \u914d\u7f6e\u9879 \u00b6 NAME DESCRIPTION TYPE DEFAULT Schema \u6570\u636e\u5e93\u67b6\u6784 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string \u81ea\u5b9a\u4e49\u8868\u540d\u79f0 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 IStorageInitializer \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \u793a\u4f8b\u4ee3\u7801\uff1a public class MyTableInitializer : PostgreSqlStorageInitializer { public override string GetPublishedTableName () { //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0 } public override string GetReceivedTableName () { //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0 } } \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d services.AddSingleton<IStorageInitializer, MyTableInitializer>(); \u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f \u00b6 ADO.NET \u00b6 private readonly ICapPublisher _capBus ; using ( var connection = new NpgsqlConnection ( \"ConnectionString\" )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } } EntityFramework \u00b6 private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"PostgreSql"},{"location":"user-guide/zh/storage/postgresql/#postgre-sql","text":"PostgreSQL \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u5b83\u5df2\u7ecf\u53d8\u5f97\u8d8a\u6765\u8d8a\u6d41\u884c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Postgre SQL \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002","title":"Postgre SQL"},{"location":"user-guide/zh/storage/postgresql/#_1","text":"\u8981\u4f7f\u7528 PostgreSQL \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.PostgreSql \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UsePostgreSql ( opt =>{ //PostgreSqlOptions }); // x.UseXXX ... }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/storage/postgresql/#_2","text":"NAME DESCRIPTION TYPE DEFAULT Schema \u6570\u636e\u5e93\u67b6\u6784 string cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string","title":"\u914d\u7f6e\u9879"},{"location":"user-guide/zh/storage/postgresql/#_3","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 IStorageInitializer \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \u793a\u4f8b\u4ee3\u7801\uff1a public class MyTableInitializer : PostgreSqlStorageInitializer { public override string GetPublishedTableName () { //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0 } public override string GetReceivedTableName () { //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0 } } \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d services.AddSingleton<IStorageInitializer, MyTableInitializer>();","title":"\u81ea\u5b9a\u4e49\u8868\u540d\u79f0"},{"location":"user-guide/zh/storage/postgresql/#_4","text":"","title":"\u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f"},{"location":"user-guide/zh/storage/postgresql/#adonet","text":"private readonly ICapPublisher _capBus ; using ( var connection = new NpgsqlConnection ( \"ConnectionString\" )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } }","title":"ADO.NET"},{"location":"user-guide/zh/storage/postgresql/#entityframework","text":"private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"EntityFramework"},{"location":"user-guide/zh/storage/sqlserver/","text":"SQL Server \u00b6 SQL Server \u662f\u7531\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u4e2a\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 SQL Server \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002 \u6ce8\u610f \u6211\u4eec\u76ee\u524d\u4f7f\u7528 Microsoft.Data.SqlClient \u4f5c\u4e3a\u6570\u636e\u5e93\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5b83\u662fSQL Server \u9a71\u52a8\u7684\u672a\u6765\uff0c\u5e76\u4e14\u5df2\u7ecf\u653e\u5f03\u4e86 System.Data.SqlClient \uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5207\u6362\u8fc7\u53bb\u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528 SQL Server \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.SqlServer \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseSqlServer ( opt =>{ //SqlServerOptions }); // x.UseXXX ... }); } \u914d\u7f6e\u9879 \u00b6 NAME DESCRIPTION TYPE DEFAULT Schema \u6570\u636e\u5e93\u67b6\u6784 string Cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string \u81ea\u5b9a\u4e49\u8868\u540d\u79f0 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 IStorageInitializer \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \u793a\u4f8b\u4ee3\u7801\uff1a public class MyTableInitializer : SqlServerStorageInitializer { public override string GetPublishedTableName () { //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0 } public override string GetReceivedTableName () { //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0 } } \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d services.AddSingleton<IStorageInitializer, MyTableInitializer>(); \u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f \u00b6 ADO.NET \u00b6 private readonly ICapPublisher _capBus ; using ( var connection = new SqlConnection ( \"ConnectionString\" )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } } EntityFramework \u00b6 private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"SQL Server"},{"location":"user-guide/zh/storage/sqlserver/#sql-server","text":"SQL Server \u662f\u7531\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u4e2a\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 SQL Server \u6765\u4f5c\u4e3a CAP \u6d88\u606f\u7684\u6301\u4e45\u5316\u3002 \u6ce8\u610f \u6211\u4eec\u76ee\u524d\u4f7f\u7528 Microsoft.Data.SqlClient \u4f5c\u4e3a\u6570\u636e\u5e93\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5b83\u662fSQL Server \u9a71\u52a8\u7684\u672a\u6765\uff0c\u5e76\u4e14\u5df2\u7ecf\u653e\u5f03\u4e86 System.Data.SqlClient \uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5207\u6362\u8fc7\u53bb\u3002","title":"SQL Server"},{"location":"user-guide/zh/storage/sqlserver/#_1","text":"\u8981\u4f7f\u7528 SQL Server \u5b58\u50a8\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.SqlServer \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseSqlServer ( opt =>{ //SqlServerOptions }); // x.UseXXX ... }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/storage/sqlserver/#_2","text":"NAME DESCRIPTION TYPE DEFAULT Schema \u6570\u636e\u5e93\u67b6\u6784 string Cap ConnectionString \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32 string","title":"\u914d\u7f6e\u9879"},{"location":"user-guide/zh/storage/sqlserver/#_3","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 IStorageInitializer \u63a5\u53e3\u83b7\u53d6\u8868\u540d\u79f0\u7684\u65b9\u6cd5\u6765\u505a\u5230\u8fd9\u4e00\u70b9 \u793a\u4f8b\u4ee3\u7801\uff1a public class MyTableInitializer : SqlServerStorageInitializer { public override string GetPublishedTableName () { //\u4f60\u7684 \u53d1\u9001\u6d88\u606f\u8868 \u540d\u79f0 } public override string GetReceivedTableName () { //\u4f60\u7684 \u63a5\u6536\u6d88\u606f\u8868 \u540d\u79f0 } } \u7136\u540e\u5c06\u4f60\u7684\u5b9e\u73b0\u6ce8\u518c\u5230\u5bb9\u5668\u4e2d services.AddSingleton<IStorageInitializer, MyTableInitializer>();","title":"\u81ea\u5b9a\u4e49\u8868\u540d\u79f0"},{"location":"user-guide/zh/storage/sqlserver/#_4","text":"","title":"\u4f7f\u7528\u4e8b\u52a1\u53d1\u5e03\u6d88\u606f"},{"location":"user-guide/zh/storage/sqlserver/#adonet","text":"private readonly ICapPublisher _capBus ; using ( var connection = new SqlConnection ( \"ConnectionString\" )) { using ( var transaction = connection . BeginTransaction ( _capBus , autoCommit : false )) { //your business code connection . Execute ( \"insert into test(name) values('test')\" , transaction : ( IDbTransaction ) transaction . DbTransaction ); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); transaction . Commit (); } }","title":"ADO.NET"},{"location":"user-guide/zh/storage/sqlserver/#entityframework","text":"private readonly ICapPublisher _capBus ; using ( var trans = dbContext . Database . BeginTransaction ( _capBus , autoCommit : false )) { dbContext . Persons . Add ( new Person () { Name = \"ef.transaction\" }); _capBus . Publish ( \"sample.rabbitmq.mysql\" , DateTime . Now ); dbContext . SaveChanges (); trans . Commit (); }","title":"EntityFramework"},{"location":"user-guide/zh/transport/aws-sqs/","text":"Amazon SQS \u00b6 AWS SQS \u662f\u4e00\u79cd\u5b8c\u5168\u6258\u7ba1\u7684\u6d88\u606f\u961f\u5217\u670d\u52a1\uff0c\u53ef\u8ba9\u60a8\u5206\u79bb\u548c\u6269\u5c55\u5fae\u670d\u52a1\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u3002 AWS SNS \u662f\u4e00\u79cd\u9ad8\u5ea6\u53ef\u7528\u3001\u6301\u4e45\u3001\u5b89\u5168\u3001\u5b8c\u5168\u6258\u7ba1\u7684\u53d1\u5e03/\u8ba2\u9605\u6d88\u606f\u6536\u53d1\u670d\u52a1\uff0c\u53ef\u4ee5\u8f7b\u677e\u5206\u79bb\u5fae\u670d\u52a1\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u3002 CAP \u5982\u4f55\u4f7f\u7528 AWS SNS & SQS \u00b6 SNS \u00b6 \u7531\u4e8e CAP \u662f\u57fa\u4e8e Topic \u6a21\u5f0f\u5de5\u4f5c\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u5230 AWS SNS\uff0cSNS \u7b80\u5316\u4e86\u6d88\u606f\u7684\u53d1\u5e03\u8ba2\u9605\u67b6\u6784\u3002 \u5728 CAP \u542f\u52a8\u65f6\u4f1a\u5c06\u6240\u6709\u7684\u8ba2\u9605\u540d\u79f0\u6ce8\u518c\u4e3a SNS \u7684 Topic\uff0c\u4f60\u5c06\u4f1a\u5728\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\u770b\u5230\u6240\u6709\u5df2\u7ecf\u6ce8\u518c\u7684 Topic \u5217\u8868\u3002 \u7531\u4e8e SNS \u4e0d\u652f\u6301\u4f7f\u7528 . : \u7b49\u7b26\u53f7\u4f5c\u4e3a Topic \u7684\u540d\u79f0\uff0c\u6240\u4ee5\u6211\u4eec\u8fdb\u884c\u4e86\u66ff\u6362\uff0c\u6211\u4eec\u5c06 . \u66ff\u6362\u4e3a\u4e86 - \uff0c\u5c06 : \u66ff\u6362\u4e3a\u4e86 _ \u6ce8\u610f\u4e8b\u9879 Amazon SNS \u5f53\u524d\u5141\u8bb8\u53d1\u5e03\u7684\u6d88\u606f\u6700\u5927\u5927\u5c0f\u4e3a 256KB \u4e3e\u4f8b\uff0c\u4f60\u7684\u5f53\u524d\u9879\u76ee\u4e2d\u6709\u4ee5\u4e0b\u4e24\u4e2a\u8ba2\u9605\u8005\u65b9\u6cd5 [CapSubscribe(\"sample.sns.foo\")] public void TestFoo ( DateTime value ) { } [CapSubscribe(\"sample.sns.bar\")] public void TestBar ( DateTime value ) { } \u5728 CAP \u542f\u52a8\u540e\uff0c\u5728 AWS SNS \u4e2d\u4f60\u5c06\u770b\u5230 SQS \u00b6 \u9488\u5bf9\u6bcf\u4e2a\u6d88\u8d39\u8005\u7ec4\uff0cCAP \u5c06\u521b\u5efa\u4e00\u4e2a\u4e0e\u4e4b\u5bf9\u5e94\u7684 SQS \u961f\u5217\uff0c\u961f\u5217\u7684\u540d\u79f0\u4e3a\u914d\u7f6e\u9879\u4e2d DefaultGroup \u7684\u540d\u79f0\uff0c\u7c7b\u578b\u4e3a Standard Queue \u3002 \u8be5 SQS \u961f\u5217\u5c06\u8ba2\u9605 SNS \u4e2d\u7684 Topic \uff0c\u5982\u4e0b\u56fe\uff1a \u6ce8\u610f\u4e8b\u9879 \u7531\u4e8e AWS SNS \u7684\u9650\u5236\uff0c\u5f53\u4f60\u51cf\u5c11\u8ba2\u9605\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u4e0d\u4f1a\u4e3b\u52a8\u5220\u9664 AWS SNS \u6216\u8005 SQS \u4e0a\u7684\u76f8\u5173 Topic \u6216 Queue\uff0c\u4f60\u9700\u8981\u624b\u52a8\u5220\u9664\u4ed6\u4eec\u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528 AWS SQS \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.AmazonSQS \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e RabbitMQ \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseAmazonSQS ( opt => { //AmazonSQSOptions }); // x.UseXXX ... }); } AmazonSQS Options \u00b6 CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 AmazonSQSOptions \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT Region AWS \u6240\u5904\u7684\u533a\u57df Amazon.RegionEndpoint Credentials AWS AK SK\u4fe1\u606f Amazon.Runtime.AWSCredentials \u5982\u679c\u4f60\u7684\u9879\u76ee\u8fd0\u884c\u5728 AWS EC2 \u4e2d\uff0c\u5219\u4e0d\u9700\u8981\u8bbe\u7f6e Credentials\uff0c\u76f4\u63a5\u5bf9 EC2 \u5e94\u7528 IAM \u7b56\u7565\u5373\u53ef\u3002 Credentials \u9700\u8981\u5177\u6709\u65b0\u589e\u548c\u8ba2\u9605 SNS Topic\uff0cSQS Queue \u7b49\u6743\u9650\u3002","title":"Amazon SQS"},{"location":"user-guide/zh/transport/aws-sqs/#amazon-sqs","text":"AWS SQS \u662f\u4e00\u79cd\u5b8c\u5168\u6258\u7ba1\u7684\u6d88\u606f\u961f\u5217\u670d\u52a1\uff0c\u53ef\u8ba9\u60a8\u5206\u79bb\u548c\u6269\u5c55\u5fae\u670d\u52a1\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u3002 AWS SNS \u662f\u4e00\u79cd\u9ad8\u5ea6\u53ef\u7528\u3001\u6301\u4e45\u3001\u5b89\u5168\u3001\u5b8c\u5168\u6258\u7ba1\u7684\u53d1\u5e03/\u8ba2\u9605\u6d88\u606f\u6536\u53d1\u670d\u52a1\uff0c\u53ef\u4ee5\u8f7b\u677e\u5206\u79bb\u5fae\u670d\u52a1\u3001\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u3002","title":"Amazon SQS"},{"location":"user-guide/zh/transport/aws-sqs/#cap-aws-sns-sqs","text":"","title":"CAP \u5982\u4f55\u4f7f\u7528 AWS SNS &amp; SQS"},{"location":"user-guide/zh/transport/aws-sqs/#sns","text":"\u7531\u4e8e CAP \u662f\u57fa\u4e8e Topic \u6a21\u5f0f\u5de5\u4f5c\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u5230 AWS SNS\uff0cSNS \u7b80\u5316\u4e86\u6d88\u606f\u7684\u53d1\u5e03\u8ba2\u9605\u67b6\u6784\u3002 \u5728 CAP \u542f\u52a8\u65f6\u4f1a\u5c06\u6240\u6709\u7684\u8ba2\u9605\u540d\u79f0\u6ce8\u518c\u4e3a SNS \u7684 Topic\uff0c\u4f60\u5c06\u4f1a\u5728\u7ba1\u7406\u63a7\u5236\u53f0\u4e2d\u770b\u5230\u6240\u6709\u5df2\u7ecf\u6ce8\u518c\u7684 Topic \u5217\u8868\u3002 \u7531\u4e8e SNS \u4e0d\u652f\u6301\u4f7f\u7528 . : \u7b49\u7b26\u53f7\u4f5c\u4e3a Topic \u7684\u540d\u79f0\uff0c\u6240\u4ee5\u6211\u4eec\u8fdb\u884c\u4e86\u66ff\u6362\uff0c\u6211\u4eec\u5c06 . \u66ff\u6362\u4e3a\u4e86 - \uff0c\u5c06 : \u66ff\u6362\u4e3a\u4e86 _ \u6ce8\u610f\u4e8b\u9879 Amazon SNS \u5f53\u524d\u5141\u8bb8\u53d1\u5e03\u7684\u6d88\u606f\u6700\u5927\u5927\u5c0f\u4e3a 256KB \u4e3e\u4f8b\uff0c\u4f60\u7684\u5f53\u524d\u9879\u76ee\u4e2d\u6709\u4ee5\u4e0b\u4e24\u4e2a\u8ba2\u9605\u8005\u65b9\u6cd5 [CapSubscribe(\"sample.sns.foo\")] public void TestFoo ( DateTime value ) { } [CapSubscribe(\"sample.sns.bar\")] public void TestBar ( DateTime value ) { } \u5728 CAP \u542f\u52a8\u540e\uff0c\u5728 AWS SNS \u4e2d\u4f60\u5c06\u770b\u5230","title":"SNS"},{"location":"user-guide/zh/transport/aws-sqs/#sqs","text":"\u9488\u5bf9\u6bcf\u4e2a\u6d88\u8d39\u8005\u7ec4\uff0cCAP \u5c06\u521b\u5efa\u4e00\u4e2a\u4e0e\u4e4b\u5bf9\u5e94\u7684 SQS \u961f\u5217\uff0c\u961f\u5217\u7684\u540d\u79f0\u4e3a\u914d\u7f6e\u9879\u4e2d DefaultGroup \u7684\u540d\u79f0\uff0c\u7c7b\u578b\u4e3a Standard Queue \u3002 \u8be5 SQS \u961f\u5217\u5c06\u8ba2\u9605 SNS \u4e2d\u7684 Topic \uff0c\u5982\u4e0b\u56fe\uff1a \u6ce8\u610f\u4e8b\u9879 \u7531\u4e8e AWS SNS \u7684\u9650\u5236\uff0c\u5f53\u4f60\u51cf\u5c11\u8ba2\u9605\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u4e0d\u4f1a\u4e3b\u52a8\u5220\u9664 AWS SNS \u6216\u8005 SQS \u4e0a\u7684\u76f8\u5173 Topic \u6216 Queue\uff0c\u4f60\u9700\u8981\u624b\u52a8\u5220\u9664\u4ed6\u4eec\u3002","title":"SQS"},{"location":"user-guide/zh/transport/aws-sqs/#_1","text":"\u8981\u4f7f\u7528 AWS SQS \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.AmazonSQS \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e RabbitMQ \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseAmazonSQS ( opt => { //AmazonSQSOptions }); // x.UseXXX ... }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/transport/aws-sqs/#amazonsqs-options","text":"CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 AmazonSQSOptions \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT Region AWS \u6240\u5904\u7684\u533a\u57df Amazon.RegionEndpoint Credentials AWS AK SK\u4fe1\u606f Amazon.Runtime.AWSCredentials \u5982\u679c\u4f60\u7684\u9879\u76ee\u8fd0\u884c\u5728 AWS EC2 \u4e2d\uff0c\u5219\u4e0d\u9700\u8981\u8bbe\u7f6e Credentials\uff0c\u76f4\u63a5\u5bf9 EC2 \u5e94\u7528 IAM \u7b56\u7565\u5373\u53ef\u3002 Credentials \u9700\u8981\u5177\u6709\u65b0\u589e\u548c\u8ba2\u9605 SNS Topic\uff0cSQS Queue \u7b49\u6743\u9650\u3002","title":"AmazonSQS Options"},{"location":"user-guide/zh/transport/azure-service-bus/","text":"Azure Service Bus \u00b6 Azure \u670d\u52a1\u603b\u7ebf\u662f\u4e00\u79cd\u591a\u79df\u6237\u4e91\u6d88\u606f\u670d\u52a1\uff0c\u53ef\u7528\u4e8e\u5728\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u4e4b\u95f4\u53d1\u9001\u4fe1\u606f\u3002 \u5f02\u6b65\u64cd\u4f5c\u53ef\u5b9e\u73b0\u7075\u6d3b\u7684\u4e2d\u8f6c\u6d88\u606f\u4f20\u9001\u3001\u7ed3\u6784\u5316\u7684\u5148\u8fdb\u5148\u51fa (FIFO) \u6d88\u606f\u4f20\u9001\u4ee5\u53ca\u53d1\u5e03/\u8ba2\u9605\u529f\u80fd\u3002 CAP \u652f\u6301\u4f7f\u7528 Azure Service Bus \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002 Configuration \u00b6 \u5fc5\u8981\u6761\u4ef6 \u9488\u5bf9 Service Bus \u5b9a\u4ef7\u5c42, CAP \u8981\u6c42\u4f7f\u7528 \u201c\u6807\u51c6\u201d \u6216\u8005 \u201c\u9ad8\u7ea7\u201d \u4ee5\u652f\u6301 Topic \u529f\u80fd\u3002 \u8981\u4f7f\u7528 Azure Service Bus \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.AzureServiceBus \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseAzureServiceBus ( opt => { //AzureServiceBusOptions }); // x.UseXXX ... }); } AzureServiceBus Options \u00b6 CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Azure Service Bus \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT ConnectionString Endpoint \u5730\u5740 string TopicPath Topic entity path string cap EnableSessions \u542f\u7528 Service bus sessions bool false ManagementTokenProvider Token\u63d0\u4f9b ITokenProvider null Sessions \u00b6 \u5f53\u4f7f\u7528 EnableSessions \u9009\u9879\u542f\u7528 sessions \u540e\uff0c\u6bcf\u4e2a\u53d1\u9001\u7684\u6d88\u606f\u90fd\u4f1a\u5177\u6709\u4e00\u4e2a session id\u3002 \u8981\u63a7\u5236 seesion id \u4f60\u53ef\u4ee5\u5728\u53d1\u9001\u6d88\u606f\u65f6\u5728\u6d88\u606f\u5934\u4e2d\u4f7f\u7528 AzureServiceBusHeaders.SessionId \u643a\u5e26\u5b83\u3002 ICapPublisher capBus = ...; string yourEventName = ...; YourEventType yourEvent = ...; Dictionary < string , string > extraHeaders = new Dictionary < string , string >(); extraHeaders . Add ( AzureServiceBusHeaders . SessionId , < your - session - id >); capBus . Publish ( yourEventName , yourEvent , extraHeaders ); \u5982\u679c\u5934\u4e2d\u6ca1\u6709 session id , \u90a3\u4e48\u6d88\u606f Id \u4ecd\u7136\u4f7f\u7528\u7684 Message Id.","title":"Azure Service Bus"},{"location":"user-guide/zh/transport/azure-service-bus/#azure-service-bus","text":"Azure \u670d\u52a1\u603b\u7ebf\u662f\u4e00\u79cd\u591a\u79df\u6237\u4e91\u6d88\u606f\u670d\u52a1\uff0c\u53ef\u7528\u4e8e\u5728\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u4e4b\u95f4\u53d1\u9001\u4fe1\u606f\u3002 \u5f02\u6b65\u64cd\u4f5c\u53ef\u5b9e\u73b0\u7075\u6d3b\u7684\u4e2d\u8f6c\u6d88\u606f\u4f20\u9001\u3001\u7ed3\u6784\u5316\u7684\u5148\u8fdb\u5148\u51fa (FIFO) \u6d88\u606f\u4f20\u9001\u4ee5\u53ca\u53d1\u5e03/\u8ba2\u9605\u529f\u80fd\u3002 CAP \u652f\u6301\u4f7f\u7528 Azure Service Bus \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002","title":"Azure Service Bus"},{"location":"user-guide/zh/transport/azure-service-bus/#configuration","text":"\u5fc5\u8981\u6761\u4ef6 \u9488\u5bf9 Service Bus \u5b9a\u4ef7\u5c42, CAP \u8981\u6c42\u4f7f\u7528 \u201c\u6807\u51c6\u201d \u6216\u8005 \u201c\u9ad8\u7ea7\u201d \u4ee5\u652f\u6301 Topic \u529f\u80fd\u3002 \u8981\u4f7f\u7528 Azure Service Bus \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.AzureServiceBus \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseAzureServiceBus ( opt => { //AzureServiceBusOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/zh/transport/azure-service-bus/#azureservicebus-options","text":"CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Azure Service Bus \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT ConnectionString Endpoint \u5730\u5740 string TopicPath Topic entity path string cap EnableSessions \u542f\u7528 Service bus sessions bool false ManagementTokenProvider Token\u63d0\u4f9b ITokenProvider null","title":"AzureServiceBus Options"},{"location":"user-guide/zh/transport/azure-service-bus/#sessions","text":"\u5f53\u4f7f\u7528 EnableSessions \u9009\u9879\u542f\u7528 sessions \u540e\uff0c\u6bcf\u4e2a\u53d1\u9001\u7684\u6d88\u606f\u90fd\u4f1a\u5177\u6709\u4e00\u4e2a session id\u3002 \u8981\u63a7\u5236 seesion id \u4f60\u53ef\u4ee5\u5728\u53d1\u9001\u6d88\u606f\u65f6\u5728\u6d88\u606f\u5934\u4e2d\u4f7f\u7528 AzureServiceBusHeaders.SessionId \u643a\u5e26\u5b83\u3002 ICapPublisher capBus = ...; string yourEventName = ...; YourEventType yourEvent = ...; Dictionary < string , string > extraHeaders = new Dictionary < string , string >(); extraHeaders . Add ( AzureServiceBusHeaders . SessionId , < your - session - id >); capBus . Publish ( yourEventName , yourEvent , extraHeaders ); \u5982\u679c\u5934\u4e2d\u6ca1\u6709 session id , \u90a3\u4e48\u6d88\u606f Id \u4ecd\u7136\u4f7f\u7528\u7684 Message Id.","title":"Sessions"},{"location":"user-guide/zh/transport/general/","text":"\u8fd0\u8f93\u5668 \u00b6 \u901a\u8fc7\u8fd0\u8f93\u5c06\u6570\u636e\u4ece\u4e00\u4e2a\u5730\u65b9\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u5730\u65b9-\u5728\u91c7\u96c6\u7a0b\u5e8f\u548c\u7ba1\u9053\u4e4b\u95f4\uff0c\u7ba1\u9053\u4e0e\u5b9e\u4f53\u6570\u636e\u5e93\u4e4b\u95f4\uff0c\u751a\u81f3\u5728\u7ba1\u9053\u4e0e\u5916\u90e8\u7cfb\u7edf\u4e4b\u95f4\u3002 \u652f\u6301\u7684\u8fd0\u8f93\u5668 \u00b6 CAP \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u8fd0\u8f93\u65b9\u5f0f\uff1a RabbitMQ Kafka Azure Service Bus Amazon SQS NATS In-Memory Queue Redis Streams Apache Pulsar \u600e\u4e48\u9009\u62e9\u8fd0\u8f93\u5668 \u00b6 \ud83c\udff3\u200d\ud83c\udf08 RabbitMQ Kafka Azure Service Bus In-Memory \u5b9a\u4f4d \u53ef\u9760\u6d88\u606f\u4f20\u8f93 \u5b9e\u65f6\u6570\u636e\u5904\u7406 \u4e91 \u5185\u5b58\u578b\uff0c\u6d4b\u8bd5 \u5206\u5e03\u5f0f \u2714 \u2714 \u2714 \u274c \u6301\u4e45\u5316 \u2714 \u2714 \u2714 \u274c \u6027\u80fd Medium High Medium High Azure Service Bus vs RabbitMQ : http://geekswithblogs.net/michaelstephenson/archive/2012/08/12/150399.aspx Kafka vs RabbitMQ : https://stackoverflow.com/questions/42151544/is-there-any-reason-to-use-rabbitmq-over-kafka \u793e\u533a\u652f\u6301\u7684\u8fd0\u8f93\u5668 \u00b6 \u611f\u8c22\u793e\u533a\u5bf9CAP\u7684\u652f\u6301\uff0c\u4ee5\u4e0b\u662f\u793e\u533a\u652f\u6301\u7684\u8fd0\u8f93\u5668\u5b9e\u73b0 ActiveMQ (@ Lukas Zhang ): https://github.com/lukazh RedisMQ ( @\u6728\u6728 ): https://github.com/difudotnet/CAP.RedisMQ.Extensions ZeroMQ ( @maikebing ): https://github.com/maikebing/CAP.Extensions/tree/master/src/DotNetCore.CAP.ZeroMQ MQTT ( @john jiang ): https://github.com/jinzaz/jinzaz.CAP.MQTT","title":"\u7b80\u4ecb"},{"location":"user-guide/zh/transport/general/#_1","text":"\u901a\u8fc7\u8fd0\u8f93\u5c06\u6570\u636e\u4ece\u4e00\u4e2a\u5730\u65b9\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u5730\u65b9-\u5728\u91c7\u96c6\u7a0b\u5e8f\u548c\u7ba1\u9053\u4e4b\u95f4\uff0c\u7ba1\u9053\u4e0e\u5b9e\u4f53\u6570\u636e\u5e93\u4e4b\u95f4\uff0c\u751a\u81f3\u5728\u7ba1\u9053\u4e0e\u5916\u90e8\u7cfb\u7edf\u4e4b\u95f4\u3002","title":"\u8fd0\u8f93\u5668"},{"location":"user-guide/zh/transport/general/#_2","text":"CAP \u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u8fd0\u8f93\u65b9\u5f0f\uff1a RabbitMQ Kafka Azure Service Bus Amazon SQS NATS In-Memory Queue Redis Streams Apache Pulsar","title":"\u652f\u6301\u7684\u8fd0\u8f93\u5668"},{"location":"user-guide/zh/transport/general/#_3","text":"\ud83c\udff3\u200d\ud83c\udf08 RabbitMQ Kafka Azure Service Bus In-Memory \u5b9a\u4f4d \u53ef\u9760\u6d88\u606f\u4f20\u8f93 \u5b9e\u65f6\u6570\u636e\u5904\u7406 \u4e91 \u5185\u5b58\u578b\uff0c\u6d4b\u8bd5 \u5206\u5e03\u5f0f \u2714 \u2714 \u2714 \u274c \u6301\u4e45\u5316 \u2714 \u2714 \u2714 \u274c \u6027\u80fd Medium High Medium High Azure Service Bus vs RabbitMQ : http://geekswithblogs.net/michaelstephenson/archive/2012/08/12/150399.aspx Kafka vs RabbitMQ : https://stackoverflow.com/questions/42151544/is-there-any-reason-to-use-rabbitmq-over-kafka","title":"\u600e\u4e48\u9009\u62e9\u8fd0\u8f93\u5668"},{"location":"user-guide/zh/transport/general/#_4","text":"\u611f\u8c22\u793e\u533a\u5bf9CAP\u7684\u652f\u6301\uff0c\u4ee5\u4e0b\u662f\u793e\u533a\u652f\u6301\u7684\u8fd0\u8f93\u5668\u5b9e\u73b0 ActiveMQ (@ Lukas Zhang ): https://github.com/lukazh RedisMQ ( @\u6728\u6728 ): https://github.com/difudotnet/CAP.RedisMQ.Extensions ZeroMQ ( @maikebing ): https://github.com/maikebing/CAP.Extensions/tree/master/src/DotNetCore.CAP.ZeroMQ MQTT ( @john jiang ): https://github.com/jinzaz/jinzaz.CAP.MQTT","title":"\u793e\u533a\u652f\u6301\u7684\u8fd0\u8f93\u5668"},{"location":"user-guide/zh/transport/in-memory-queue/","text":"In-Memory Queue \u00b6 In Memory Queue \u4e3a\u57fa\u4e8e\u5185\u5b58\u7684\u6d88\u606f\u961f\u5217\uff0c\u8be5\u6269\u5c55\u7531 \u793e\u533a \u8fdb\u884c\u63d0\u4f9b\u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528 In Memory Queue \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package Savorboard.CAP.InMemoryMessageQueue \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseInMemoryMessageQueue (); // x.UseXXX ... }); }","title":"In-Memory Queue"},{"location":"user-guide/zh/transport/in-memory-queue/#in-memory-queue","text":"In Memory Queue \u4e3a\u57fa\u4e8e\u5185\u5b58\u7684\u6d88\u606f\u961f\u5217\uff0c\u8be5\u6269\u5c55\u7531 \u793e\u533a \u8fdb\u884c\u63d0\u4f9b\u3002","title":"In-Memory Queue"},{"location":"user-guide/zh/transport/in-memory-queue/#_1","text":"\u8981\u4f7f\u7528 In Memory Queue \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package Savorboard.CAP.InMemoryMessageQueue \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e\u5185\u5b58\u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseInMemoryMessageQueue (); // x.UseXXX ... }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/transport/kafka/","text":"Apache Kafka\u00ae \u00b6 Apache Kafka\u00ae \u662f\u4e00\u4e2a\u5f00\u6e90\u6d41\u5904\u7406\u8f6f\u4ef6\u5e73\u53f0\uff0c\u7531 LinkedIn \u5f00\u53d1\u5e76\u6350\u8d60\u7ed9 Apache Software Foundation\uff0c\u7528 Scala \u548c Java \u7f16\u5199\u3002 CAP \u652f\u6301\u4f7f\u7528 Apache Kafka\u00ae \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002 Configuration \u00b6 \u8981\u4f7f\u7528 Kafka \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.Kafka \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Kafka \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseKafka ( opt =>{ //KafkaOptions }); // x.UseXXX ... }); } Kafka Options \u00b6 CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Kafka \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT Servers Broker \u5730\u5740 string ConnectionPoolSize \u7528\u6237\u540d int 10 CustomHeaders \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u5934 Function \u6709\u5173 CustomHeaders \u7684\u8bf4\u660e\uff1a \u5982\u679c\u4f60\u60f3\u5728\u6d88\u8d39\u6d88\u606f\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u4ece CapHeader \u83b7\u53d6 Kafka \u4e2d\u4f8b\u5982 Offset \u6216\u8005 Partition \u7b49\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6b64\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u4f8b\u5982\u4ee5\u4e0b\u4ee3\u7801\u4e3a\u4f60\u5c55\u793a\u4e86\u5982\u4f55\u8fdb\u884c\u8bbe\u7f6e\u989d\u5916\u7684\u53c2\u6570\u5230 CapHeader \u4e2d: x . UseKafka ( opt => { //... opt . CustomHeaders = kafkaResult => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( \"my.kafka.offset\" , kafkaResult . Offset . ToString ()), new KeyValuePair < string , string >( \"my.kafka.partition\" , kafkaResult . Partition . ToString ()) }; }); \u7136\u540e\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u65b9\u5f0f\u6765\u83b7\u53d6\u4f60\u6dfb\u52a0\u7684\u5934\u4fe1\u606f: [CapSubscribe(\"sample.kafka.postgrsql\")] public void HeadersTest ( DateTime value , [ FromCap ] CapHeader header ) { var offset = header [ \"my.kafka.offset\" ]; var partition = header [ \"my.kafka.partition\" ]; } Kafka MainConfig Options \u00b6 \u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f Kakfa \u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 MainConfig \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a services . AddCap ( capOptions => { capOptions . UseKafka ( kafkaOption => { // kafka options. // kafkaOptions.MainConfig.Add(\"\", \"\"); }); }); MainConfig \u4e3a\u914d\u7f6e\u5b57\u5178\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u627e\u5230\u5176\u652f\u6301\u7684\u914d\u7f6e\u9879\u5217\u8868\u3002 https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md","title":"Apache Kafka\u00ae"},{"location":"user-guide/zh/transport/kafka/#apache-kafka","text":"Apache Kafka\u00ae \u662f\u4e00\u4e2a\u5f00\u6e90\u6d41\u5904\u7406\u8f6f\u4ef6\u5e73\u53f0\uff0c\u7531 LinkedIn \u5f00\u53d1\u5e76\u6350\u8d60\u7ed9 Apache Software Foundation\uff0c\u7528 Scala \u548c Java \u7f16\u5199\u3002 CAP \u652f\u6301\u4f7f\u7528 Apache Kafka\u00ae \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002","title":"Apache Kafka\u00ae"},{"location":"user-guide/zh/transport/kafka/#configuration","text":"\u8981\u4f7f\u7528 Kafka \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.Kafka \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Kafka \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseKafka ( opt =>{ //KafkaOptions }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/zh/transport/kafka/#kafka-options","text":"CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Kafka \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT Servers Broker \u5730\u5740 string ConnectionPoolSize \u7528\u6237\u540d int 10 CustomHeaders \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u5934 Function \u6709\u5173 CustomHeaders \u7684\u8bf4\u660e\uff1a \u5982\u679c\u4f60\u60f3\u5728\u6d88\u8d39\u6d88\u606f\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u4ece CapHeader \u83b7\u53d6 Kafka \u4e2d\u4f8b\u5982 Offset \u6216\u8005 Partition \u7b49\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6b64\u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u4f8b\u5982\u4ee5\u4e0b\u4ee3\u7801\u4e3a\u4f60\u5c55\u793a\u4e86\u5982\u4f55\u8fdb\u884c\u8bbe\u7f6e\u989d\u5916\u7684\u53c2\u6570\u5230 CapHeader \u4e2d: x . UseKafka ( opt => { //... opt . CustomHeaders = kafkaResult => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( \"my.kafka.offset\" , kafkaResult . Offset . ToString ()), new KeyValuePair < string , string >( \"my.kafka.partition\" , kafkaResult . Partition . ToString ()) }; }); \u7136\u540e\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u65b9\u5f0f\u6765\u83b7\u53d6\u4f60\u6dfb\u52a0\u7684\u5934\u4fe1\u606f: [CapSubscribe(\"sample.kafka.postgrsql\")] public void HeadersTest ( DateTime value , [ FromCap ] CapHeader header ) { var offset = header [ \"my.kafka.offset\" ]; var partition = header [ \"my.kafka.partition\" ]; }","title":"Kafka Options"},{"location":"user-guide/zh/transport/kafka/#kafka-mainconfig-options","text":"\u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f Kakfa \u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 MainConfig \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a services . AddCap ( capOptions => { capOptions . UseKafka ( kafkaOption => { // kafka options. // kafkaOptions.MainConfig.Add(\"\", \"\"); }); }); MainConfig \u4e3a\u914d\u7f6e\u5b57\u5178\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u627e\u5230\u5176\u652f\u6301\u7684\u914d\u7f6e\u9879\u5217\u8868\u3002 https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md","title":"Kafka MainConfig Options"},{"location":"user-guide/zh/transport/nats/","text":"NATS \u00b6 NATS \u662f\u4e00\u4e2a\u7b80\u5355\u3001\u5b89\u5168\u3001\u9ad8\u6027\u80fd\u7684\u6570\u5b57\u7cfb\u7edf\u3001\u670d\u52a1\u548c\u8bbe\u5907\u901a\u4fe1\u7cfb\u7edf\u3002NATS \u662f CNCF \u7684\u4e00\u90e8\u5206\u3002 Warning CAP 5.2.0 \u4ee5\u4e0b\u7684\u7248\u672c\u57fa\u4e8e Request/Response \u5b9e\u73b0, \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u57fa\u4e8e JetStream \u5b9e\u73b0\u3002 \u67e5\u770b https://github.com/dotnetcore/CAP/issues/983 \u4e86\u89e3\u66f4\u591a\u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528NATS \u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u5b89\u88c5\u4e0b\u9762\u7684NuGet\u5305\uff1a PM > Install-Package DotNetCore . CAP . NATS \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 Startup.cs \u6587\u4ef6\u4e2d\u914d\u7f6e ConfigureServices \u6765\u6dfb\u52a0\u914d\u7f6e\uff1a public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( capOptions => { capOptions . UseNATS ( natsOptions =>{ //NATS Options }); }); } NATS \u914d\u7f6e \u00b6 CAP \u76f4\u63a5\u63d0\u4f9b\u7684\u5173\u4e8e NATS \u7684\u914d\u7f6e\u53c2\u6570\uff1a NAME DESCRIPTION TYPE DEFAULT Options NATS \u5ba2\u6237\u7aef\u914d\u7f6e Options Options Servers \u670d\u52a1\u5668Urls\u5730\u5740 string NULL ConnectionPoolSize \u8fde\u63a5\u6c60\u6570\u91cf uint 10 NATS ConfigurationOptions \u00b6 \u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f\u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 Options \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a services . AddCap ( capOptions => { capOptions . UseNATS ( natsOptions => { // NATS options. natsOptions . Options . Url = \"\" ; }); }); Options \u662f NATS.Client \u5ba2\u6237\u7aef\u63d0\u4f9b\u7684\u914d\u7f6e\uff0c \u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a \u94fe\u63a5 \u627e\u5230\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002","title":"NATS"},{"location":"user-guide/zh/transport/nats/#nats","text":"NATS \u662f\u4e00\u4e2a\u7b80\u5355\u3001\u5b89\u5168\u3001\u9ad8\u6027\u80fd\u7684\u6570\u5b57\u7cfb\u7edf\u3001\u670d\u52a1\u548c\u8bbe\u5907\u901a\u4fe1\u7cfb\u7edf\u3002NATS \u662f CNCF \u7684\u4e00\u90e8\u5206\u3002 Warning CAP 5.2.0 \u4ee5\u4e0b\u7684\u7248\u672c\u57fa\u4e8e Request/Response \u5b9e\u73b0, \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u57fa\u4e8e JetStream \u5b9e\u73b0\u3002 \u67e5\u770b https://github.com/dotnetcore/CAP/issues/983 \u4e86\u89e3\u66f4\u591a\u3002","title":"NATS"},{"location":"user-guide/zh/transport/nats/#_1","text":"\u8981\u4f7f\u7528NATS \u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u5b89\u88c5\u4e0b\u9762\u7684NuGet\u5305\uff1a PM > Install-Package DotNetCore . CAP . NATS \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 Startup.cs \u6587\u4ef6\u4e2d\u914d\u7f6e ConfigureServices \u6765\u6dfb\u52a0\u914d\u7f6e\uff1a public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( capOptions => { capOptions . UseNATS ( natsOptions =>{ //NATS Options }); }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/transport/nats/#nats_1","text":"CAP \u76f4\u63a5\u63d0\u4f9b\u7684\u5173\u4e8e NATS \u7684\u914d\u7f6e\u53c2\u6570\uff1a NAME DESCRIPTION TYPE DEFAULT Options NATS \u5ba2\u6237\u7aef\u914d\u7f6e Options Options Servers \u670d\u52a1\u5668Urls\u5730\u5740 string NULL ConnectionPoolSize \u8fde\u63a5\u6c60\u6570\u91cf uint 10","title":"NATS \u914d\u7f6e"},{"location":"user-guide/zh/transport/nats/#nats-configurationoptions","text":"\u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f\u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 Options \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a services . AddCap ( capOptions => { capOptions . UseNATS ( natsOptions => { // NATS options. natsOptions . Options . Url = \"\" ; }); }); Options \u662f NATS.Client \u5ba2\u6237\u7aef\u63d0\u4f9b\u7684\u914d\u7f6e\uff0c \u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a \u94fe\u63a5 \u627e\u5230\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002","title":"NATS ConfigurationOptions"},{"location":"user-guide/zh/transport/pulsar/","text":"Apache Pulsar \u00b6 Apache Pulsar \u662f\u4e00\u4e2a\u7528\u4e8e\u670d\u52a1\u5668\u5230\u670d\u52a1\u5668\u7684\u6d88\u606f\u7cfb\u7edf\uff0c\u5177\u6709\u591a\u79df\u6237\u3001\u9ad8\u6027\u80fd\u7b49\u4f18\u52bf\u3002 Pulsar \u6700\u521d\u7531 Yahoo \u5f00\u53d1\uff0c\u76ee\u524d\u7531 Apache \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7ba1\u7406\u3002 CAP \u652f\u6301\u4f7f\u7528 Apache Pulsar \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002 Configuration \u00b6 \u8981\u4f7f\u7528 Pulsar \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.Pulsar \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Pulsar \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UsePulsar ( opt => { //Pulsar Options }); // x.UseXXX ... }); } Pulsar Options \u00b6 CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Pulsar \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT ServiceUrl Broker \u5730\u5740 string TlsOptions TLS \u914d\u7f6e\u9879 object","title":"Apache Pulsar"},{"location":"user-guide/zh/transport/pulsar/#apache-pulsar","text":"Apache Pulsar \u662f\u4e00\u4e2a\u7528\u4e8e\u670d\u52a1\u5668\u5230\u670d\u52a1\u5668\u7684\u6d88\u606f\u7cfb\u7edf\uff0c\u5177\u6709\u591a\u79df\u6237\u3001\u9ad8\u6027\u80fd\u7b49\u4f18\u52bf\u3002 Pulsar \u6700\u521d\u7531 Yahoo \u5f00\u53d1\uff0c\u76ee\u524d\u7531 Apache \u8f6f\u4ef6\u57fa\u91d1\u4f1a\u7ba1\u7406\u3002 CAP \u652f\u6301\u4f7f\u7528 Apache Pulsar \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002","title":"Apache Pulsar"},{"location":"user-guide/zh/transport/pulsar/#configuration","text":"\u8981\u4f7f\u7528 Pulsar \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.Pulsar \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Pulsar \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UsePulsar ( opt => { //Pulsar Options }); // x.UseXXX ... }); }","title":"Configuration"},{"location":"user-guide/zh/transport/pulsar/#pulsar-options","text":"CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Pulsar \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT ServiceUrl Broker \u5730\u5740 string TlsOptions TLS \u914d\u7f6e\u9879 object","title":"Pulsar Options"},{"location":"user-guide/zh/transport/rabbitmq/","text":"RabbitMQ \u00b6 RabbitMQ\u662f\u5b9e\u73b0\u4e86\u9ad8\u7ea7\u6d88\u606f\u961f\u5217\u534f\u8bae\uff08AMQP\uff09\u7684\u5f00\u6e90\u6d88\u606f\u4ee3\u7406\u8f6f\u4ef6\uff08\u4ea6\u79f0\u9762\u5411\u6d88\u606f\u7684\u4e2d\u95f4\u4ef6\uff09\u3002RabbitMQ \u670d\u52a1\u5668\u662f\u7528 Erlang \u8bed\u8a00\u7f16\u5199\u7684\uff0c\u800c\u805a\u7c7b\u548c\u6545\u969c\u8f6c\u79fb\u662f\u6784\u5efa\u5728\u5f00\u6e90\u7684\u901a\u8baf\u5e73\u53f0\u6846\u67b6\u4e0a\u7684\u3002\u6240\u6709\u4e3b\u8981\u7684\u7f16\u7a0b\u8bed\u8a00\u5747\u6709\u4e0e\u4ee3\u7406\u63a5\u53e3\u901a\u8baf\u7684\u5ba2\u6237\u7aef\u5e93\u3002 CAP \u652f\u6301\u4f7f\u7528 RabbitMQ \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528 RabbitMQ \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.RabbitMQ \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e RabbitMQ \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseRabbitMQ ( opt => { //RabbitMQOptions }); // x.UseXXX ... }); } RabbitMQ Options \u00b6 CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 RabbitMQ \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a \u914d\u7f6e\u9879 \u63cf\u8ff0 \u7c7b\u578b \u9ed8\u8ba4\u503c HostName \u5bbf\u4e3b\u5730\u5740\uff0c\u5982\u679c\u8981\u914d\u7f6e\u96c6\u7fa4\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u4f8b\u5982 192.168.1.111,192.168.1.112 string localhost UserName \u7528\u6237\u540d string guest Password \u5bc6\u7801 string guest VirtualHost \u865a\u62df\u4e3b\u673a string / Port \u7aef\u53e3\u53f7 int -1 ExchangeName CAP\u9ed8\u8ba4Exchange\u540d\u79f0 string cap.default.topic QueueArguments \u961f\u5217\u989d\u5916\u53c2\u6570 x-arguments QueueArgumentsOptions N/A ConnectionFactoryOptions RabbitMQClient\u539f\u751f\u53c2\u6570 ConnectionFactory N/A CustomHeaders \u8ba2\u9605\u8005\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f \u89c1\u4e0b\u6587 N/A PublishConfirms \u662f\u5426\u542f\u7528 \u53d1\u5e03\u786e\u8ba4 bool false ConnectionFactory Option \u00b6 \u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f ConnectionFactory \u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 ConnectionFactoryOptions \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a services . AddCap ( x => { x . UseRabbitMQ ( o => { o . HostName = \"localhost\" ; o . ConnectionFactoryOptions = opt => { //rabbitmq client ConnectionFactory config }; }); }); CustomHeaders Option \u00b6 \u5f53\u9700\u8981\u4ece\u5f02\u6784\u7cfb\u7edf\u6216\u8005\u76f4\u63a5\u63a5\u6536\u4eceRabbitMQ \u63a7\u5236\u53f0\u53d1\u9001\u7684\u6d88\u606f\u65f6\uff0c\u7531\u4e8e CAP \u9700\u8981\u5b9a\u4e49\u989d\u5916\u7684\u5934\u4fe1\u606f\u624d\u80fd\u6b63\u5e38\u8ba2\u9605\uff0c\u6240\u4ee5\u6b64\u65f6\u4f1a\u51fa\u73b0\u5f02\u5e38\u3002\u901a\u8fc7\u63d0\u4f9b\u6b64\u53c2\u6570\u6765\u8fdb\u884c\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f\u7684\u8bbe\u7f6e\u6765\u4f7f\u8ba2\u9605\u8005\u6b63\u5e38\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6709\u5173 \u5934\u4fe1\u606f \u7684\u8bf4\u660e\u3002 \u7528\u6cd5\u5982\u4e0b\uff1a x . UseRabbitMQ ( aa => { aa . CustomHeaders = e => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( Headers . MessageId , SnowflakeId . Default (). NextId (). ToString ()), new KeyValuePair < string , string >( Headers . MessageName , e . RoutingKey ), }; }); \u5982\u4f55\u8fde\u63a5 RabbitMQ \u96c6\u7fa4\uff1f \u00b6 \u4f7f\u7528\u9017\u53f7\u5206\u9694\u8fde\u63a5\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u5982\u4e0b\uff1a x=> x.UseRabbitMQ(\"localhost:5672,localhost:5673,localhost:5674\")","title":"RabbitMQ"},{"location":"user-guide/zh/transport/rabbitmq/#rabbitmq","text":"RabbitMQ\u662f\u5b9e\u73b0\u4e86\u9ad8\u7ea7\u6d88\u606f\u961f\u5217\u534f\u8bae\uff08AMQP\uff09\u7684\u5f00\u6e90\u6d88\u606f\u4ee3\u7406\u8f6f\u4ef6\uff08\u4ea6\u79f0\u9762\u5411\u6d88\u606f\u7684\u4e2d\u95f4\u4ef6\uff09\u3002RabbitMQ \u670d\u52a1\u5668\u662f\u7528 Erlang \u8bed\u8a00\u7f16\u5199\u7684\uff0c\u800c\u805a\u7c7b\u548c\u6545\u969c\u8f6c\u79fb\u662f\u6784\u5efa\u5728\u5f00\u6e90\u7684\u901a\u8baf\u5e73\u53f0\u6846\u67b6\u4e0a\u7684\u3002\u6240\u6709\u4e3b\u8981\u7684\u7f16\u7a0b\u8bed\u8a00\u5747\u6709\u4e0e\u4ee3\u7406\u63a5\u53e3\u901a\u8baf\u7684\u5ba2\u6237\u7aef\u5e93\u3002 CAP \u652f\u6301\u4f7f\u7528 RabbitMQ \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\u3002","title":"RabbitMQ"},{"location":"user-guide/zh/transport/rabbitmq/#_1","text":"\u8981\u4f7f\u7528 RabbitMQ \u4f5c\u4e3a\u6d88\u606f\u4f20\u8f93\u5668\uff0c\u4f60\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u6269\u5c55\u5305\uff1a Install-Package DotNetCore.CAP.RabbitMQ \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e RabbitMQ \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { // ... services . AddCap ( x => { x . UseRabbitMQ ( opt => { //RabbitMQOptions }); // x.UseXXX ... }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/transport/rabbitmq/#rabbitmq-options","text":"CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 RabbitMQ \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a \u914d\u7f6e\u9879 \u63cf\u8ff0 \u7c7b\u578b \u9ed8\u8ba4\u503c HostName \u5bbf\u4e3b\u5730\u5740\uff0c\u5982\u679c\u8981\u914d\u7f6e\u96c6\u7fa4\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u4f8b\u5982 192.168.1.111,192.168.1.112 string localhost UserName \u7528\u6237\u540d string guest Password \u5bc6\u7801 string guest VirtualHost \u865a\u62df\u4e3b\u673a string / Port \u7aef\u53e3\u53f7 int -1 ExchangeName CAP\u9ed8\u8ba4Exchange\u540d\u79f0 string cap.default.topic QueueArguments \u961f\u5217\u989d\u5916\u53c2\u6570 x-arguments QueueArgumentsOptions N/A ConnectionFactoryOptions RabbitMQClient\u539f\u751f\u53c2\u6570 ConnectionFactory N/A CustomHeaders \u8ba2\u9605\u8005\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f \u89c1\u4e0b\u6587 N/A PublishConfirms \u662f\u5426\u542f\u7528 \u53d1\u5e03\u786e\u8ba4 bool false","title":"RabbitMQ Options"},{"location":"user-guide/zh/transport/rabbitmq/#connectionfactory-option","text":"\u5982\u679c\u4f60\u9700\u8981 \u66f4\u591a \u539f\u751f ConnectionFactory \u76f8\u5173\u7684\u914d\u7f6e\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7 ConnectionFactoryOptions \u914d\u7f6e\u9879\u8fdb\u884c\u8bbe\u5b9a\uff1a services . AddCap ( x => { x . UseRabbitMQ ( o => { o . HostName = \"localhost\" ; o . ConnectionFactoryOptions = opt => { //rabbitmq client ConnectionFactory config }; }); });","title":"ConnectionFactory Option"},{"location":"user-guide/zh/transport/rabbitmq/#customheaders-option","text":"\u5f53\u9700\u8981\u4ece\u5f02\u6784\u7cfb\u7edf\u6216\u8005\u76f4\u63a5\u63a5\u6536\u4eceRabbitMQ \u63a7\u5236\u53f0\u53d1\u9001\u7684\u6d88\u606f\u65f6\uff0c\u7531\u4e8e CAP \u9700\u8981\u5b9a\u4e49\u989d\u5916\u7684\u5934\u4fe1\u606f\u624d\u80fd\u6b63\u5e38\u8ba2\u9605\uff0c\u6240\u4ee5\u6b64\u65f6\u4f1a\u51fa\u73b0\u5f02\u5e38\u3002\u901a\u8fc7\u63d0\u4f9b\u6b64\u53c2\u6570\u6765\u8fdb\u884c\u81ea\u5b9a\u4e49\u5934\u4fe1\u606f\u7684\u8bbe\u7f6e\u6765\u4f7f\u8ba2\u9605\u8005\u6b63\u5e38\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u6709\u5173 \u5934\u4fe1\u606f \u7684\u8bf4\u660e\u3002 \u7528\u6cd5\u5982\u4e0b\uff1a x . UseRabbitMQ ( aa => { aa . CustomHeaders = e => new List < KeyValuePair < string , string >> { new KeyValuePair < string , string >( Headers . MessageId , SnowflakeId . Default (). NextId (). ToString ()), new KeyValuePair < string , string >( Headers . MessageName , e . RoutingKey ), }; });","title":"CustomHeaders Option"},{"location":"user-guide/zh/transport/rabbitmq/#rabbitmq_1","text":"\u4f7f\u7528\u9017\u53f7\u5206\u9694\u8fde\u63a5\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u5982\u4e0b\uff1a x=> x.UseRabbitMQ(\"localhost:5672,localhost:5673,localhost:5674\")","title":"\u5982\u4f55\u8fde\u63a5 RabbitMQ \u96c6\u7fa4\uff1f"},{"location":"user-guide/zh/transport/redis-streams/","text":"Redis Streams \u00b6 Redis \u662f\u4e00\u4e2a\u5f00\u6e90\uff08BSD\u8bb8\u53ef\uff09\u7684\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u7cfb\u7edf\uff0c\u5b83\u53ef\u4ee5\u7528\u4f5c\u6570\u636e\u5e93\u3001\u7f13\u5b58\u548c\u6d88\u606f\u4e2d\u95f4\u4ef6\u3002 Redis Stream \u662f Redis 5.0 \u5f15\u5165\u7684\u4e00\u79cd\u65b0\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7528\u4e00\u79cd\u4ec5\u9644\u52a0\u7684\u6570\u636e\u7ed3\u6784\u4ee5\u66f4\u62bd\u8c61\u7684\u65b9\u5f0f\u6a21\u62df\u65e5\u5fd7\u6570\u636e\u7ed3\u6784\u3002 Redis Streams \u53ef\u4ee5\u5728 CAP \u4e2d\u7528\u4f5c\u6d88\u606f\u4f20\u8f93\u5668\u3002 \u914d\u7f6e \u00b6 \u8981\u4f7f\u7528 Redis Streams \u4f20\u8f93\u5668\uff0c\u60a8\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u5305\uff1a PM > Install-Package DotNetCore . CAP . RedisStreams \u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Redis Stream \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( capOptions => { capOptions . UseRedis ( redisOptions =>{ //redisOptions }); }); } Redis Streams Options \u00b6 CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Redis Stream \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT Configuration redis\u8fde\u63a5\u914d\u7f6e (StackExchange.Redis) ConfigurationOptions ConfigurationOptions StreamEntriesCount \u8bfb\u53d6\u65f6\u4ece stream \u8fd4\u56de\u7684\u6761\u76ee\u6570 uint 10 ConnectionPoolSize \u8fde\u63a5\u6c60\u6570 uint 10 Redis ConfigurationOptions \u00b6 \u5982\u679c\u9700\u8981**\u66f4\u591a**\u539f\u751fRedis\u76f8\u5173\u914d\u7f6e\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u5728 Configuration \u9009\u9879\u4e2d\u8fdb\u884c\u8bbe\u7f6e : services . AddCap ( capOptions => { capOptions . UseRedis ( redisOptions => { // redis options. redisOptions . Configuration . EndPoints . Add ( IPAddress . Loopback , 0 ); }); }); Configuration \u662f StackExchange.Redis ConfigurationOptions \uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64 \u94fe\u63a5 \u627e\u5230\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002","title":"Redis Streams"},{"location":"user-guide/zh/transport/redis-streams/#redis-streams","text":"Redis \u662f\u4e00\u4e2a\u5f00\u6e90\uff08BSD\u8bb8\u53ef\uff09\u7684\uff0c\u5185\u5b58\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u7cfb\u7edf\uff0c\u5b83\u53ef\u4ee5\u7528\u4f5c\u6570\u636e\u5e93\u3001\u7f13\u5b58\u548c\u6d88\u606f\u4e2d\u95f4\u4ef6\u3002 Redis Stream \u662f Redis 5.0 \u5f15\u5165\u7684\u4e00\u79cd\u65b0\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u7528\u4e00\u79cd\u4ec5\u9644\u52a0\u7684\u6570\u636e\u7ed3\u6784\u4ee5\u66f4\u62bd\u8c61\u7684\u65b9\u5f0f\u6a21\u62df\u65e5\u5fd7\u6570\u636e\u7ed3\u6784\u3002 Redis Streams \u53ef\u4ee5\u5728 CAP \u4e2d\u7528\u4f5c\u6d88\u606f\u4f20\u8f93\u5668\u3002","title":"Redis Streams"},{"location":"user-guide/zh/transport/redis-streams/#_1","text":"\u8981\u4f7f\u7528 Redis Streams \u4f20\u8f93\u5668\uff0c\u60a8\u9700\u8981\u4ece NuGet \u5b89\u88c5\u4ee5\u4e0b\u5305\uff1a PM > Install-Package DotNetCore . CAP . RedisStreams \u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5728 Startup.cs \u7684 ConfigureServices \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u57fa\u4e8e Redis Stream \u7684\u914d\u7f6e\u9879\u3002 public void ConfigureServices ( IServiceCollection services ) { services . AddCap ( capOptions => { capOptions . UseRedis ( redisOptions =>{ //redisOptions }); }); }","title":"\u914d\u7f6e"},{"location":"user-guide/zh/transport/redis-streams/#redis-streams-options","text":"CAP \u76f4\u63a5\u5bf9\u5916\u63d0\u4f9b\u7684 Redis Stream \u914d\u7f6e\u53c2\u6570\u5982\u4e0b\uff1a NAME DESCRIPTION TYPE DEFAULT Configuration redis\u8fde\u63a5\u914d\u7f6e (StackExchange.Redis) ConfigurationOptions ConfigurationOptions StreamEntriesCount \u8bfb\u53d6\u65f6\u4ece stream \u8fd4\u56de\u7684\u6761\u76ee\u6570 uint 10 ConnectionPoolSize \u8fde\u63a5\u6c60\u6570 uint 10","title":"Redis Streams Options"},{"location":"user-guide/zh/transport/redis-streams/#redis-configurationoptions","text":"\u5982\u679c\u9700\u8981**\u66f4\u591a**\u539f\u751fRedis\u76f8\u5173\u914d\u7f6e\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u5728 Configuration \u9009\u9879\u4e2d\u8fdb\u884c\u8bbe\u7f6e : services . AddCap ( capOptions => { capOptions . UseRedis ( redisOptions => { // redis options. redisOptions . Configuration . EndPoints . Add ( IPAddress . Loopback , 0 ); }); }); Configuration \u662f StackExchange.Redis ConfigurationOptions \uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6b64 \u94fe\u63a5 \u627e\u5230\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002","title":"Redis ConfigurationOptions"}]}